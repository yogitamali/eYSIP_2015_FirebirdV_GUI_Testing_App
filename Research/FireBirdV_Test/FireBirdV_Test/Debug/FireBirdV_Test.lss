
FireBirdV_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001374  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800204  00800204  0000140c  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000051b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fb  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000329  00000000  00000000  00006553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000686  00000000  00000000  0000687c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00006f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  000072b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000627  00000000  00000000  00007871  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_5>
      18:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_51>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__vector_51+0x17c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 e7       	ldi	r30, 0x74	; 116
     17e:	f3 e1       	ldi	r31, 0x13	; 19
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 30       	cpi	r26, 0x04	; 4
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a4 e0       	ldi	r26, 0x04	; 4
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a5 34       	cpi	r26, 0x45	; 69
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 c8 05 	call	0xb90	; 0xb90 <main>
     1a4:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
     27c:	86 e6       	ldi	r24, 0x66	; 102
     27e:	9e e0       	ldi	r25, 0x0E	; 14
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x4>
     284:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     286:	88 e2       	ldi	r24, 0x28	; 40
     288:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01);
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06);
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E);
     298:	8e e0       	ldi	r24, 0x0E	; 14
     29a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80);
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		
}
     2a4:	08 95       	ret

000002a6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2a6:	98 b1       	in	r25, 0x08	; 8
     2a8:	9f 70       	andi	r25, 0x0F	; 15
     2aa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2ac:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2ae:	28 2f       	mov	r18, r24
     2b0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b2:	92 2b       	or	r25, r18
     2b4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2b6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2ba:	42 9a       	sbi	0x08, 2	; 8
     2bc:	ef ef       	ldi	r30, 0xFF	; 255
     2be:	f7 e4       	ldi	r31, 0x47	; 71
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_wr_char+0x1a>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_wr_char+0x20>
     2c6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2c8:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ca:	98 b1       	in	r25, 0x08	; 8
     2cc:	9f 70       	andi	r25, 0x0F	; 15
     2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d0:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2d6:	89 2b       	or	r24, r25
     2d8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2da:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2dc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2de:	42 9a       	sbi	0x08, 2	; 8
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	97 e4       	ldi	r25, 0x47	; 71
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_wr_char+0x3e>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_wr_char+0x44>
     2ea:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ec:	42 98       	cbi	0x08, 2	; 8
}
     2ee:	08 95       	ret

000002f0 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2f6:	08 95       	ret

000002f8 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ec 01       	movw	r28, r24
	while(*str != '\0')
     2fe:	88 81       	ld	r24, Y
     300:	88 23       	and	r24, r24
     302:	31 f0       	breq	.+12     	; 0x310 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
     304:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     30a:	89 91       	ld	r24, Y+
     30c:	88 23       	and	r24, r24
     30e:	d9 f7       	brne	.-10     	; 0x306 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	79 f0       	breq	.+30     	; 0x338 <lcd_cursor+0x22>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	18 f4       	brcc	.+6      	; 0x324 <lcd_cursor+0xe>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	c9 f4       	brne	.+50     	; 0x354 <lcd_cursor+0x3e>
     322:	05 c0       	rjmp	.+10     	; 0x32e <lcd_cursor+0x18>
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	69 f0       	breq	.+26     	; 0x342 <lcd_cursor+0x2c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	a1 f4       	brne	.+40     	; 0x354 <lcd_cursor+0x3e>
     32c:	0f c0       	rjmp	.+30     	; 0x34c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     32e:	86 2f       	mov	r24, r22
     330:	81 58       	subi	r24, 0x81	; 129
     332:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     336:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     338:	86 2f       	mov	r24, r22
     33a:	81 54       	subi	r24, 0x41	; 65
     33c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     340:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     342:	86 2f       	mov	r24, r22
     344:	8d 56       	subi	r24, 0x6D	; 109
     346:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     34c:	86 2f       	mov	r24, r22
     34e:	8d 52       	subi	r24, 0x2D	; 45
     350:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     354:	08 95       	ret

00000356 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	8a 01       	movw	r16, r20
     360:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     362:	88 23       	and	r24, r24
     364:	11 f0       	breq	.+4      	; 0x36a <lcd_print+0x14>
     366:	66 23       	and	r22, r22
     368:	19 f4       	brne	.+6      	; 0x370 <lcd_print+0x1a>
	{
		lcd_home();
     36a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
     36e:	02 c0       	rjmp	.+4      	; 0x374 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     370:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     374:	c5 30       	cpi	r28, 0x05	; 5
     376:	d1 05       	cpc	r29, r1
     378:	71 f4       	brne	.+28     	; 0x396 <lcd_print+0x40>
	{
		million=value/10000+48;
     37a:	c8 01       	movw	r24, r16
     37c:	60 e1       	ldi	r22, 0x10	; 16
     37e:	77 e2       	ldi	r23, 0x27	; 39
     380:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	c0 96       	adiw	r24, 0x30	; 48
     388:	90 93 1a 02 	sts	0x021A, r25
     38c:	80 93 19 02 	sts	0x0219, r24
		lcd_wr_char(million);
     390:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
     394:	03 c0       	rjmp	.+6      	; 0x39c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     396:	c4 30       	cpi	r28, 0x04	; 4
     398:	d1 05       	cpc	r29, r1
     39a:	b9 f4       	brne	.+46     	; 0x3ca <lcd_print+0x74>
	{
		temp = value/1000;
     39c:	c8 01       	movw	r24, r16
     39e:	68 ee       	ldi	r22, 0xE8	; 232
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     3a6:	cb 01       	movw	r24, r22
     3a8:	70 93 25 02 	sts	0x0225, r23
     3ac:	60 93 24 02 	sts	0x0224, r22
		thousand = temp%10 + 48;
     3b0:	6a e0       	ldi	r22, 0x0A	; 10
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     3b8:	c0 96       	adiw	r24, 0x30	; 48
     3ba:	90 93 40 02 	sts	0x0240, r25
     3be:	80 93 3f 02 	sts	0x023F, r24
		lcd_wr_char(thousand);
     3c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3cc:	c3 30       	cpi	r28, 0x03	; 3
     3ce:	d1 05       	cpc	r29, r1
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <lcd_print+0x80>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	b1 f4       	brne	.+44     	; 0x402 <lcd_print+0xac>
	{
		temp = value/100;
     3d6:	c8 01       	movw	r24, r16
     3d8:	64 e6       	ldi	r22, 0x64	; 100
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     3e0:	cb 01       	movw	r24, r22
     3e2:	70 93 25 02 	sts	0x0225, r23
     3e6:	60 93 24 02 	sts	0x0224, r22
		hundred = temp%10 + 48;
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     3f2:	c0 96       	adiw	r24, 0x30	; 48
     3f4:	90 93 3a 02 	sts	0x023A, r25
     3f8:	80 93 39 02 	sts	0x0239, r24
		lcd_wr_char(hundred);
     3fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     400:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     402:	c2 30       	cpi	r28, 0x02	; 2
     404:	d1 05       	cpc	r29, r1
     406:	11 f0       	breq	.+4      	; 0x40c <lcd_print+0xb6>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	b1 f4       	brne	.+44     	; 0x438 <lcd_print+0xe2>
	{
		temp = value/10;
     40c:	2a e0       	ldi	r18, 0x0A	; 10
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	c8 01       	movw	r24, r16
     412:	b9 01       	movw	r22, r18
     414:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     418:	cb 01       	movw	r24, r22
     41a:	70 93 25 02 	sts	0x0225, r23
     41e:	60 93 24 02 	sts	0x0224, r22
		tens = temp%10 + 48;
     422:	b9 01       	movw	r22, r18
     424:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     428:	c0 96       	adiw	r24, 0x30	; 48
     42a:	90 93 33 02 	sts	0x0233, r25
     42e:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(tens);
     432:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     436:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     438:	c1 30       	cpi	r28, 0x01	; 1
     43a:	d1 05       	cpc	r29, r1
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0xec>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	61 f4       	brne	.+24     	; 0x45a <lcd_print+0x104>
	{
		unit = value%10 + 48;
     442:	c8 01       	movw	r24, r16
     444:	6a e0       	ldi	r22, 0x0A	; 10
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 a4 09 	call	0x1348	; 0x1348 <__udivmodhi4>
     44c:	c0 96       	adiw	r24, 0x30	; 48
     44e:	90 93 3e 02 	sts	0x023E, r25
     452:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(unit);
     456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	if(digits>5)
     45a:	c6 30       	cpi	r28, 0x06	; 6
     45c:	d1 05       	cpc	r29, r1
     45e:	1c f0       	brlt	.+6      	; 0x466 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     460:	85 e4       	ldi	r24, 0x45	; 69
     462:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <motion_pin_config>:
unsigned int right_motor_pulse_count_locked = 0x00; // locked at serial comm isr
//-------------------------------------------------------------------------------

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;   //set direction of the PORTA 3 to PORTA 0 pins as output
     470:	81 b1       	in	r24, 0x01	; 1
     472:	8f 60       	ori	r24, 0x0F	; 15
     474:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     476:	82 b1       	in	r24, 0x02	; 2
     478:	80 7f       	andi	r24, 0xF0	; 240
     47a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     47c:	ea e0       	ldi	r30, 0x0A	; 10
     47e:	f1 e0       	ldi	r31, 0x01	; 1
     480:	80 81       	ld	r24, Z
     482:	88 61       	ori	r24, 0x18	; 24
     484:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     486:	eb e0       	ldi	r30, 0x0B	; 11
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	80 81       	ld	r24, Z
     48c:	88 61       	ori	r24, 0x18	; 24
     48e:	80 83       	st	Z, r24
}
     490:	08 95       	ret

00000492 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     492:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     494:	2d 9a       	sbi	0x05, 5	; 5
}
     496:	08 95       	ret

00000498 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     498:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     49a:	2e 9a       	sbi	0x05, 6	; 5
}
     49c:	08 95       	ret

0000049e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     49e:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     4a0:	2f 9a       	sbi	0x05, 7	; 5
}
     4a2:	08 95       	ret

000004a4 <spi_pin_config>:

void spi_pin_config (void)
{
 DDRB = DDRB | 0x07;
     4a4:	84 b1       	in	r24, 0x04	; 4
     4a6:	87 60       	ori	r24, 0x07	; 7
     4a8:	84 b9       	out	0x04, r24	; 4
 PORTB = PORTB | 0x07;
     4aa:	85 b1       	in	r24, 0x05	; 5
     4ac:	87 60       	ori	r24, 0x07	; 7
     4ae:	85 b9       	out	0x05, r24	; 5
}
     4b0:	08 95       	ret

000004b2 <lcd_port_config>:

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     4b2:	87 b1       	in	r24, 0x07	; 7
     4b4:	87 6f       	ori	r24, 0xF7	; 247
     4b6:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     4b8:	88 b1       	in	r24, 0x08	; 8
     4ba:	80 78       	andi	r24, 0x80	; 128
     4bc:	88 b9       	out	0x08, r24	; 8
}
     4be:	08 95       	ret

000004c0 <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     4c0:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     4c2:	43 98       	cbi	0x08, 3	; 8
}
     4c4:	08 95       	ret

000004c6 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     4c6:	6c 98       	cbi	0x0d, 4	; 13
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     4c8:	74 9a       	sbi	0x0e, 4	; 14
}
     4ca:	08 95       	ret

000004cc <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     4cc:	6d 98       	cbi	0x0d, 5	; 13
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     4ce:	75 9a       	sbi	0x0e, 5	; 14
}
     4d0:	08 95       	ret

000004d2 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;  //set PORTF direction as input
     4d2:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     4d4:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;  //set PORTK direction as input
     4d6:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     4da:	10 92 08 01 	sts	0x0108, r1
}
     4de:	08 95       	ret

000004e0 <pwm_port_config>:

void pwm_port_config (void)
{
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     4e0:	ea e0       	ldi	r30, 0x0A	; 10
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	80 81       	ld	r24, Z
     4e6:	88 61       	ori	r24, 0x18	; 24
     4e8:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     4ea:	eb e0       	ldi	r30, 0x0B	; 11
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	88 61       	ori	r24, 0x18	; 24
     4f2:	80 83       	st	Z, r24
}
     4f4:	08 95       	ret

000004f6 <port_init>:

//Port init for different modules
void port_init(void)
{
 motion_pin_config();
     4f6:	0e 94 38 02 	call	0x470	; 0x470 <motion_pin_config>
 servo1_pin_config();
     4fa:	0e 94 49 02 	call	0x492	; 0x492 <servo1_pin_config>
 servo2_pin_config();
     4fe:	0e 94 4c 02 	call	0x498	; 0x498 <servo2_pin_config>
 servo3_pin_config();
     502:	0e 94 4f 02 	call	0x49e	; 0x49e <servo3_pin_config>
 spi_pin_config();
     506:	0e 94 52 02 	call	0x4a4	; 0x4a4 <spi_pin_config>
 lcd_port_config();
     50a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_port_config>
 buzzer_pin_config();           
     50e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <buzzer_pin_config>
 left_encoder_pin_config();
     512:	0e 94 63 02 	call	0x4c6	; 0x4c6 <left_encoder_pin_config>
 right_encoder_pin_config();
     516:	0e 94 66 02 	call	0x4cc	; 0x4cc <right_encoder_pin_config>
 adc_pin_config();
     51a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <adc_pin_config>
 pwm_port_config();	 
     51e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <pwm_port_config>
}
     522:	08 95       	ret

00000524 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     524:	e1 e2       	ldi	r30, 0x21	; 33
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     536:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     53a:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     53e:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     542:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     546:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     54a:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     54e:	89 ea       	ldi	r24, 0xA9	; 169
     550:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     554:	8b e0       	ldi	r24, 0x0B	; 11
     556:	80 83       	st	Z, r24
}
     558:	08 95       	ret

0000055a <timer1_init>:
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// desired value: 40Hz
// actual value: 42.187Hz (5.2%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     55a:	e1 e8       	ldi	r30, 0x81	; 129
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //setup
     560:	8c ef       	ldi	r24, 0xFC	; 252
     562:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;
     578:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;
     57c:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x00;
     580:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = 0x00;
     584:	10 92 8c 00 	sts	0x008C, r1
 //ICR1H  = 0x03;
 //ICR1L  = 0xFF;
 TCCR1A = 0xA3;
     588:	83 ea       	ldi	r24, 0xA3	; 163
     58a:	80 93 80 00 	sts	0x0080, r24
 TCCR1C = 0x00;
     58e:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //start Timer
     592:	8c e0       	ldi	r24, 0x0C	; 12
     594:	80 83       	st	Z, r24
}
     596:	08 95       	ret

00000598 <uart2_init>:
// desired baud rate:115200
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     598:	e1 ed       	ldi	r30, 0xD1	; 209
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     59e:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2H = 0x00; //set baud rate hi
     5a8:	10 92 d5 00 	sts	0x00D5, r1
 UBRR2L = 0x07; //set baud rate lo
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	80 93 d4 00 	sts	0x00D4, r24
 UCSR2B = 0x98;
     5b2:	88 e9       	ldi	r24, 0x98	; 152
     5b4:	80 83       	st	Z, r24
}
     5b6:	08 95       	ret

000005b8 <spi_init>:

//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
 SPCR = 0x53; //setup SPI
     5b8:	83 e5       	ldi	r24, 0x53	; 83
     5ba:	8c bd       	out	0x2c, r24	; 44
 SPSR = 0x00; //setup SPI
     5bc:	1d bc       	out	0x2d, r1	; 45
 SPDR = 0x00;
     5be:	1e bc       	out	0x2e, r1	; 46
}
     5c0:	08 95       	ret

000005c2 <adc_init>:

//ADC initialize
// Conversion time: 56uS
void adc_init(void)
{
	ADCSRA = 0x00;
     5c2:	ea e7       	ldi	r30, 0x7A	; 122
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     5c8:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     5cc:	80 e2       	ldi	r24, 0x20	; 32
     5ce:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     5d2:	80 e8       	ldi	r24, 0x80	; 128
     5d4:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     5d6:	86 e8       	ldi	r24, 0x86	; 134
     5d8:	80 83       	st	Z, r24
}
     5da:	08 95       	ret

000005dc <left_position_encoder_interrupt_init>:

//-------------------------------------------------------------------------------
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 cli(); //Clears the global interrupt
     5dc:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     5de:	ea e6       	ldi	r30, 0x6A	; 106
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	82 60       	ori	r24, 0x02	; 2
     5e6:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     5e8:	ec 9a       	sbi	0x1d, 4	; 29
 sei();   // Enables the global interrupt 
     5ea:	78 94       	sei
}
     5ec:	08 95       	ret

000005ee <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 cli(); //Clears the global interrupt
     5ee:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     5f0:	ea e6       	ldi	r30, 0x6A	; 106
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	88 60       	ori	r24, 0x08	; 8
     5f8:	80 83       	st	Z, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     5fa:	ed 9a       	sbi	0x1d, 5	; 29
 sei();   // Enables the global interrupt 
     5fc:	78 94       	sei
}
     5fe:	08 95       	ret

00000600 <__vector_6>:
//-------------------------------------------------------------------------------
//ISR for right position encoder
//-------------------------------------------------------------------------------

ISR(INT5_vect)  
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
 right_motor_pulse_count++;
     60e:	80 91 06 02 	lds	r24, 0x0206
     612:	90 91 07 02 	lds	r25, 0x0207
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	90 93 07 02 	sts	0x0207, r25
     61c:	80 93 06 02 	sts	0x0206, r24
 //external interupt on INT5
}
     620:	9f 91       	pop	r25
     622:	8f 91       	pop	r24
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <__vector_5>:


//ISR for left position encoder

ISR(INT4_vect)   
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	8f 93       	push	r24
     63a:	9f 93       	push	r25
 left_motor_pulse_count++;
     63c:	80 91 0a 02 	lds	r24, 0x020A
     640:	90 91 0b 02 	lds	r25, 0x020B
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	90 93 0b 02 	sts	0x020B, r25
     64a:	80 93 0a 02 	sts	0x020A, r24
 //external interupt on INT4
}
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <ADC_Conversion>:
//-- ADC Conversion Function --------------
//-------------------------------------------------------------------------------
unsigned char ADC_Conversion(unsigned char ch)
{
unsigned char a;
 if(ch>7)
     65c:	88 30       	cpi	r24, 0x08	; 8
     65e:	18 f0       	brcs	.+6      	; 0x666 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     660:	98 e0       	ldi	r25, 0x08	; 8
     662:	90 93 7b 00 	sts	0x007B, r25
	}
 ch = ch & 0x07;			  //Store only 3 LSB bits
     666:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
     668:	80 62       	ori	r24, 0x20	; 32
     66a:	80 93 7c 00 	sts	0x007C, r24
 ADC_flag = 0x00; 			  //Clear the user defined flag
     66e:	10 92 16 02 	sts	0x0216, r1
 ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
     672:	ea e7       	ldi	r30, 0x7A	; 122
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	80 64       	ori	r24, 0x40	; 64
     67a:	80 83       	st	Z, r24
 while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
     67c:	80 81       	ld	r24, Z
     67e:	84 ff       	sbrs	r24, 4
     680:	fd cf       	rjmp	.-6      	; 0x67c <ADC_Conversion+0x20>
 a=ADCH;
     682:	80 91 79 00 	lds	r24, 0x0079
 ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     686:	ea e7       	ldi	r30, 0x7A	; 122
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	90 81       	ld	r25, Z
     68c:	90 61       	ori	r25, 0x10	; 16
     68e:	90 83       	st	Z, r25
 ADCSRB = 0x00;
     690:	10 92 7b 00 	sts	0x007B, r1
 return a;
}
     694:	08 95       	ret

00000696 <spi_master_tx_and_rx>:
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
 unsigned char rx_data = 0;

 PORTB = PORTB & 0xFE;        // make SS pin low
     696:	28 98       	cbi	0x05, 0	; 5
 SPDR = data;
     698:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
     69e:	fd cf       	rjmp	.-6      	; 0x69a <spi_master_tx_and_rx+0x4>
     6a0:	86 e6       	ldi	r24, 0x66	; 102
     6a2:	9e e0       	ldi	r25, 0x0E	; 14
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <spi_master_tx_and_rx+0xe>
     6a8:	00 00       	nop

 _delay_ms(1);                //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
     6aa:	80 e5       	ldi	r24, 0x50	; 80
     6ac:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <spi_master_tx_and_rx+0x18>
 rx_data = SPDR;
     6b4:	8e b5       	in	r24, 0x2e	; 46
 PORTB = PORTB | 0x01;        // make SS high
     6b6:	28 9a       	sbi	0x05, 0	; 5
 return rx_data;
}
     6b8:	08 95       	ret

000006ba <sensor_data_interpretation>:
//-------------------------------------------------------------------------------

void sensor_data_interpretation(void) //ld, fd, rd, light int
{
 
 WL_LEFT = ADC_Conversion(3);
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6c0:	80 93 17 02 	sts	0x0217, r24
  
 WL_CENTER = ADC_Conversion(2);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6ca:	80 93 1d 02 	sts	0x021D, r24
  
 WL_RIGHT = ADC_Conversion(1);
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6d4:	80 93 1c 02 	sts	0x021C, r24
 
 
 IR1 = ADC_Conversion(4); 
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6de:	80 93 2d 02 	sts	0x022D, r24
 
 IR2 = ADC_Conversion(5);
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6e8:	80 93 18 02 	sts	0x0218, r24
 
 IR3 = ADC_Conversion(6);
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6f2:	80 93 1f 02 	sts	0x021F, r24
  
 IR4 = ADC_Conversion(7);
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     6fc:	80 93 35 02 	sts	0x0235, r24

 IR5 = ADC_Conversion(8);
     700:	88 e0       	ldi	r24, 0x08	; 8
     702:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     706:	80 93 15 02 	sts	0x0215, r24
 
 IR6 = spi_master_tx_and_rx(5);  
     70a:	85 e0       	ldi	r24, 0x05	; 5
     70c:	0e 94 4b 03 	call	0x696	; 0x696 <spi_master_tx_and_rx>
     710:	80 93 44 02 	sts	0x0244, r24
 
 IR7 = spi_master_tx_and_rx (6); 
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	0e 94 4b 03 	call	0x696	; 0x696 <spi_master_tx_and_rx>
     71a:	80 93 38 02 	sts	0x0238, r24
 
 IR8 = spi_master_tx_and_rx (7);
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	0e 94 4b 03 	call	0x696	; 0x696 <spi_master_tx_and_rx>
     724:	80 93 26 02 	sts	0x0226, r24
 
 
 SHARP_1 = ADC_Conversion(9);
     728:	89 e0       	ldi	r24, 0x09	; 9
     72a:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     72e:	80 93 41 02 	sts	0x0241, r24
 //lcd_print(2,1,SHARP_1,3);
 
 SHARP_2 = ADC_Conversion(10);
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     738:	80 93 3c 02 	sts	0x023C, r24
 //lcd_print(2,5,SHARP_2,3);
 
 SHARP_3 = ADC_Conversion(11);
     73c:	8b e0       	ldi	r24, 0x0B	; 11
     73e:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     742:	80 93 14 02 	sts	0x0214, r24
 //lcd_print(1,13,SHARP_3,3);
 
 SHARP_4 = ADC_Conversion(12);
     746:	8c e0       	ldi	r24, 0x0C	; 12
     748:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     74c:	80 93 36 02 	sts	0x0236, r24
 //lcd_print(2,9,SHARP_4,3);
 
 SHARP_5 = ADC_Conversion(13);
     750:	8d e0       	ldi	r24, 0x0D	; 13
     752:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     756:	80 93 29 02 	sts	0x0229, r24
 
 BATT_VALUE = ADC_Conversion(0);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     760:	80 93 37 02 	sts	0x0237, r24
  
}
     764:	08 95       	ret

00000766 <motion_set>:
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
 ucPortARestore = PORTA;         // reading the PORTA original status
     766:	92 b1       	in	r25, 0x02	; 2
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
     768:	90 7f       	andi	r25, 0xF0	; 240
//-------------------------------------------------------------------------------
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
     76a:	8f 70       	andi	r24, 0x0F	; 15
 ucPortARestore = PORTA;         // reading the PORTA original status
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
 ucPortARestore |= ucDirection;  // adding lower nibbel for forward command and restoring the PORTA status
     76c:	98 2b       	or	r25, r24
 PORTA = ucPortARestore;         // executing the command
     76e:	92 b9       	out	0x02, r25	; 2
}
     770:	08 95       	ret

00000772 <forward>:

void forward(void) 
{ 
 motion_set(0x06);
     772:	86 e0       	ldi	r24, 0x06	; 6
     774:	0e 94 b3 03 	call	0x766	; 0x766 <motion_set>
}
     778:	08 95       	ret

0000077a <back>:

void back(void)  
{
  motion_set(0x09);  
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	0e 94 b3 03 	call	0x766	; 0x766 <motion_set>
}
     780:	08 95       	ret

00000782 <left>:

void left(void)  
{
  motion_set(0x05);
     782:	85 e0       	ldi	r24, 0x05	; 5
     784:	0e 94 b3 03 	call	0x766	; 0x766 <motion_set>
}
     788:	08 95       	ret

0000078a <right>:

void right(void)
{
  motion_set(0x0A);
     78a:	8a e0       	ldi	r24, 0x0A	; 10
     78c:	0e 94 b3 03 	call	0x766	; 0x766 <motion_set>
}
     790:	08 95       	ret

00000792 <stop>:

void stop(void)
{
  motion_set(0x00);
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 b3 03 	call	0x766	; 0x766 <motion_set>
}
     798:	08 95       	ret

0000079a <buzzer_on>:
void buzzer_on(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore |= 0x08; // setting the bit to turn on the buzzer
 PORTC = portc_restore; // executing the command
     79a:	43 9a       	sbi	0x08, 3	; 8
}
     79c:	08 95       	ret

0000079e <buzzer_off>:
void buzzer_off(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore &= 0xF7; // resetting the bit to turn off the buzzer
 PORTC = portc_restore; // executing the command
     79e:	43 98       	cbi	0x08, 3	; 8
}
     7a0:	08 95       	ret

000007a2 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7a2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     7a6:	60 93 2a 01 	sts	0x012A, r22
}
     7aa:	08 95       	ret

000007ac <init_devices>:
//-------------------------------------------------------------------------------
//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli();              //disable all interrupts
     7ac:	f8 94       	cli
 port_init();
     7ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <port_init>
 uart2_init();
     7b2:	0e 94 cc 02 	call	0x598	; 0x598 <uart2_init>
 adc_init();
     7b6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <adc_init>
 timer1_init();
     7ba:	0e 94 ad 02 	call	0x55a	; 0x55a <timer1_init>
 timer5_init();
     7be:	0e 94 92 02 	call	0x524	; 0x524 <timer5_init>
 lcd_set_4bit();
     7c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
 lcd_init();
     7c6:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
 spi_init();
     7ca:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spi_init>
 
 // below for lines are important for Encoder init
 left_position_encoder_interrupt_init();
     7ce:	0e 94 ee 02 	call	0x5dc	; 0x5dc <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     7d2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <right_position_encoder_interrupt_init>
 EICRB  = 0x0A;     //pin change int edge 4:7
     7d6:	8a e0       	ldi	r24, 0x0A	; 10
     7d8:	80 93 6a 00 	sts	0x006A, r24
 EIMSK  = 0x30;
     7dc:	80 e3       	ldi	r24, 0x30	; 48
     7de:	8d bb       	out	0x1d, r24	; 29

 sei();             //re-enable interrupts
     7e0:	78 94       	sei
 //all peripherals are now initialized
}
     7e2:	08 95       	ret

000007e4 <__vector_51>:

//-------------------------------------------------------------------------------
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	0b b6       	in	r0, 0x3b	; 59
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	1f 93       	push	r17
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ef 93       	push	r30
     80e:	ff 93       	push	r31
 unsigned char ser_data = 0x00;
 unsigned char ser_data_upper_nibbel = 0x00;
 unsigned char ser_data_lower_nibbel = 0x00;
 //uart has received a character in UDR2
 ser_data = UDR2;
     810:	d0 91 d6 00 	lds	r29, 0x00D6
 ser_data_upper_nibbel = ser_data & 0xF0;
     814:	cd 2f       	mov	r28, r29
     816:	c0 7f       	andi	r28, 0xF0	; 240
 ser_data_lower_nibbel = ser_data & 0x0F;
     818:	1d 2f       	mov	r17, r29
     81a:	1f 70       	andi	r17, 0x0F	; 15
 OCR5BL = right_motor_velocity;
 //right_motor_pwm_feedback = right_motor_velocity;
 }*/
  
  
  if(flag == 1)
     81c:	80 91 10 02 	lds	r24, 0x0210
     820:	90 91 11 02 	lds	r25, 0x0211
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	91 05       	cpc	r25, r1
     828:	19 f5       	brne	.+70     	; 0x870 <__vector_51+0x8c>
  {
	temp1 = ser_data;
     82a:	d0 93 2a 02 	sts	0x022A, r29
	ser_data = 0x52;
	if(count == 1)
     82e:	80 91 01 02 	lds	r24, 0x0201
     832:	90 91 02 02 	lds	r25, 0x0202
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	91 05       	cpc	r25, r1
     83a:	49 f4       	brne	.+18     	; 0x84e <__vector_51+0x6a>
	{
		v1 = temp1;
     83c:	d0 93 1b 02 	sts	0x021B, r29
		count++;
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 02 02 	sts	0x0202, r25
     848:	80 93 01 02 	sts	0x0201, r24
     84c:	35 c1       	rjmp	.+618    	; 0xab8 <__vector_51+0x2d4>
	}
	else if(count == 2)
     84e:	82 30       	cpi	r24, 0x02	; 2
     850:	91 05       	cpc	r25, r1
     852:	09 f0       	breq	.+2      	; 0x856 <__vector_51+0x72>
     854:	31 c1       	rjmp	.+610    	; 0xab8 <__vector_51+0x2d4>
	{
		v2 = temp1;
     856:	d0 93 34 02 	sts	0x0234, r29
		flag = 0;
     85a:	10 92 11 02 	sts	0x0211, r1
     85e:	10 92 10 02 	sts	0x0210, r1
		i1 = 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 13 02 	sts	0x0213, r25
     86a:	80 93 12 02 	sts	0x0212, r24
     86e:	24 c1       	rjmp	.+584    	; 0xab8 <__vector_51+0x2d4>
	}
	
	  
  }   
 if (ser_data == 0x38) // ASCII value of 8
     870:	d8 33       	cpi	r29, 0x38	; 56
     872:	19 f4       	brne	.+6      	; 0x87a <__vector_51+0x96>
 {
  forward(); 
     874:	0e 94 b9 03 	call	0x772	; 0x772 <forward>
     878:	0a c0       	rjmp	.+20     	; 0x88e <__vector_51+0xaa>
 }
 
 if (ser_data == 0x32) // ASCII value of 2
     87a:	d2 33       	cpi	r29, 0x32	; 50
     87c:	19 f4       	brne	.+6      	; 0x884 <__vector_51+0xa0>
 {
  back();
     87e:	0e 94 bd 03 	call	0x77a	; 0x77a <back>
     882:	0a c0       	rjmp	.+20     	; 0x898 <__vector_51+0xb4>
 }
 
 if (ser_data == 0x34) // ASCII value of 4
     884:	d4 33       	cpi	r29, 0x34	; 52
     886:	19 f4       	brne	.+6      	; 0x88e <__vector_51+0xaa>
 {
  right();
     888:	0e 94 c5 03 	call	0x78a	; 0x78a <right>
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <__vector_51+0xbe>
 }
 
 if (ser_data == 0x36) // ASCII value of 6
     88e:	d6 33       	cpi	r29, 0x36	; 54
     890:	19 f4       	brne	.+6      	; 0x898 <__vector_51+0xb4>
 {
  left();
     892:	0e 94 c1 03 	call	0x782	; 0x782 <left>
     896:	12 c0       	rjmp	.+36     	; 0x8bc <__vector_51+0xd8>
 }
 
 if (ser_data == 0x35) // ASCII value of 5
     898:	d5 33       	cpi	r29, 0x35	; 53
     89a:	19 f4       	brne	.+6      	; 0x8a2 <__vector_51+0xbe>
 {
  stop();
     89c:	0e 94 c9 03 	call	0x792	; 0x792 <stop>
     8a0:	14 c0       	rjmp	.+40     	; 0x8ca <__vector_51+0xe6>
 }

//_______________________Shaft encoder data__________________________

 if(ser_data == 0x72) //Lower_byte number of pulse counted
     8a2:	d2 37       	cpi	r29, 0x72	; 114
     8a4:	59 f4       	brne	.+22     	; 0x8bc <__vector_51+0xd8>
 {
  left_motor_pulse_count_locked = left_motor_pulse_count;
     8a6:	80 91 0a 02 	lds	r24, 0x020A
     8aa:	90 91 0b 02 	lds	r25, 0x020B
     8ae:	80 93 08 02 	sts	0x0208, r24
     8b2:	90 93 09 02 	sts	0x0209, r25
  UDR2 = left_motor_pulse_count_locked % 256;
     8b6:	80 93 d6 00 	sts	0x00D6, r24
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <__vector_51+0x100>
 }
 
 if(ser_data == 0x73) //Upper_byte number of pulse counted
     8bc:	d3 37       	cpi	r29, 0x73	; 115
     8be:	29 f4       	brne	.+10     	; 0x8ca <__vector_51+0xe6>
 {
  UDR2 = left_motor_pulse_count_locked / 256;
     8c0:	80 91 09 02 	lds	r24, 0x0209
     8c4:	80 93 d6 00 	sts	0x00D6, r24
     8c8:	13 c0       	rjmp	.+38     	; 0x8f0 <__vector_51+0x10c>
 }

 if(ser_data == 0x79) //Lower_byte number of pulse counted
     8ca:	d9 37       	cpi	r29, 0x79	; 121
     8cc:	59 f4       	brne	.+22     	; 0x8e4 <__vector_51+0x100>
 {
  right_motor_pulse_count_locked = right_motor_pulse_count;
     8ce:	80 91 06 02 	lds	r24, 0x0206
     8d2:	90 91 07 02 	lds	r25, 0x0207
     8d6:	80 93 04 02 	sts	0x0204, r24
     8da:	90 93 05 02 	sts	0x0205, r25
  UDR2 = right_motor_pulse_count_locked % 256;
     8de:	80 93 d6 00 	sts	0x00D6, r24
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <__vector_51+0x10c>
 }
 
 if(ser_data == 0x7A) //Upper_byte number of pulse counted
     8e4:	da 37       	cpi	r29, 0x7A	; 122
     8e6:	21 f4       	brne	.+8      	; 0x8f0 <__vector_51+0x10c>
 {
  UDR2 = right_motor_pulse_count_locked / 256;
     8e8:	80 91 05 02 	lds	r24, 0x0205
     8ec:	80 93 d6 00 	sts	0x00D6, r24
 }
   
//_______________________Servo motors position commands________________
 if (ser_data_upper_nibbel == 0x80)
     8f0:	c0 38       	cpi	r28, 0x80	; 128
     8f2:	19 f4       	brne	.+6      	; 0x8fa <__vector_51+0x116>
 {
  horz_servo_pos = ser_data_lower_nibbel;
     8f4:	10 93 0d 02 	sts	0x020D, r17
     8f8:	21 c0       	rjmp	.+66     	; 0x93c <__vector_51+0x158>
 }
 
 if (ser_data_upper_nibbel == 0x90)
     8fa:	c0 39       	cpi	r28, 0x90	; 144
     8fc:	d1 f4       	brne	.+52     	; 0x932 <__vector_51+0x14e>
 {
  horz_servo_pos = ((ser_data_lower_nibbel * 16) + horz_servo_pos);
     8fe:	91 2f       	mov	r25, r17
     900:	92 95       	swap	r25
     902:	90 7f       	andi	r25, 0xF0	; 240
     904:	80 91 0d 02 	lds	r24, 0x020D
     908:	89 0f       	add	r24, r25
     90a:	80 93 0d 02 	sts	0x020D, r24
  
  if(horz_servo_pos > 0x65)
     90e:	86 36       	cpi	r24, 0x66	; 102
     910:	20 f0       	brcs	.+8      	; 0x91a <__vector_51+0x136>
  {
  
  horz_servo_pos = 0x65;
     912:	85 e6       	ldi	r24, 0x65	; 101
     914:	80 93 0d 02 	sts	0x020D, r24
     918:	05 c0       	rjmp	.+10     	; 0x924 <__vector_51+0x140>
  }
 
  if(horz_servo_pos < 0x15)
     91a:	85 31       	cpi	r24, 0x15	; 21
     91c:	18 f4       	brcc	.+6      	; 0x924 <__vector_51+0x140>
  {
   horz_servo_pos = 0x15;
     91e:	85 e1       	ldi	r24, 0x15	; 21
     920:	80 93 0d 02 	sts	0x020D, r24
  }
 
  OCR1AH = 0x00;
     924:	10 92 89 00 	sts	0x0089, r1
  OCR1AL = horz_servo_pos;
     928:	80 91 0d 02 	lds	r24, 0x020D
     92c:	80 93 88 00 	sts	0x0088, r24
     930:	05 c0       	rjmp	.+10     	; 0x93c <__vector_51+0x158>
 }
 
 if (ser_data_upper_nibbel == 0xA0)
     932:	c0 3a       	cpi	r28, 0xA0	; 160
     934:	19 f4       	brne	.+6      	; 0x93c <__vector_51+0x158>
  {
   vert_servo_pos = ser_data_lower_nibbel;
     936:	10 93 0c 02 	sts	0x020C, r17
     93a:	1a c0       	rjmp	.+52     	; 0x970 <__vector_51+0x18c>
  }
 
  if (ser_data_upper_nibbel == 0xB0)
     93c:	c0 3b       	cpi	r28, 0xB0	; 176
     93e:	c1 f4       	brne	.+48     	; 0x970 <__vector_51+0x18c>
  {
   vert_servo_pos = ((ser_data_lower_nibbel * 16) + vert_servo_pos);
     940:	12 95       	swap	r17
     942:	10 7f       	andi	r17, 0xF0	; 240
     944:	80 91 0c 02 	lds	r24, 0x020C
     948:	18 0f       	add	r17, r24
     94a:	10 93 0c 02 	sts	0x020C, r17
 
   if(vert_servo_pos > 0x65)
     94e:	16 36       	cpi	r17, 0x66	; 102
     950:	20 f0       	brcs	.+8      	; 0x95a <__vector_51+0x176>
   {
    vert_servo_pos = 0x65;
     952:	85 e6       	ldi	r24, 0x65	; 101
     954:	80 93 0c 02 	sts	0x020C, r24
     958:	05 c0       	rjmp	.+10     	; 0x964 <__vector_51+0x180>
   }
 
   if(vert_servo_pos < 0x15)
     95a:	15 31       	cpi	r17, 0x15	; 21
     95c:	18 f4       	brcc	.+6      	; 0x964 <__vector_51+0x180>
   {
    vert_servo_pos = 0x15;
     95e:	85 e1       	ldi	r24, 0x15	; 21
     960:	80 93 0c 02 	sts	0x020C, r24
   }
   OCR1BH = 0x00;
     964:	10 92 8b 00 	sts	0x008B, r1
   OCR1BL = vert_servo_pos;
     968:	80 91 0c 02 	lds	r24, 0x020C
     96c:	80 93 8a 00 	sts	0x008A, r24
  }
 
//________________ IR PROXIMITY STATUS COMMANDS _____________________
 if (ser_data == 0x44)       // ASCII value of D
     970:	d4 34       	cpi	r29, 0x44	; 68
     972:	29 f4       	brne	.+10     	; 0x97e <__vector_51+0x19a>
 {
  UDR2 = IR1;
     974:	80 91 2d 02 	lds	r24, 0x022D
     978:	80 93 d6 00 	sts	0x00D6, r24
     97c:	0e c0       	rjmp	.+28     	; 0x99a <__vector_51+0x1b6>
 }
 
 if (ser_data == 0x45)   // ASCII value of E
     97e:	d5 34       	cpi	r29, 0x45	; 69
     980:	29 f4       	brne	.+10     	; 0x98c <__vector_51+0x1a8>
 {
  UDR2 = IR2;
     982:	80 91 18 02 	lds	r24, 0x0218
     986:	80 93 d6 00 	sts	0x00D6, r24
     98a:	0e c0       	rjmp	.+28     	; 0x9a8 <__vector_51+0x1c4>
 }
 
 if (ser_data == 0x46)  // ASCII value of F
     98c:	d6 34       	cpi	r29, 0x46	; 70
     98e:	29 f4       	brne	.+10     	; 0x99a <__vector_51+0x1b6>
 {
  UDR2 = IR3;
     990:	80 91 1f 02 	lds	r24, 0x021F
     994:	80 93 d6 00 	sts	0x00D6, r24
     998:	0e c0       	rjmp	.+28     	; 0x9b6 <__vector_51+0x1d2>
 }
 
 if (ser_data == 0x47) // ASCII value of G
     99a:	d7 34       	cpi	r29, 0x47	; 71
     99c:	29 f4       	brne	.+10     	; 0x9a8 <__vector_51+0x1c4>
 {
  UDR2 = IR4;
     99e:	80 91 35 02 	lds	r24, 0x0235
     9a2:	80 93 d6 00 	sts	0x00D6, r24
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <__vector_51+0x1e0>
 }
 
 if (ser_data == 0x48) // ASCII value of H
     9a8:	d8 34       	cpi	r29, 0x48	; 72
     9aa:	29 f4       	brne	.+10     	; 0x9b6 <__vector_51+0x1d2>
 {
  UDR2 = IR5;
     9ac:	80 91 15 02 	lds	r24, 0x0215
     9b0:	80 93 d6 00 	sts	0x00D6, r24
     9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <__vector_51+0x1ee>
 }
 
 if (ser_data == 0x49)  // ASCII value of I
     9b6:	d9 34       	cpi	r29, 0x49	; 73
     9b8:	29 f4       	brne	.+10     	; 0x9c4 <__vector_51+0x1e0>
 {
  UDR2 = IR6;
     9ba:	80 91 44 02 	lds	r24, 0x0244
     9be:	80 93 d6 00 	sts	0x00D6, r24
     9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <__vector_51+0x1fc>
 }
 
 if (ser_data == 0x4A)  // ASCII value of J
     9c4:	da 34       	cpi	r29, 0x4A	; 74
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <__vector_51+0x1ee>
 {
  UDR2 = IR7;
     9c8:	80 91 38 02 	lds	r24, 0x0238
     9cc:	80 93 d6 00 	sts	0x00D6, r24
     9d0:	0e c0       	rjmp	.+28     	; 0x9ee <__vector_51+0x20a>
 }
 
 if (ser_data == 0x4B)     // ASCII value of K
     9d2:	db 34       	cpi	r29, 0x4B	; 75
     9d4:	29 f4       	brne	.+10     	; 0x9e0 <__vector_51+0x1fc>
 {
  UDR2 = IR8;
     9d6:	80 91 26 02 	lds	r24, 0x0226
     9da:	80 93 d6 00 	sts	0x00D6, r24
     9de:	0e c0       	rjmp	.+28     	; 0x9fc <__vector_51+0x218>
 }

//________ BATT VALUE + WHITE LINE SENSORS + SHARP SENSORS _________
 
 if (ser_data == 0x51)  // ASCII value of Q
     9e0:	d1 35       	cpi	r29, 0x51	; 81
     9e2:	29 f4       	brne	.+10     	; 0x9ee <__vector_51+0x20a>
 {
   UDR2 = BATT_VALUE;
     9e4:	80 91 37 02 	lds	r24, 0x0237
     9e8:	80 93 d6 00 	sts	0x00D6, r24
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <__vector_51+0x226>
 } 
 
 if (ser_data == 0x4E) // ASCII value of N
     9ee:	de 34       	cpi	r29, 0x4E	; 78
     9f0:	29 f4       	brne	.+10     	; 0x9fc <__vector_51+0x218>
 {
  UDR2 = SHARP_3;
     9f2:	80 91 14 02 	lds	r24, 0x0214
     9f6:	80 93 d6 00 	sts	0x00D6, r24
     9fa:	0e c0       	rjmp	.+28     	; 0xa18 <__vector_51+0x234>
 } 
 
 if (ser_data == 0x4D)  // ASCII value of M
     9fc:	dd 34       	cpi	r29, 0x4D	; 77
     9fe:	29 f4       	brne	.+10     	; 0xa0a <__vector_51+0x226>
 {
  UDR2 = SHARP_2;
     a00:	80 91 3c 02 	lds	r24, 0x023C
     a04:	80 93 d6 00 	sts	0x00D6, r24
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <__vector_51+0x242>
 } 
 
 if (ser_data == 0x43) // ASCII value of C
     a0a:	d3 34       	cpi	r29, 0x43	; 67
     a0c:	29 f4       	brne	.+10     	; 0xa18 <__vector_51+0x234>
 {
  UDR2 = WL_LEFT;
     a0e:	80 91 17 02 	lds	r24, 0x0217
     a12:	80 93 d6 00 	sts	0x00D6, r24
     a16:	0e c0       	rjmp	.+28     	; 0xa34 <__vector_51+0x250>
 }  
 
 if (ser_data == 0x42) // ASCII value of B
     a18:	d2 34       	cpi	r29, 0x42	; 66
     a1a:	29 f4       	brne	.+10     	; 0xa26 <__vector_51+0x242>
 {
  UDR2 = WL_CENTER;
     a1c:	80 91 1d 02 	lds	r24, 0x021D
     a20:	80 93 d6 00 	sts	0x00D6, r24
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <__vector_51+0x25e>
 }  
 
 if (ser_data == 0x41)  // ASCII value of A
     a26:	d1 34       	cpi	r29, 0x41	; 65
     a28:	29 f4       	brne	.+10     	; 0xa34 <__vector_51+0x250>
 {
  UDR2 = WL_RIGHT;
     a2a:	80 91 1c 02 	lds	r24, 0x021C
     a2e:	80 93 d6 00 	sts	0x00D6, r24
     a32:	0e c0       	rjmp	.+28     	; 0xa50 <__vector_51+0x26c>
 }  
 
 if (ser_data == 0x4F)  // ASCII value of O
     a34:	df 34       	cpi	r29, 0x4F	; 79
     a36:	29 f4       	brne	.+10     	; 0xa42 <__vector_51+0x25e>
 {
  UDR2 = SHARP_4;
     a38:	80 91 36 02 	lds	r24, 0x0236
     a3c:	80 93 d6 00 	sts	0x00D6, r24
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <__vector_51+0x27a>
 }
 
 if (ser_data == 0x4C)         //  ASCII value of L
     a42:	dc 34       	cpi	r29, 0x4C	; 76
     a44:	29 f4       	brne	.+10     	; 0xa50 <__vector_51+0x26c>
 {
  UDR2 = SHARP_1;
     a46:	80 91 41 02 	lds	r24, 0x0241
     a4a:	80 93 d6 00 	sts	0x00D6, r24
     a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__vector_51+0x288>
 }
 
 if (ser_data == 0x50)		   //  ASCII value of P
     a50:	d0 35       	cpi	r29, 0x50	; 80
     a52:	29 f4       	brne	.+10     	; 0xa5e <__vector_51+0x27a>
 {
  UDR2 = SHARP_5;
     a54:	80 91 29 02 	lds	r24, 0x0229
     a58:	80 93 d6 00 	sts	0x00D6, r24
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <__vector_51+0x292>
 }
  
//______________________Identity tag ____________________________
 if (ser_data == 0x6B)
     a5e:	db 36       	cpi	r29, 0x6B	; 107
     a60:	29 f4       	brne	.+10     	; 0xa6c <__vector_51+0x288>
 {
  UDR2 = robot_id;
     a62:	80 91 00 02 	lds	r24, 0x0200
     a66:	80 93 d6 00 	sts	0x00D6, r24
     a6a:	0a c0       	rjmp	.+20     	; 0xa80 <__vector_51+0x29c>
 }

//________________  Buzzer _______________________________________
 if (ser_data == 0x37) // ASCII value of 7
     a6c:	d7 33       	cpi	r29, 0x37	; 55
     a6e:	19 f4       	brne	.+6      	; 0xa76 <__vector_51+0x292>
 {
  buzzer_on();
     a70:	0e 94 cd 03 	call	0x79a	; 0x79a <buzzer_on>
     a74:	23 c0       	rjmp	.+70     	; 0xabc <__vector_51+0x2d8>
 }
 
 if (ser_data == 0x39) // ASCII value of 9
     a76:	d9 33       	cpi	r29, 0x39	; 57
     a78:	19 f4       	brne	.+6      	; 0xa80 <__vector_51+0x29c>
 {
  buzzer_off();
     a7a:	0e 94 cf 03 	call	0x79e	; 0x79e <buzzer_off>
     a7e:	1e c0       	rjmp	.+60     	; 0xabc <__vector_51+0x2d8>
 }



//_______________________ Velocity _______________________________
if(ser_data == 0x52)
     a80:	d2 35       	cpi	r29, 0x52	; 82
     a82:	e1 f4       	brne	.+56     	; 0xabc <__vector_51+0x2d8>
{
	flag = 1;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	90 93 11 02 	sts	0x0211, r25
     a8c:	80 93 10 02 	sts	0x0210, r24
	if(i1 ==1)
     a90:	80 91 12 02 	lds	r24, 0x0212
     a94:	90 91 13 02 	lds	r25, 0x0213
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	91 05       	cpc	r25, r1
     a9c:	79 f4       	brne	.+30     	; 0xabc <__vector_51+0x2d8>
	{
		velocity(v1,v2);
     a9e:	80 91 1b 02 	lds	r24, 0x021B
     aa2:	60 91 34 02 	lds	r22, 0x0234
     aa6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <velocity>
		forward();
     aaa:	0e 94 b9 03 	call	0x772	; 0x772 <forward>
		i1 = 0;
     aae:	10 92 13 02 	sts	0x0213, r1
     ab2:	10 92 12 02 	sts	0x0212, r1
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <__vector_51+0x2d8>
 //all peripherals are now initialized
}

//-------------------------------------------------------------------------------
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     ab8:	d2 e5       	ldi	r29, 0x52	; 82
     aba:	e4 ce       	rjmp	.-568    	; 0x884 <__vector_51+0xa0>
		velocity(v1,v2);
		forward();
		i1 = 0;
	}
}
 }
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	1f 91       	pop	r17
     ada:	0f 90       	pop	r0
     adc:	0b be       	out	0x3b, r0	; 59
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <print_sensor>:
// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location.
void print_sensor(char row, char coloumn,unsigned char channel)
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	d8 2f       	mov	r29, r24
     aee:	c6 2f       	mov	r28, r22
     af0:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
     af2:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     af6:	48 2f       	mov	r20, r24
     af8:	80 93 28 02 	sts	0x0228, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     afc:	8d 2f       	mov	r24, r29
     afe:	6c 2f       	mov	r22, r28
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	23 e0       	ldi	r18, 0x03	; 3
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     b14:	68 2f       	mov	r22, r24
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatunsisf>
     b20:	2f ee       	ldi	r18, 0xEF	; 239
     b22:	39 ec       	ldi	r19, 0xC9	; 201
     b24:	43 e9       	ldi	r20, 0x93	; 147
     b26:	5f e3       	ldi	r21, 0x3F	; 63
     b28:	0e 94 3f 08 	call	0x107e	; 0x107e <pow>
     b2c:	b6 2f       	mov	r27, r22
     b2e:	a7 2f       	mov	r26, r23
     b30:	38 2f       	mov	r19, r24
     b32:	29 2f       	mov	r18, r25
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	9f e3       	ldi	r25, 0x3F	; 63
     b3c:	42 2f       	mov	r20, r18
     b3e:	0b 2f       	mov	r16, r27
     b40:	1a 2f       	mov	r17, r26
     b42:	23 2f       	mov	r18, r19
     b44:	34 2f       	mov	r19, r20
     b46:	a9 01       	movw	r20, r18
     b48:	98 01       	movw	r18, r16
     b4a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divsf3>
     b4e:	2a e9       	ldi	r18, 0x9A	; 154
     b50:	39 ef       	ldi	r19, 0xF9	; 249
     b52:	4e e2       	ldi	r20, 0x2E	; 46
     b54:	55 e4       	ldi	r21, 0x45	; 69
     b56:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     b66:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixsfsi>
     b6a:	88 27       	eor	r24, r24
     b6c:	77 fd       	sbrc	r23, 7
     b6e:	80 95       	com	r24
     b70:	98 2f       	mov	r25, r24
     b72:	0e 94 50 07 	call	0xea0	; 0xea0 <__floatsisf>
	distanceInt = (int)distance;
     b76:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     b7a:	86 2f       	mov	r24, r22
     b7c:	97 2f       	mov	r25, r23
     b7e:	23 e0       	ldi	r18, 0x03	; 3
     b80:	81 32       	cpi	r24, 0x21	; 33
     b82:	92 07       	cpc	r25, r18
     b84:	10 f0       	brcs	.+4      	; 0xb8a <Sharp_GP2D12_estimation+0x7a>
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	93 e0       	ldi	r25, 0x03	; 3
}
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <main>:
//-------------------------------------------------------------------------------
//Main Function
//-------------------------------------------------------------------------------
int main(void)
{
	init_devices();
     b90:	0e 94 d6 03 	call	0x7ac	; 0x7ac <init_devices>
	while(1)
	{
		sensor_data_interpretation();
		//print_sensor(1,1,1);				//Prints IR Proximity Sensor 1
		BATT_V = ADC_Conversion(0);
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
     b94:	c4 e6       	ldi	r28, 0x64	; 100
     b96:	d0 e0       	ldi	r29, 0x00	; 0
	init_devices();


	while(1)
	{
		sensor_data_interpretation();
     b98:	0e 94 5d 03 	call	0x6ba	; 0x6ba <sensor_data_interpretation>
		//print_sensor(1,1,1);				//Prints IR Proximity Sensor 1
		BATT_V = ADC_Conversion(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     ba2:	68 2f       	mov	r22, r24
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__floatunsisf>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	80 93 20 02 	sts	0x0220, r24
     bb6:	90 93 21 02 	sts	0x0221, r25
     bba:	a0 93 22 02 	sts	0x0222, r26
     bbe:	b0 93 23 02 	sts	0x0223, r27
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	8c 9f       	mul	r24, r28
     bcc:	b0 01       	movw	r22, r0
     bce:	8d 9f       	mul	r24, r29
     bd0:	70 0d       	add	r23, r0
     bd2:	9c 9f       	mul	r25, r28
     bd4:	70 0d       	add	r23, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	88 27       	eor	r24, r24
     bda:	77 fd       	sbrc	r23, 7
     bdc:	80 95       	com	r24
     bde:	98 2f       	mov	r25, r24
     be0:	0e 94 50 07 	call	0xea0	; 0xea0 <__floatsisf>
     be4:	2d e3       	ldi	r18, 0x3D	; 61
     be6:	35 ed       	ldi	r19, 0xD5	; 213
     be8:	41 ea       	ldi	r20, 0xA1	; 161
     bea:	5d e3       	ldi	r21, 0x3D	; 61
     bec:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__mulsf3>
     bf0:	23 e3       	ldi	r18, 0x33	; 51
     bf2:	33 e3       	ldi	r19, 0x33	; 51
     bf4:	43 e3       	ldi	r20, 0x33	; 51
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 51 06 	call	0xca2	; 0xca2 <__addsf3>
     bfc:	26 2f       	mov	r18, r22
     bfe:	37 2f       	mov	r19, r23
     c00:	f8 2f       	mov	r31, r24
     c02:	e9 2f       	mov	r30, r25
     c04:	46 2f       	mov	r20, r22
     c06:	57 2f       	mov	r21, r23
     c08:	68 2f       	mov	r22, r24
     c0a:	79 2f       	mov	r23, r25
     c0c:	40 93 2e 02 	sts	0x022E, r20
     c10:	50 93 2f 02 	sts	0x022F, r21
     c14:	60 93 30 02 	sts	0x0230, r22
     c18:	70 93 31 02 	sts	0x0231, r23
		lcd_print(1,1,BATT_Voltage,4);
     c1c:	82 2f       	mov	r24, r18
     c1e:	93 2f       	mov	r25, r19
     c20:	af 2f       	mov	r26, r31
     c22:	be 2f       	mov	r27, r30
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 22 07 	call	0xe44	; 0xe44 <__fixunssfsi>
     c2c:	8b 01       	movw	r16, r22
     c2e:	9c 01       	movw	r18, r24
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	a8 01       	movw	r20, r16
     c36:	24 e0       	ldi	r18, 0x04	; 4
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>

		//print_sensor(1,1,0);							//Prints Battery voltage binary value

		print_sensor(1,6,5);							//Prints IR Proximity Sensor 1
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	66 e0       	ldi	r22, 0x06	; 6
     c42:	45 e0       	ldi	r20, 0x05	; 5
     c44:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>
		print_sensor(1,10,6);							//Prints vlaue of Analog IR Proximity Sensor 2
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	6a e0       	ldi	r22, 0x0A	; 10
     c4c:	46 e0       	ldi	r20, 0x06	; 6
     c4e:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>
		print_sensor(1,14,7);							//Prints value of Analog IR Proximity Sensor 3
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	6e e0       	ldi	r22, 0x0E	; 14
     c56:	47 e0       	ldi	r20, 0x07	; 7
     c58:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>
		print_sensor(2,2,3);							//Prints value of White Line Sensor1
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	43 e0       	ldi	r20, 0x03	; 3
     c62:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>
		print_sensor(2,6,2);							//Prints Value of White Line Sensor2
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	66 e0       	ldi	r22, 0x06	; 6
     c6a:	42 e0       	ldi	r20, 0x02	; 2
     c6c:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>
		print_sensor(2,10,1);							//Prints Value of White Line Sensor3
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	6a e0       	ldi	r22, 0x0A	; 10
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 74 05 	call	0xae8	; 0xae8 <print_sensor>

		//print_sensor(2,9,11); 						//Analog Value Of Front Sharp Sensor

		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     c7a:	8b e0       	ldi	r24, 0x0B	; 11
     c7c:	0e 94 2e 03 	call	0x65c	; 0x65c <ADC_Conversion>
     c80:	80 93 3b 02 	sts	0x023B, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
     c84:	0e 94 88 05 	call	0xb10	; 0xb10 <Sharp_GP2D12_estimation>
     c88:	ac 01       	movw	r20, r24
     c8a:	90 93 43 02 	sts	0x0243, r25
     c8e:	80 93 42 02 	sts	0x0242, r24
		lcd_print(2,14,value,3);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	6e e0       	ldi	r22, 0x0E	; 14
     c96:	23 e0       	ldi	r18, 0x03	; 3
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
     c9e:	7c cf       	rjmp	.-264    	; 0xb98 <main+0x8>

00000ca0 <__subsf3>:
     ca0:	50 58       	subi	r21, 0x80	; 128

00000ca2 <__addsf3>:
     ca2:	bb 27       	eor	r27, r27
     ca4:	aa 27       	eor	r26, r26
     ca6:	0e d0       	rcall	.+28     	; 0xcc4 <__addsf3x>
     ca8:	4d c1       	rjmp	.+666    	; 0xf44 <__fp_round>
     caa:	3e d1       	rcall	.+636    	; 0xf28 <__fp_pscA>
     cac:	30 f0       	brcs	.+12     	; 0xcba <__addsf3+0x18>
     cae:	43 d1       	rcall	.+646    	; 0xf36 <__fp_pscB>
     cb0:	20 f0       	brcs	.+8      	; 0xcba <__addsf3+0x18>
     cb2:	31 f4       	brne	.+12     	; 0xcc0 <__addsf3+0x1e>
     cb4:	9f 3f       	cpi	r25, 0xFF	; 255
     cb6:	11 f4       	brne	.+4      	; 0xcbc <__addsf3+0x1a>
     cb8:	1e f4       	brtc	.+6      	; 0xcc0 <__addsf3+0x1e>
     cba:	33 c1       	rjmp	.+614    	; 0xf22 <__fp_nan>
     cbc:	0e f4       	brtc	.+2      	; 0xcc0 <__addsf3+0x1e>
     cbe:	e0 95       	com	r30
     cc0:	e7 fb       	bst	r30, 7
     cc2:	29 c1       	rjmp	.+594    	; 0xf16 <__fp_inf>

00000cc4 <__addsf3x>:
     cc4:	e9 2f       	mov	r30, r25
     cc6:	4f d1       	rcall	.+670    	; 0xf66 <__fp_split3>
     cc8:	80 f3       	brcs	.-32     	; 0xcaa <__addsf3+0x8>
     cca:	ba 17       	cp	r27, r26
     ccc:	62 07       	cpc	r22, r18
     cce:	73 07       	cpc	r23, r19
     cd0:	84 07       	cpc	r24, r20
     cd2:	95 07       	cpc	r25, r21
     cd4:	18 f0       	brcs	.+6      	; 0xcdc <__addsf3x+0x18>
     cd6:	71 f4       	brne	.+28     	; 0xcf4 <__addsf3x+0x30>
     cd8:	9e f5       	brtc	.+102    	; 0xd40 <__addsf3x+0x7c>
     cda:	67 c1       	rjmp	.+718    	; 0xfaa <__fp_zero>
     cdc:	0e f4       	brtc	.+2      	; 0xce0 <__addsf3x+0x1c>
     cde:	e0 95       	com	r30
     ce0:	0b 2e       	mov	r0, r27
     ce2:	ba 2f       	mov	r27, r26
     ce4:	a0 2d       	mov	r26, r0
     ce6:	0b 01       	movw	r0, r22
     ce8:	b9 01       	movw	r22, r18
     cea:	90 01       	movw	r18, r0
     cec:	0c 01       	movw	r0, r24
     cee:	ca 01       	movw	r24, r20
     cf0:	a0 01       	movw	r20, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	ff 27       	eor	r31, r31
     cf6:	59 1b       	sub	r21, r25
     cf8:	99 f0       	breq	.+38     	; 0xd20 <__addsf3x+0x5c>
     cfa:	59 3f       	cpi	r21, 0xF9	; 249
     cfc:	50 f4       	brcc	.+20     	; 0xd12 <__addsf3x+0x4e>
     cfe:	50 3e       	cpi	r21, 0xE0	; 224
     d00:	68 f1       	brcs	.+90     	; 0xd5c <__addsf3x+0x98>
     d02:	1a 16       	cp	r1, r26
     d04:	f0 40       	sbci	r31, 0x00	; 0
     d06:	a2 2f       	mov	r26, r18
     d08:	23 2f       	mov	r18, r19
     d0a:	34 2f       	mov	r19, r20
     d0c:	44 27       	eor	r20, r20
     d0e:	58 5f       	subi	r21, 0xF8	; 248
     d10:	f3 cf       	rjmp	.-26     	; 0xcf8 <__addsf3x+0x34>
     d12:	46 95       	lsr	r20
     d14:	37 95       	ror	r19
     d16:	27 95       	ror	r18
     d18:	a7 95       	ror	r26
     d1a:	f0 40       	sbci	r31, 0x00	; 0
     d1c:	53 95       	inc	r21
     d1e:	c9 f7       	brne	.-14     	; 0xd12 <__addsf3x+0x4e>
     d20:	7e f4       	brtc	.+30     	; 0xd40 <__addsf3x+0x7c>
     d22:	1f 16       	cp	r1, r31
     d24:	ba 0b       	sbc	r27, r26
     d26:	62 0b       	sbc	r22, r18
     d28:	73 0b       	sbc	r23, r19
     d2a:	84 0b       	sbc	r24, r20
     d2c:	ba f0       	brmi	.+46     	; 0xd5c <__addsf3x+0x98>
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	a1 f0       	breq	.+40     	; 0xd5a <__addsf3x+0x96>
     d32:	ff 0f       	add	r31, r31
     d34:	bb 1f       	adc	r27, r27
     d36:	66 1f       	adc	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	c2 f7       	brpl	.-16     	; 0xd2e <__addsf3x+0x6a>
     d3e:	0e c0       	rjmp	.+28     	; 0xd5c <__addsf3x+0x98>
     d40:	ba 0f       	add	r27, r26
     d42:	62 1f       	adc	r22, r18
     d44:	73 1f       	adc	r23, r19
     d46:	84 1f       	adc	r24, r20
     d48:	48 f4       	brcc	.+18     	; 0xd5c <__addsf3x+0x98>
     d4a:	87 95       	ror	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f7 95       	ror	r31
     d54:	9e 3f       	cpi	r25, 0xFE	; 254
     d56:	08 f0       	brcs	.+2      	; 0xd5a <__addsf3x+0x96>
     d58:	b3 cf       	rjmp	.-154    	; 0xcc0 <__addsf3+0x1e>
     d5a:	93 95       	inc	r25
     d5c:	88 0f       	add	r24, r24
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <__addsf3x+0x9e>
     d60:	99 27       	eor	r25, r25
     d62:	ee 0f       	add	r30, r30
     d64:	97 95       	ror	r25
     d66:	87 95       	ror	r24
     d68:	08 95       	ret

00000d6a <__divsf3>:
     d6a:	0c d0       	rcall	.+24     	; 0xd84 <__divsf3x>
     d6c:	eb c0       	rjmp	.+470    	; 0xf44 <__fp_round>
     d6e:	e3 d0       	rcall	.+454    	; 0xf36 <__fp_pscB>
     d70:	40 f0       	brcs	.+16     	; 0xd82 <__divsf3+0x18>
     d72:	da d0       	rcall	.+436    	; 0xf28 <__fp_pscA>
     d74:	30 f0       	brcs	.+12     	; 0xd82 <__divsf3+0x18>
     d76:	21 f4       	brne	.+8      	; 0xd80 <__divsf3+0x16>
     d78:	5f 3f       	cpi	r21, 0xFF	; 255
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__divsf3+0x18>
     d7c:	cc c0       	rjmp	.+408    	; 0xf16 <__fp_inf>
     d7e:	51 11       	cpse	r21, r1
     d80:	15 c1       	rjmp	.+554    	; 0xfac <__fp_szero>
     d82:	cf c0       	rjmp	.+414    	; 0xf22 <__fp_nan>

00000d84 <__divsf3x>:
     d84:	f0 d0       	rcall	.+480    	; 0xf66 <__fp_split3>
     d86:	98 f3       	brcs	.-26     	; 0xd6e <__divsf3+0x4>

00000d88 <__divsf3_pse>:
     d88:	99 23       	and	r25, r25
     d8a:	c9 f3       	breq	.-14     	; 0xd7e <__divsf3+0x14>
     d8c:	55 23       	and	r21, r21
     d8e:	b1 f3       	breq	.-20     	; 0xd7c <__divsf3+0x12>
     d90:	95 1b       	sub	r25, r21
     d92:	55 0b       	sbc	r21, r21
     d94:	bb 27       	eor	r27, r27
     d96:	aa 27       	eor	r26, r26
     d98:	62 17       	cp	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	84 07       	cpc	r24, r20
     d9e:	38 f0       	brcs	.+14     	; 0xdae <__divsf3_pse+0x26>
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	aa 1f       	adc	r26, r26
     dac:	a9 f3       	breq	.-22     	; 0xd98 <__divsf3_pse+0x10>
     dae:	33 d0       	rcall	.+102    	; 0xe16 <__divsf3_pse+0x8e>
     db0:	0e 2e       	mov	r0, r30
     db2:	3a f0       	brmi	.+14     	; 0xdc2 <__divsf3_pse+0x3a>
     db4:	e0 e8       	ldi	r30, 0x80	; 128
     db6:	30 d0       	rcall	.+96     	; 0xe18 <__divsf3_pse+0x90>
     db8:	91 50       	subi	r25, 0x01	; 1
     dba:	50 40       	sbci	r21, 0x00	; 0
     dbc:	e6 95       	lsr	r30
     dbe:	00 1c       	adc	r0, r0
     dc0:	ca f7       	brpl	.-14     	; 0xdb4 <__divsf3_pse+0x2c>
     dc2:	29 d0       	rcall	.+82     	; 0xe16 <__divsf3_pse+0x8e>
     dc4:	fe 2f       	mov	r31, r30
     dc6:	27 d0       	rcall	.+78     	; 0xe16 <__divsf3_pse+0x8e>
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	bb 1f       	adc	r27, r27
     dd0:	26 17       	cp	r18, r22
     dd2:	37 07       	cpc	r19, r23
     dd4:	48 07       	cpc	r20, r24
     dd6:	ab 07       	cpc	r26, r27
     dd8:	b0 e8       	ldi	r27, 0x80	; 128
     dda:	09 f0       	breq	.+2      	; 0xdde <__divsf3_pse+0x56>
     ddc:	bb 0b       	sbc	r27, r27
     dde:	80 2d       	mov	r24, r0
     de0:	bf 01       	movw	r22, r30
     de2:	ff 27       	eor	r31, r31
     de4:	93 58       	subi	r25, 0x83	; 131
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	2a f0       	brmi	.+10     	; 0xdf4 <__divsf3_pse+0x6c>
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	51 05       	cpc	r21, r1
     dee:	68 f0       	brcs	.+26     	; 0xe0a <__divsf3_pse+0x82>
     df0:	92 c0       	rjmp	.+292    	; 0xf16 <__fp_inf>
     df2:	dc c0       	rjmp	.+440    	; 0xfac <__fp_szero>
     df4:	5f 3f       	cpi	r21, 0xFF	; 255
     df6:	ec f3       	brlt	.-6      	; 0xdf2 <__divsf3_pse+0x6a>
     df8:	98 3e       	cpi	r25, 0xE8	; 232
     dfa:	dc f3       	brlt	.-10     	; 0xdf2 <__divsf3_pse+0x6a>
     dfc:	86 95       	lsr	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b7 95       	ror	r27
     e04:	f7 95       	ror	r31
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	c9 f7       	brne	.-14     	; 0xdfc <__divsf3_pse+0x74>
     e0a:	88 0f       	add	r24, r24
     e0c:	91 1d       	adc	r25, r1
     e0e:	96 95       	lsr	r25
     e10:	87 95       	ror	r24
     e12:	97 f9       	bld	r25, 7
     e14:	08 95       	ret
     e16:	e1 e0       	ldi	r30, 0x01	; 1
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	bb 1f       	adc	r27, r27
     e20:	62 17       	cp	r22, r18
     e22:	73 07       	cpc	r23, r19
     e24:	84 07       	cpc	r24, r20
     e26:	ba 07       	cpc	r27, r26
     e28:	20 f0       	brcs	.+8      	; 0xe32 <__divsf3_pse+0xaa>
     e2a:	62 1b       	sub	r22, r18
     e2c:	73 0b       	sbc	r23, r19
     e2e:	84 0b       	sbc	r24, r20
     e30:	ba 0b       	sbc	r27, r26
     e32:	ee 1f       	adc	r30, r30
     e34:	88 f7       	brcc	.-30     	; 0xe18 <__divsf3_pse+0x90>
     e36:	e0 95       	com	r30
     e38:	08 95       	ret

00000e3a <__fixsfsi>:
     e3a:	04 d0       	rcall	.+8      	; 0xe44 <__fixunssfsi>
     e3c:	68 94       	set
     e3e:	b1 11       	cpse	r27, r1
     e40:	b5 c0       	rjmp	.+362    	; 0xfac <__fp_szero>
     e42:	08 95       	ret

00000e44 <__fixunssfsi>:
     e44:	98 d0       	rcall	.+304    	; 0xf76 <__fp_splitA>
     e46:	88 f0       	brcs	.+34     	; 0xe6a <__fixunssfsi+0x26>
     e48:	9f 57       	subi	r25, 0x7F	; 127
     e4a:	90 f0       	brcs	.+36     	; 0xe70 <__fixunssfsi+0x2c>
     e4c:	b9 2f       	mov	r27, r25
     e4e:	99 27       	eor	r25, r25
     e50:	b7 51       	subi	r27, 0x17	; 23
     e52:	a0 f0       	brcs	.+40     	; 0xe7c <__fixunssfsi+0x38>
     e54:	d1 f0       	breq	.+52     	; 0xe8a <__fixunssfsi+0x46>
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	1a f0       	brmi	.+6      	; 0xe66 <__fixunssfsi+0x22>
     e60:	ba 95       	dec	r27
     e62:	c9 f7       	brne	.-14     	; 0xe56 <__fixunssfsi+0x12>
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__fixunssfsi+0x46>
     e66:	b1 30       	cpi	r27, 0x01	; 1
     e68:	81 f0       	breq	.+32     	; 0xe8a <__fixunssfsi+0x46>
     e6a:	9f d0       	rcall	.+318    	; 0xfaa <__fp_zero>
     e6c:	b1 e0       	ldi	r27, 0x01	; 1
     e6e:	08 95       	ret
     e70:	9c c0       	rjmp	.+312    	; 0xfaa <__fp_zero>
     e72:	67 2f       	mov	r22, r23
     e74:	78 2f       	mov	r23, r24
     e76:	88 27       	eor	r24, r24
     e78:	b8 5f       	subi	r27, 0xF8	; 248
     e7a:	39 f0       	breq	.+14     	; 0xe8a <__fixunssfsi+0x46>
     e7c:	b9 3f       	cpi	r27, 0xF9	; 249
     e7e:	cc f3       	brlt	.-14     	; 0xe72 <__fixunssfsi+0x2e>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b3 95       	inc	r27
     e88:	d9 f7       	brne	.-10     	; 0xe80 <__fixunssfsi+0x3c>
     e8a:	3e f4       	brtc	.+14     	; 0xe9a <__fixunssfsi+0x56>
     e8c:	90 95       	com	r25
     e8e:	80 95       	com	r24
     e90:	70 95       	com	r23
     e92:	61 95       	neg	r22
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	08 95       	ret

00000e9c <__floatunsisf>:
     e9c:	e8 94       	clt
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <__floatsisf+0x12>

00000ea0 <__floatsisf>:
     ea0:	97 fb       	bst	r25, 7
     ea2:	3e f4       	brtc	.+14     	; 0xeb2 <__floatsisf+0x12>
     ea4:	90 95       	com	r25
     ea6:	80 95       	com	r24
     ea8:	70 95       	com	r23
     eaa:	61 95       	neg	r22
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	8f 4f       	sbci	r24, 0xFF	; 255
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	99 23       	and	r25, r25
     eb4:	a9 f0       	breq	.+42     	; 0xee0 <__floatsisf+0x40>
     eb6:	f9 2f       	mov	r31, r25
     eb8:	96 e9       	ldi	r25, 0x96	; 150
     eba:	bb 27       	eor	r27, r27
     ebc:	93 95       	inc	r25
     ebe:	f6 95       	lsr	r31
     ec0:	87 95       	ror	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b7 95       	ror	r27
     ec8:	f1 11       	cpse	r31, r1
     eca:	f8 cf       	rjmp	.-16     	; 0xebc <__floatsisf+0x1c>
     ecc:	fa f4       	brpl	.+62     	; 0xf0c <__floatsisf+0x6c>
     ece:	bb 0f       	add	r27, r27
     ed0:	11 f4       	brne	.+4      	; 0xed6 <__floatsisf+0x36>
     ed2:	60 ff       	sbrs	r22, 0
     ed4:	1b c0       	rjmp	.+54     	; 0xf0c <__floatsisf+0x6c>
     ed6:	6f 5f       	subi	r22, 0xFF	; 255
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	16 c0       	rjmp	.+44     	; 0xf0c <__floatsisf+0x6c>
     ee0:	88 23       	and	r24, r24
     ee2:	11 f0       	breq	.+4      	; 0xee8 <__floatsisf+0x48>
     ee4:	96 e9       	ldi	r25, 0x96	; 150
     ee6:	11 c0       	rjmp	.+34     	; 0xf0a <__floatsisf+0x6a>
     ee8:	77 23       	and	r23, r23
     eea:	21 f0       	breq	.+8      	; 0xef4 <__floatsisf+0x54>
     eec:	9e e8       	ldi	r25, 0x8E	; 142
     eee:	87 2f       	mov	r24, r23
     ef0:	76 2f       	mov	r23, r22
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <__floatsisf+0x5e>
     ef4:	66 23       	and	r22, r22
     ef6:	71 f0       	breq	.+28     	; 0xf14 <__floatsisf+0x74>
     ef8:	96 e8       	ldi	r25, 0x86	; 134
     efa:	86 2f       	mov	r24, r22
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	2a f0       	brmi	.+10     	; 0xf0c <__floatsisf+0x6c>
     f02:	9a 95       	dec	r25
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	da f7       	brpl	.-10     	; 0xf02 <__floatsisf+0x62>
     f0c:	88 0f       	add	r24, r24
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	97 f9       	bld	r25, 7
     f14:	08 95       	ret

00000f16 <__fp_inf>:
     f16:	97 f9       	bld	r25, 7
     f18:	9f 67       	ori	r25, 0x7F	; 127
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	08 95       	ret

00000f22 <__fp_nan>:
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	80 ec       	ldi	r24, 0xC0	; 192
     f26:	08 95       	ret

00000f28 <__fp_pscA>:
     f28:	00 24       	eor	r0, r0
     f2a:	0a 94       	dec	r0
     f2c:	16 16       	cp	r1, r22
     f2e:	17 06       	cpc	r1, r23
     f30:	18 06       	cpc	r1, r24
     f32:	09 06       	cpc	r0, r25
     f34:	08 95       	ret

00000f36 <__fp_pscB>:
     f36:	00 24       	eor	r0, r0
     f38:	0a 94       	dec	r0
     f3a:	12 16       	cp	r1, r18
     f3c:	13 06       	cpc	r1, r19
     f3e:	14 06       	cpc	r1, r20
     f40:	05 06       	cpc	r0, r21
     f42:	08 95       	ret

00000f44 <__fp_round>:
     f44:	09 2e       	mov	r0, r25
     f46:	03 94       	inc	r0
     f48:	00 0c       	add	r0, r0
     f4a:	11 f4       	brne	.+4      	; 0xf50 <__fp_round+0xc>
     f4c:	88 23       	and	r24, r24
     f4e:	52 f0       	brmi	.+20     	; 0xf64 <__fp_round+0x20>
     f50:	bb 0f       	add	r27, r27
     f52:	40 f4       	brcc	.+16     	; 0xf64 <__fp_round+0x20>
     f54:	bf 2b       	or	r27, r31
     f56:	11 f4       	brne	.+4      	; 0xf5c <__fp_round+0x18>
     f58:	60 ff       	sbrs	r22, 0
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <__fp_round+0x20>
     f5c:	6f 5f       	subi	r22, 0xFF	; 255
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8f 4f       	sbci	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	08 95       	ret

00000f66 <__fp_split3>:
     f66:	57 fd       	sbrc	r21, 7
     f68:	90 58       	subi	r25, 0x80	; 128
     f6a:	44 0f       	add	r20, r20
     f6c:	55 1f       	adc	r21, r21
     f6e:	59 f0       	breq	.+22     	; 0xf86 <__fp_splitA+0x10>
     f70:	5f 3f       	cpi	r21, 0xFF	; 255
     f72:	71 f0       	breq	.+28     	; 0xf90 <__fp_splitA+0x1a>
     f74:	47 95       	ror	r20

00000f76 <__fp_splitA>:
     f76:	88 0f       	add	r24, r24
     f78:	97 fb       	bst	r25, 7
     f7a:	99 1f       	adc	r25, r25
     f7c:	61 f0       	breq	.+24     	; 0xf96 <__fp_splitA+0x20>
     f7e:	9f 3f       	cpi	r25, 0xFF	; 255
     f80:	79 f0       	breq	.+30     	; 0xfa0 <__fp_splitA+0x2a>
     f82:	87 95       	ror	r24
     f84:	08 95       	ret
     f86:	12 16       	cp	r1, r18
     f88:	13 06       	cpc	r1, r19
     f8a:	14 06       	cpc	r1, r20
     f8c:	55 1f       	adc	r21, r21
     f8e:	f2 cf       	rjmp	.-28     	; 0xf74 <__fp_split3+0xe>
     f90:	46 95       	lsr	r20
     f92:	f1 df       	rcall	.-30     	; 0xf76 <__fp_splitA>
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <__fp_splitA+0x30>
     f96:	16 16       	cp	r1, r22
     f98:	17 06       	cpc	r1, r23
     f9a:	18 06       	cpc	r1, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	f1 cf       	rjmp	.-30     	; 0xf82 <__fp_splitA+0xc>
     fa0:	86 95       	lsr	r24
     fa2:	71 05       	cpc	r23, r1
     fa4:	61 05       	cpc	r22, r1
     fa6:	08 94       	sec
     fa8:	08 95       	ret

00000faa <__fp_zero>:
     faa:	e8 94       	clt

00000fac <__fp_szero>:
     fac:	bb 27       	eor	r27, r27
     fae:	66 27       	eor	r22, r22
     fb0:	77 27       	eor	r23, r23
     fb2:	cb 01       	movw	r24, r22
     fb4:	97 f9       	bld	r25, 7
     fb6:	08 95       	ret

00000fb8 <__mulsf3>:
     fb8:	0b d0       	rcall	.+22     	; 0xfd0 <__mulsf3x>
     fba:	c4 cf       	rjmp	.-120    	; 0xf44 <__fp_round>
     fbc:	b5 df       	rcall	.-150    	; 0xf28 <__fp_pscA>
     fbe:	28 f0       	brcs	.+10     	; 0xfca <__mulsf3+0x12>
     fc0:	ba df       	rcall	.-140    	; 0xf36 <__fp_pscB>
     fc2:	18 f0       	brcs	.+6      	; 0xfca <__mulsf3+0x12>
     fc4:	95 23       	and	r25, r21
     fc6:	09 f0       	breq	.+2      	; 0xfca <__mulsf3+0x12>
     fc8:	a6 cf       	rjmp	.-180    	; 0xf16 <__fp_inf>
     fca:	ab cf       	rjmp	.-170    	; 0xf22 <__fp_nan>
     fcc:	11 24       	eor	r1, r1
     fce:	ee cf       	rjmp	.-36     	; 0xfac <__fp_szero>

00000fd0 <__mulsf3x>:
     fd0:	ca df       	rcall	.-108    	; 0xf66 <__fp_split3>
     fd2:	a0 f3       	brcs	.-24     	; 0xfbc <__mulsf3+0x4>

00000fd4 <__mulsf3_pse>:
     fd4:	95 9f       	mul	r25, r21
     fd6:	d1 f3       	breq	.-12     	; 0xfcc <__mulsf3+0x14>
     fd8:	95 0f       	add	r25, r21
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	55 1f       	adc	r21, r21
     fde:	62 9f       	mul	r22, r18
     fe0:	f0 01       	movw	r30, r0
     fe2:	72 9f       	mul	r23, r18
     fe4:	bb 27       	eor	r27, r27
     fe6:	f0 0d       	add	r31, r0
     fe8:	b1 1d       	adc	r27, r1
     fea:	63 9f       	mul	r22, r19
     fec:	aa 27       	eor	r26, r26
     fee:	f0 0d       	add	r31, r0
     ff0:	b1 1d       	adc	r27, r1
     ff2:	aa 1f       	adc	r26, r26
     ff4:	64 9f       	mul	r22, r20
     ff6:	66 27       	eor	r22, r22
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	66 1f       	adc	r22, r22
     ffe:	82 9f       	mul	r24, r18
    1000:	22 27       	eor	r18, r18
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	62 1f       	adc	r22, r18
    1008:	73 9f       	mul	r23, r19
    100a:	b0 0d       	add	r27, r0
    100c:	a1 1d       	adc	r26, r1
    100e:	62 1f       	adc	r22, r18
    1010:	83 9f       	mul	r24, r19
    1012:	a0 0d       	add	r26, r0
    1014:	61 1d       	adc	r22, r1
    1016:	22 1f       	adc	r18, r18
    1018:	74 9f       	mul	r23, r20
    101a:	33 27       	eor	r19, r19
    101c:	a0 0d       	add	r26, r0
    101e:	61 1d       	adc	r22, r1
    1020:	23 1f       	adc	r18, r19
    1022:	84 9f       	mul	r24, r20
    1024:	60 0d       	add	r22, r0
    1026:	21 1d       	adc	r18, r1
    1028:	82 2f       	mov	r24, r18
    102a:	76 2f       	mov	r23, r22
    102c:	6a 2f       	mov	r22, r26
    102e:	11 24       	eor	r1, r1
    1030:	9f 57       	subi	r25, 0x7F	; 127
    1032:	50 40       	sbci	r21, 0x00	; 0
    1034:	8a f0       	brmi	.+34     	; 0x1058 <__mulsf3_pse+0x84>
    1036:	e1 f0       	breq	.+56     	; 0x1070 <__mulsf3_pse+0x9c>
    1038:	88 23       	and	r24, r24
    103a:	4a f0       	brmi	.+18     	; 0x104e <__mulsf3_pse+0x7a>
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	bb 1f       	adc	r27, r27
    1042:	66 1f       	adc	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	91 50       	subi	r25, 0x01	; 1
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	a9 f7       	brne	.-22     	; 0x1038 <__mulsf3_pse+0x64>
    104e:	9e 3f       	cpi	r25, 0xFE	; 254
    1050:	51 05       	cpc	r21, r1
    1052:	70 f0       	brcs	.+28     	; 0x1070 <__mulsf3_pse+0x9c>
    1054:	60 cf       	rjmp	.-320    	; 0xf16 <__fp_inf>
    1056:	aa cf       	rjmp	.-172    	; 0xfac <__fp_szero>
    1058:	5f 3f       	cpi	r21, 0xFF	; 255
    105a:	ec f3       	brlt	.-6      	; 0x1056 <__mulsf3_pse+0x82>
    105c:	98 3e       	cpi	r25, 0xE8	; 232
    105e:	dc f3       	brlt	.-10     	; 0x1056 <__mulsf3_pse+0x82>
    1060:	86 95       	lsr	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b7 95       	ror	r27
    1068:	f7 95       	ror	r31
    106a:	e7 95       	ror	r30
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	c1 f7       	brne	.-16     	; 0x1060 <__mulsf3_pse+0x8c>
    1070:	fe 2b       	or	r31, r30
    1072:	88 0f       	add	r24, r24
    1074:	91 1d       	adc	r25, r1
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	97 f9       	bld	r25, 7
    107c:	08 95       	ret

0000107e <pow>:
    107e:	fa 01       	movw	r30, r20
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	30 96       	adiw	r30, 0x00	; 0
    1086:	21 05       	cpc	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	99 f1       	breq	.+102    	; 0x10f2 <pow+0x74>
    108c:	61 15       	cp	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	61 f4       	brne	.+24     	; 0x10aa <pow+0x2c>
    1092:	80 38       	cpi	r24, 0x80	; 128
    1094:	bf e3       	ldi	r27, 0x3F	; 63
    1096:	9b 07       	cpc	r25, r27
    1098:	49 f1       	breq	.+82     	; 0x10ec <pow+0x6e>
    109a:	68 94       	set
    109c:	90 38       	cpi	r25, 0x80	; 128
    109e:	81 05       	cpc	r24, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <pow+0x3c>
    10a2:	80 38       	cpi	r24, 0x80	; 128
    10a4:	bf ef       	ldi	r27, 0xFF	; 255
    10a6:	9b 07       	cpc	r25, r27
    10a8:	41 f0       	breq	.+16     	; 0x10ba <pow+0x3c>
    10aa:	99 23       	and	r25, r25
    10ac:	42 f5       	brpl	.+80     	; 0x10fe <pow+0x80>
    10ae:	ff 3f       	cpi	r31, 0xFF	; 255
    10b0:	e1 05       	cpc	r30, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	21 05       	cpc	r18, r1
    10b6:	11 f1       	breq	.+68     	; 0x10fc <pow+0x7e>
    10b8:	e8 94       	clt
    10ba:	08 94       	sec
    10bc:	e7 95       	ror	r30
    10be:	d9 01       	movw	r26, r18
    10c0:	aa 23       	and	r26, r26
    10c2:	29 f4       	brne	.+10     	; 0x10ce <pow+0x50>
    10c4:	ab 2f       	mov	r26, r27
    10c6:	be 2f       	mov	r27, r30
    10c8:	f8 5f       	subi	r31, 0xF8	; 248
    10ca:	d0 f3       	brcs	.-12     	; 0x10c0 <pow+0x42>
    10cc:	10 c0       	rjmp	.+32     	; 0x10ee <pow+0x70>
    10ce:	ff 5f       	subi	r31, 0xFF	; 255
    10d0:	70 f4       	brcc	.+28     	; 0x10ee <pow+0x70>
    10d2:	a6 95       	lsr	r26
    10d4:	e0 f7       	brcc	.-8      	; 0x10ce <pow+0x50>
    10d6:	f7 39       	cpi	r31, 0x97	; 151
    10d8:	50 f0       	brcs	.+20     	; 0x10ee <pow+0x70>
    10da:	19 f0       	breq	.+6      	; 0x10e2 <pow+0x64>
    10dc:	ff 3a       	cpi	r31, 0xAF	; 175
    10de:	38 f4       	brcc	.+14     	; 0x10ee <pow+0x70>
    10e0:	9f 77       	andi	r25, 0x7F	; 127
    10e2:	9f 93       	push	r25
    10e4:	0c d0       	rcall	.+24     	; 0x10fe <pow+0x80>
    10e6:	0f 90       	pop	r0
    10e8:	07 fc       	sbrc	r0, 7
    10ea:	90 58       	subi	r25, 0x80	; 128
    10ec:	08 95       	ret
    10ee:	3e f0       	brts	.+14     	; 0x10fe <pow+0x80>
    10f0:	18 cf       	rjmp	.-464    	; 0xf22 <__fp_nan>
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	9f e3       	ldi	r25, 0x3F	; 63
    10fa:	08 95       	ret
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	9f 77       	andi	r25, 0x7F	; 127
    1100:	5f 93       	push	r21
    1102:	4f 93       	push	r20
    1104:	3f 93       	push	r19
    1106:	2f 93       	push	r18
    1108:	9e d0       	rcall	.+316    	; 0x1246 <log>
    110a:	2f 91       	pop	r18
    110c:	3f 91       	pop	r19
    110e:	4f 91       	pop	r20
    1110:	5f 91       	pop	r21
    1112:	52 df       	rcall	.-348    	; 0xfb8 <__mulsf3>
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <exp>
    1116:	19 f4       	brne	.+6      	; 0x111e <pow+0xa0>
    1118:	0e f0       	brts	.+2      	; 0x111c <pow+0x9e>
    111a:	fd ce       	rjmp	.-518    	; 0xf16 <__fp_inf>
    111c:	46 cf       	rjmp	.-372    	; 0xfaa <__fp_zero>
    111e:	01 cf       	rjmp	.-510    	; 0xf22 <__fp_nan>

00001120 <exp>:
    1120:	2a df       	rcall	.-428    	; 0xf76 <__fp_splitA>
    1122:	c8 f3       	brcs	.-14     	; 0x1116 <pow+0x98>
    1124:	96 38       	cpi	r25, 0x86	; 134
    1126:	c0 f7       	brcc	.-16     	; 0x1118 <pow+0x9a>
    1128:	07 f8       	bld	r0, 7
    112a:	0f 92       	push	r0
    112c:	e8 94       	clt
    112e:	2b e3       	ldi	r18, 0x3B	; 59
    1130:	3a ea       	ldi	r19, 0xAA	; 170
    1132:	48 eb       	ldi	r20, 0xB8	; 184
    1134:	5f e7       	ldi	r21, 0x7F	; 127
    1136:	4e df       	rcall	.-356    	; 0xfd4 <__mulsf3_pse>
    1138:	0f 92       	push	r0
    113a:	0f 92       	push	r0
    113c:	0f 92       	push	r0
    113e:	4d b7       	in	r20, 0x3d	; 61
    1140:	5e b7       	in	r21, 0x3e	; 62
    1142:	0f 92       	push	r0
    1144:	c0 d0       	rcall	.+384    	; 0x12c6 <modf>
    1146:	e4 ee       	ldi	r30, 0xE4	; 228
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	16 d0       	rcall	.+44     	; 0x1178 <__fp_powser>
    114c:	4f 91       	pop	r20
    114e:	5f 91       	pop	r21
    1150:	ef 91       	pop	r30
    1152:	ff 91       	pop	r31
    1154:	e5 95       	asr	r30
    1156:	ee 1f       	adc	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	49 f0       	breq	.+18     	; 0x116e <exp+0x4e>
    115c:	fe 57       	subi	r31, 0x7E	; 126
    115e:	e0 68       	ori	r30, 0x80	; 128
    1160:	44 27       	eor	r20, r20
    1162:	ee 0f       	add	r30, r30
    1164:	44 1f       	adc	r20, r20
    1166:	fa 95       	dec	r31
    1168:	e1 f7       	brne	.-8      	; 0x1162 <exp+0x42>
    116a:	41 95       	neg	r20
    116c:	55 0b       	sbc	r21, r21
    116e:	32 d0       	rcall	.+100    	; 0x11d4 <ldexp>
    1170:	0f 90       	pop	r0
    1172:	07 fe       	sbrs	r0, 7
    1174:	26 c0       	rjmp	.+76     	; 0x11c2 <inverse>
    1176:	08 95       	ret

00001178 <__fp_powser>:
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	1f 93       	push	r17
    117e:	0f 93       	push	r16
    1180:	ff 92       	push	r15
    1182:	ef 92       	push	r14
    1184:	df 92       	push	r13
    1186:	7b 01       	movw	r14, r22
    1188:	8c 01       	movw	r16, r24
    118a:	68 94       	set
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__fp_powser+0x20>
    118e:	da 2e       	mov	r13, r26
    1190:	ef 01       	movw	r28, r30
    1192:	1e df       	rcall	.-452    	; 0xfd0 <__mulsf3x>
    1194:	fe 01       	movw	r30, r28
    1196:	e8 94       	clt
    1198:	a5 91       	lpm	r26, Z+
    119a:	25 91       	lpm	r18, Z+
    119c:	35 91       	lpm	r19, Z+
    119e:	45 91       	lpm	r20, Z+
    11a0:	55 91       	lpm	r21, Z+
    11a2:	ae f3       	brts	.-22     	; 0x118e <__fp_powser+0x16>
    11a4:	ef 01       	movw	r28, r30
    11a6:	8e dd       	rcall	.-1252   	; 0xcc4 <__addsf3x>
    11a8:	fe 01       	movw	r30, r28
    11aa:	97 01       	movw	r18, r14
    11ac:	a8 01       	movw	r20, r16
    11ae:	da 94       	dec	r13
    11b0:	79 f7       	brne	.-34     	; 0x1190 <__fp_powser+0x18>
    11b2:	df 90       	pop	r13
    11b4:	ef 90       	pop	r14
    11b6:	ff 90       	pop	r15
    11b8:	0f 91       	pop	r16
    11ba:	1f 91       	pop	r17
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <inverse>:
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	9f e3       	ldi	r25, 0x3F	; 63
    11ce:	cd cd       	rjmp	.-1126   	; 0xd6a <__divsf3>
    11d0:	a2 ce       	rjmp	.-700    	; 0xf16 <__fp_inf>
    11d2:	ac c0       	rjmp	.+344    	; 0x132c <__fp_mpack>

000011d4 <ldexp>:
    11d4:	d0 de       	rcall	.-608    	; 0xf76 <__fp_splitA>
    11d6:	e8 f3       	brcs	.-6      	; 0x11d2 <inverse+0x10>
    11d8:	99 23       	and	r25, r25
    11da:	d9 f3       	breq	.-10     	; 0x11d2 <inverse+0x10>
    11dc:	94 0f       	add	r25, r20
    11de:	51 1d       	adc	r21, r1
    11e0:	bb f3       	brvs	.-18     	; 0x11d0 <inverse+0xe>
    11e2:	91 50       	subi	r25, 0x01	; 1
    11e4:	50 40       	sbci	r21, 0x00	; 0
    11e6:	94 f0       	brlt	.+36     	; 0x120c <ldexp+0x38>
    11e8:	59 f0       	breq	.+22     	; 0x1200 <ldexp+0x2c>
    11ea:	88 23       	and	r24, r24
    11ec:	32 f0       	brmi	.+12     	; 0x11fa <ldexp+0x26>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	c1 f7       	brne	.-16     	; 0x11ea <ldexp+0x16>
    11fa:	9e 3f       	cpi	r25, 0xFE	; 254
    11fc:	51 05       	cpc	r21, r1
    11fe:	44 f7       	brge	.-48     	; 0x11d0 <inverse+0xe>
    1200:	88 0f       	add	r24, r24
    1202:	91 1d       	adc	r25, r1
    1204:	96 95       	lsr	r25
    1206:	87 95       	ror	r24
    1208:	97 f9       	bld	r25, 7
    120a:	08 95       	ret
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	ac f0       	brlt	.+42     	; 0x123a <ldexp+0x66>
    1210:	98 3e       	cpi	r25, 0xE8	; 232
    1212:	9c f0       	brlt	.+38     	; 0x123a <ldexp+0x66>
    1214:	bb 27       	eor	r27, r27
    1216:	86 95       	lsr	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b7 95       	ror	r27
    121e:	08 f4       	brcc	.+2      	; 0x1222 <ldexp+0x4e>
    1220:	b1 60       	ori	r27, 0x01	; 1
    1222:	93 95       	inc	r25
    1224:	c1 f7       	brne	.-16     	; 0x1216 <ldexp+0x42>
    1226:	bb 0f       	add	r27, r27
    1228:	58 f7       	brcc	.-42     	; 0x1200 <ldexp+0x2c>
    122a:	11 f4       	brne	.+4      	; 0x1230 <ldexp+0x5c>
    122c:	60 ff       	sbrs	r22, 0
    122e:	e8 cf       	rjmp	.-48     	; 0x1200 <ldexp+0x2c>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	e3 cf       	rjmp	.-58     	; 0x1200 <ldexp+0x2c>
    123a:	b8 ce       	rjmp	.-656    	; 0xfac <__fp_szero>
    123c:	0e f0       	brts	.+2      	; 0x1240 <ldexp+0x6c>
    123e:	76 c0       	rjmp	.+236    	; 0x132c <__fp_mpack>
    1240:	70 ce       	rjmp	.-800    	; 0xf22 <__fp_nan>
    1242:	68 94       	set
    1244:	68 ce       	rjmp	.-816    	; 0xf16 <__fp_inf>

00001246 <log>:
    1246:	97 de       	rcall	.-722    	; 0xf76 <__fp_splitA>
    1248:	c8 f3       	brcs	.-14     	; 0x123c <ldexp+0x68>
    124a:	99 23       	and	r25, r25
    124c:	d1 f3       	breq	.-12     	; 0x1242 <ldexp+0x6e>
    124e:	c6 f3       	brts	.-16     	; 0x1240 <ldexp+0x6c>
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	1f 93       	push	r17
    1256:	0f 93       	push	r16
    1258:	ff 92       	push	r15
    125a:	c9 2f       	mov	r28, r25
    125c:	dd 27       	eor	r29, r29
    125e:	88 23       	and	r24, r24
    1260:	2a f0       	brmi	.+10     	; 0x126c <log+0x26>
    1262:	21 97       	sbiw	r28, 0x01	; 1
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	da f7       	brpl	.-10     	; 0x1262 <log+0x1c>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f eb       	ldi	r21, 0xBF	; 191
    1274:	9f e3       	ldi	r25, 0x3F	; 63
    1276:	88 39       	cpi	r24, 0x98	; 152
    1278:	20 f0       	brcs	.+8      	; 0x1282 <log+0x3c>
    127a:	80 3e       	cpi	r24, 0xE0	; 224
    127c:	30 f0       	brcs	.+12     	; 0x128a <log+0x44>
    127e:	21 96       	adiw	r28, 0x01	; 1
    1280:	8f 77       	andi	r24, 0x7F	; 127
    1282:	0f dd       	rcall	.-1506   	; 0xca2 <__addsf3>
    1284:	ec e0       	ldi	r30, 0x0C	; 12
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <log+0x4a>
    128a:	0b dd       	rcall	.-1514   	; 0xca2 <__addsf3>
    128c:	e9 e3       	ldi	r30, 0x39	; 57
    128e:	f1 e0       	ldi	r31, 0x01	; 1
    1290:	73 df       	rcall	.-282    	; 0x1178 <__fp_powser>
    1292:	8b 01       	movw	r16, r22
    1294:	be 01       	movw	r22, r28
    1296:	ec 01       	movw	r28, r24
    1298:	fb 2e       	mov	r15, r27
    129a:	6f 57       	subi	r22, 0x7F	; 127
    129c:	71 09       	sbc	r23, r1
    129e:	75 95       	asr	r23
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 0b       	sbc	r24, r24
    12a4:	99 0b       	sbc	r25, r25
    12a6:	fc dd       	rcall	.-1032   	; 0xea0 <__floatsisf>
    12a8:	28 e1       	ldi	r18, 0x18	; 24
    12aa:	32 e7       	ldi	r19, 0x72	; 114
    12ac:	41 e3       	ldi	r20, 0x31	; 49
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	8f de       	rcall	.-738    	; 0xfd0 <__mulsf3x>
    12b2:	af 2d       	mov	r26, r15
    12b4:	98 01       	movw	r18, r16
    12b6:	ae 01       	movw	r20, r28
    12b8:	ff 90       	pop	r15
    12ba:	0f 91       	pop	r16
    12bc:	1f 91       	pop	r17
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	00 dd       	rcall	.-1536   	; 0xcc4 <__addsf3x>
    12c4:	3f ce       	rjmp	.-898    	; 0xf44 <__fp_round>

000012c6 <modf>:
    12c6:	fa 01       	movw	r30, r20
    12c8:	dc 01       	movw	r26, r24
    12ca:	aa 0f       	add	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    12d2:	bf 57       	subi	r27, 0x7F	; 127
    12d4:	28 f4       	brcc	.+10     	; 0x12e0 <modf+0x1a>
    12d6:	22 27       	eor	r18, r18
    12d8:	33 27       	eor	r19, r19
    12da:	44 27       	eor	r20, r20
    12dc:	50 78       	andi	r21, 0x80	; 128
    12de:	1f c0       	rjmp	.+62     	; 0x131e <modf+0x58>
    12e0:	b7 51       	subi	r27, 0x17	; 23
    12e2:	88 f4       	brcc	.+34     	; 0x1306 <modf+0x40>
    12e4:	ab 2f       	mov	r26, r27
    12e6:	00 24       	eor	r0, r0
    12e8:	46 95       	lsr	r20
    12ea:	37 95       	ror	r19
    12ec:	27 95       	ror	r18
    12ee:	01 1c       	adc	r0, r1
    12f0:	a3 95       	inc	r26
    12f2:	d2 f3       	brmi	.-12     	; 0x12e8 <modf+0x22>
    12f4:	00 20       	and	r0, r0
    12f6:	69 f0       	breq	.+26     	; 0x1312 <modf+0x4c>
    12f8:	22 0f       	add	r18, r18
    12fa:	33 1f       	adc	r19, r19
    12fc:	44 1f       	adc	r20, r20
    12fe:	b3 95       	inc	r27
    1300:	da f3       	brmi	.-10     	; 0x12f8 <modf+0x32>
    1302:	0d d0       	rcall	.+26     	; 0x131e <modf+0x58>
    1304:	cd cc       	rjmp	.-1638   	; 0xca0 <__subsf3>
    1306:	61 30       	cpi	r22, 0x01	; 1
    1308:	71 05       	cpc	r23, r1
    130a:	a0 e8       	ldi	r26, 0x80	; 128
    130c:	8a 07       	cpc	r24, r26
    130e:	b9 46       	sbci	r27, 0x69	; 105
    1310:	30 f4       	brcc	.+12     	; 0x131e <modf+0x58>
    1312:	9b 01       	movw	r18, r22
    1314:	ac 01       	movw	r20, r24
    1316:	66 27       	eor	r22, r22
    1318:	77 27       	eor	r23, r23
    131a:	88 27       	eor	r24, r24
    131c:	90 78       	andi	r25, 0x80	; 128
    131e:	30 96       	adiw	r30, 0x00	; 0
    1320:	21 f0       	breq	.+8      	; 0x132a <modf+0x64>
    1322:	20 83       	st	Z, r18
    1324:	31 83       	std	Z+1, r19	; 0x01
    1326:	42 83       	std	Z+2, r20	; 0x02
    1328:	53 83       	std	Z+3, r21	; 0x03
    132a:	08 95       	ret

0000132c <__fp_mpack>:
    132c:	9f 3f       	cpi	r25, 0xFF	; 255
    132e:	31 f0       	breq	.+12     	; 0x133c <__fp_mpack_finite+0xc>

00001330 <__fp_mpack_finite>:
    1330:	91 50       	subi	r25, 0x01	; 1
    1332:	20 f4       	brcc	.+8      	; 0x133c <__fp_mpack_finite+0xc>
    1334:	87 95       	ror	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	b7 95       	ror	r27
    133c:	88 0f       	add	r24, r24
    133e:	91 1d       	adc	r25, r1
    1340:	96 95       	lsr	r25
    1342:	87 95       	ror	r24
    1344:	97 f9       	bld	r25, 7
    1346:	08 95       	ret

00001348 <__udivmodhi4>:
    1348:	aa 1b       	sub	r26, r26
    134a:	bb 1b       	sub	r27, r27
    134c:	51 e1       	ldi	r21, 0x11	; 17
    134e:	07 c0       	rjmp	.+14     	; 0x135e <__udivmodhi4_ep>

00001350 <__udivmodhi4_loop>:
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	a6 17       	cp	r26, r22
    1356:	b7 07       	cpc	r27, r23
    1358:	10 f0       	brcs	.+4      	; 0x135e <__udivmodhi4_ep>
    135a:	a6 1b       	sub	r26, r22
    135c:	b7 0b       	sbc	r27, r23

0000135e <__udivmodhi4_ep>:
    135e:	88 1f       	adc	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	5a 95       	dec	r21
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__udivmodhi4_loop>
    1366:	80 95       	com	r24
    1368:	90 95       	com	r25
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	08 95       	ret

00001370 <_exit>:
    1370:	f8 94       	cli

00001372 <__stop_program>:
    1372:	ff cf       	rjmp	.-2      	; 0x1372 <__stop_program>
