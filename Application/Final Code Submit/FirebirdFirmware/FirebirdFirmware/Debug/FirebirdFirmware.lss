
FirebirdFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00001af6  00001b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  00800238  00800238  00001bc2  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004148  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a91  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000370  00000000  00000000  00005c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091b  00000000  00000000  00005fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00006904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a9  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001385  00000000  00000000  0000778d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_5>
      18:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ef       	ldi	r30, 0xF6	; 246
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 33       	cpi	r26, 0x38	; 56
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e3       	ldi	r26, 0x38	; 56
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 3a       	cpi	r26, 0xA5	; 165
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <main>
     122:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <servo1_pin_config>:
* Example Call:		servo1_pin_config();
*
*/
void servo1_pin_config (void)	//Configure PORTB 5 pin for servo motor 1 operation
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     12a:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     12c:	2d 9a       	sbi	0x05, 5	; 5
}
     12e:	08 95       	ret

00000130 <servo2_pin_config>:
* Example Call:		servo2_pin_config();
*
*/
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     130:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     132:	2e 9a       	sbi	0x05, 6	; 5
}
     134:	08 95       	ret

00000136 <servo3_pin_config>:
* Example Call:		servo3_pin_config();
*
*/
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     136:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     138:	2f 9a       	sbi	0x05, 7	; 5
}
     13a:	08 95       	ret

0000013c <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13c:	86 e6       	ldi	r24, 0x66	; 102
     13e:	9e e0       	ldi	r25, 0x0E	; 14
     140:	01 97       	sbiw	r24, 0x01	; 1
     142:	f1 f7       	brne	.-4      	; 0x140 <lcd_set_4bit+0x4>
     144:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     146:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     148:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     14a:	80 e3       	ldi	r24, 0x30	; 48
     14c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     14e:	42 9a       	sbi	0x08, 2	; 8
     150:	ef ef       	ldi	r30, 0xFF	; 255
     152:	f7 e4       	ldi	r31, 0x47	; 71
     154:	31 97       	sbiw	r30, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <lcd_set_4bit+0x18>
     158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_set_4bit+0x1e>
     15a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15c:	42 98       	cbi	0x08, 2	; 8
     15e:	e6 e6       	ldi	r30, 0x66	; 102
     160:	fe e0       	ldi	r31, 0x0E	; 14
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x26>
     166:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     168:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     16a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16e:	42 9a       	sbi	0x08, 2	; 8
     170:	ef ef       	ldi	r30, 0xFF	; 255
     172:	f7 e4       	ldi	r31, 0x47	; 71
     174:	31 97       	sbiw	r30, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x38>
     178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_set_4bit+0x3e>
     17a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     17c:	42 98       	cbi	0x08, 2	; 8
     17e:	e6 e6       	ldi	r30, 0x66	; 102
     180:	fe e0       	ldi	r31, 0x0E	; 14
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x46>
     186:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     188:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     18a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     18c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     18e:	42 9a       	sbi	0x08, 2	; 8
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	97 e4       	ldi	r25, 0x47	; 71
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <lcd_set_4bit+0x58>
     198:	00 c0       	rjmp	.+0      	; 0x19a <lcd_set_4bit+0x5e>
     19a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     19c:	42 98       	cbi	0x08, 2	; 8
     19e:	e6 e6       	ldi	r30, 0x66	; 102
     1a0:	fe e0       	ldi	r31, 0x0E	; 14
     1a2:	31 97       	sbiw	r30, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_set_4bit+0x66>
     1a6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1a8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1aa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1ac:	80 e2       	ldi	r24, 0x20	; 32
     1ae:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1b0:	42 9a       	sbi	0x08, 2	; 8
     1b2:	8f ef       	ldi	r24, 0xFF	; 255
     1b4:	97 e4       	ldi	r25, 0x47	; 71
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_set_4bit+0x7a>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_set_4bit+0x80>
     1bc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1be:	42 98       	cbi	0x08, 2	; 8

	
}
     1c0:	08 95       	ret

000001c2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1c2:	98 b1       	in	r25, 0x08	; 8
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1c8:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1ca:	28 2f       	mov	r18, r24
     1cc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1ce:	92 2b       	or	r25, r18
     1d0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1d4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1d6:	42 9a       	sbi	0x08, 2	; 8
     1d8:	ef ef       	ldi	r30, 0xFF	; 255
     1da:	f7 e4       	ldi	r31, 0x47	; 71
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_wr_command+0x1a>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_wr_command+0x20>
     1e2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1e4:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1e6:	98 b1       	in	r25, 0x08	; 8
     1e8:	9f 70       	andi	r25, 0x0F	; 15
     1ea:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1ec:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1ee:	82 95       	swap	r24
     1f0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1f2:	89 2b       	or	r24, r25
     1f4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1f6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1f8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1fa:	42 9a       	sbi	0x08, 2	; 8
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	97 e4       	ldi	r25, 0x47	; 71
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd_wr_command+0x3e>
     204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_wr_command+0x44>
     206:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     208:	42 98       	cbi	0x08, 2	; 8
}
     20a:	08 95       	ret

0000020c <lcd_init>:
     20c:	86 e6       	ldi	r24, 0x66	; 102
     20e:	9e e0       	ldi	r25, 0x0E	; 14
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x4>
     214:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     216:	88 e2       	ldi	r24, 0x28	; 40
     218:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x01);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x06);
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     228:	8e e0       	ldi	r24, 0x0E	; 14
     22a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x80);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
		
}
     234:	08 95       	ret

00000236 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     236:	98 b1       	in	r25, 0x08	; 8
     238:	9f 70       	andi	r25, 0x0F	; 15
     23a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     23c:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     23e:	28 2f       	mov	r18, r24
     240:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     242:	92 2b       	or	r25, r18
     244:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     246:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     248:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     24a:	42 9a       	sbi	0x08, 2	; 8
     24c:	ef ef       	ldi	r30, 0xFF	; 255
     24e:	f7 e4       	ldi	r31, 0x47	; 71
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <lcd_wr_char+0x1a>
     254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_wr_char+0x20>
     256:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     258:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     25a:	98 b1       	in	r25, 0x08	; 8
     25c:	9f 70       	andi	r25, 0x0F	; 15
     25e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     260:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     262:	82 95       	swap	r24
     264:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     266:	89 2b       	or	r24, r25
     268:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     26a:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     26c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26e:	42 9a       	sbi	0x08, 2	; 8
     270:	8f ef       	ldi	r24, 0xFF	; 255
     272:	97 e4       	ldi	r25, 0x47	; 71
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <lcd_wr_char+0x3e>
     278:	00 c0       	rjmp	.+0      	; 0x27a <lcd_wr_char+0x44>
     27a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     27c:	42 98       	cbi	0x08, 2	; 8
}
     27e:	08 95       	ret

00000280 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     280:	80 e8       	ldi	r24, 0x80	; 128
     282:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
}
     286:	08 95       	ret

00000288 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
	while(*str != '\0')
     28e:	88 81       	ld	r24, Y
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
     294:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     296:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     29a:	89 91       	ld	r24, Y+
     29c:	88 23       	and	r24, r24
     29e:	d9 f7       	brne	.-10     	; 0x296 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	79 f0       	breq	.+30     	; 0x2c8 <lcd_cursor+0x22>
     2aa:	83 30       	cpi	r24, 0x03	; 3
     2ac:	18 f4       	brcc	.+6      	; 0x2b4 <lcd_cursor+0xe>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	c9 f4       	brne	.+50     	; 0x2e4 <lcd_cursor+0x3e>
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <lcd_cursor+0x18>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <lcd_cursor+0x2c>
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	a1 f4       	brne	.+40     	; 0x2e4 <lcd_cursor+0x3e>
     2bc:	0f c0       	rjmp	.+30     	; 0x2dc <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2be:	86 2f       	mov	r24, r22
     2c0:	81 58       	subi	r24, 0x81	; 129
     2c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
     2c6:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2c8:	86 2f       	mov	r24, r22
     2ca:	81 54       	subi	r24, 0x41	; 65
     2cc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
     2d0:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2d2:	86 2f       	mov	r24, r22
     2d4:	8d 56       	subi	r24, 0x6D	; 109
     2d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
     2da:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2dc:	86 2f       	mov	r24, r22
     2de:	8d 52       	subi	r24, 0x2D	; 45
     2e0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
     2e4:	08 95       	ret

000002e6 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	8a 01       	movw	r16, r20
     2f0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2f2:	88 23       	and	r24, r24
     2f4:	11 f0       	breq	.+4      	; 0x2fa <lcd_print+0x14>
     2f6:	66 23       	and	r22, r22
     2f8:	19 f4       	brne	.+6      	; 0x300 <lcd_print+0x1a>
	{
		lcd_home();
     2fa:	0e 94 40 01 	call	0x280	; 0x280 <lcd_home>
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     300:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     304:	c5 30       	cpi	r28, 0x05	; 5
     306:	d1 05       	cpc	r29, r1
     308:	71 f4       	brne	.+28     	; 0x326 <lcd_print+0x40>
	{
		million=value/10000+48;
     30a:	c8 01       	movw	r24, r16
     30c:	60 e1       	ldi	r22, 0x10	; 16
     30e:	77 e2       	ldi	r23, 0x27	; 39
     310:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     314:	cb 01       	movw	r24, r22
     316:	c0 96       	adiw	r24, 0x30	; 48
     318:	90 93 74 02 	sts	0x0274, r25
     31c:	80 93 73 02 	sts	0x0273, r24
		lcd_wr_char(million);
     320:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
     324:	03 c0       	rjmp	.+6      	; 0x32c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     326:	c4 30       	cpi	r28, 0x04	; 4
     328:	d1 05       	cpc	r29, r1
     32a:	b9 f4       	brne	.+46     	; 0x35a <lcd_print+0x74>
	{
		temp = value/1000;
     32c:	c8 01       	movw	r24, r16
     32e:	68 ee       	ldi	r22, 0xE8	; 232
     330:	73 e0       	ldi	r23, 0x03	; 3
     332:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     336:	cb 01       	movw	r24, r22
     338:	70 93 7e 02 	sts	0x027E, r23
     33c:	60 93 7d 02 	sts	0x027D, r22
		thousand = temp%10 + 48;
     340:	6a e0       	ldi	r22, 0x0A	; 10
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     348:	c0 96       	adiw	r24, 0x30	; 48
     34a:	90 93 9e 02 	sts	0x029E, r25
     34e:	80 93 9d 02 	sts	0x029D, r24
		lcd_wr_char(thousand);
     352:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
		flag=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	01 c0       	rjmp	.+2      	; 0x35c <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     35a:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     35c:	c3 30       	cpi	r28, 0x03	; 3
     35e:	d1 05       	cpc	r29, r1
     360:	11 f0       	breq	.+4      	; 0x366 <lcd_print+0x80>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	b1 f4       	brne	.+44     	; 0x392 <lcd_print+0xac>
	{
		temp = value/100;
     366:	c8 01       	movw	r24, r16
     368:	64 e6       	ldi	r22, 0x64	; 100
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     370:	cb 01       	movw	r24, r22
     372:	70 93 7e 02 	sts	0x027E, r23
     376:	60 93 7d 02 	sts	0x027D, r22
		hundred = temp%10 + 48;
     37a:	6a e0       	ldi	r22, 0x0A	; 10
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	90 93 96 02 	sts	0x0296, r25
     388:	80 93 95 02 	sts	0x0295, r24
		lcd_wr_char(hundred);
     38c:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
		flag=1;
     390:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     392:	c2 30       	cpi	r28, 0x02	; 2
     394:	d1 05       	cpc	r29, r1
     396:	11 f0       	breq	.+4      	; 0x39c <lcd_print+0xb6>
     398:	81 30       	cpi	r24, 0x01	; 1
     39a:	b1 f4       	brne	.+44     	; 0x3c8 <lcd_print+0xe2>
	{
		temp = value/10;
     39c:	2a e0       	ldi	r18, 0x0A	; 10
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	c8 01       	movw	r24, r16
     3a2:	b9 01       	movw	r22, r18
     3a4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     3a8:	cb 01       	movw	r24, r22
     3aa:	70 93 7e 02 	sts	0x027E, r23
     3ae:	60 93 7d 02 	sts	0x027D, r22
		tens = temp%10 + 48;
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     3b8:	c0 96       	adiw	r24, 0x30	; 48
     3ba:	90 93 8a 02 	sts	0x028A, r25
     3be:	80 93 89 02 	sts	0x0289, r24
		lcd_wr_char(tens);
     3c2:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
		flag=1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3c8:	c1 30       	cpi	r28, 0x01	; 1
     3ca:	d1 05       	cpc	r29, r1
     3cc:	11 f0       	breq	.+4      	; 0x3d2 <lcd_print+0xec>
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	61 f4       	brne	.+24     	; 0x3ea <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3d2:	c8 01       	movw	r24, r16
     3d4:	6a e0       	ldi	r22, 0x0A	; 10
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__udivmodhi4>
     3dc:	c0 96       	adiw	r24, 0x30	; 48
     3de:	90 93 9c 02 	sts	0x029C, r25
     3e2:	80 93 9b 02 	sts	0x029B, r24
		lcd_wr_char(unit);
     3e6:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
	}
	if(digits>5)
     3ea:	c6 30       	cpi	r28, 0x06	; 6
     3ec:	d1 05       	cpc	r29, r1
     3ee:	1c f0       	brlt	.+6      	; 0x3f6 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3f0:	85 e4       	ldi	r24, 0x45	; 69
     3f2:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
	}
	
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <lcd_clear>:

lcd_clear()
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
	lcd_wr_command(0x80);
     404:	80 e8       	ldi	r24, 0x80	; 128
     406:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_string("                                        ");
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	d2 e0       	ldi	r29, 0x02	; 2
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 44 01 	call	0x288	; 0x288 <lcd_string>
	lcd_wr_command(0xC0);
     414:	80 ec       	ldi	r24, 0xC0	; 192
     416:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_string("                                        ");
     41a:	ce 01       	movw	r24, r28
     41c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_string>
	lcd_home();
     420:	0e 94 40 01 	call	0x280	; 0x280 <lcd_home>
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <left_encoder_pin_config>:
* Example Call:		left_encoder_pin_config()
*
*/
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     42a:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     42c:	74 9a       	sbi	0x0e, 4	; 14
}
     42e:	08 95       	ret

00000430 <right_encoder_pin_config>:
* Example Call:		right_encoder_pin_config()
*
*/
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     430:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     432:	75 9a       	sbi	0x0e, 5	; 14
}
     434:	08 95       	ret

00000436 <encoder_pin_config>:
* Example Call:		encoder_pin_config()
*
*/
void encoder_pin_config(void)
{
	left_encoder_pin_config(); //left encoder pin config
     436:	0e 94 15 02 	call	0x42a	; 0x42a <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     43a:	0e 94 18 02 	call	0x430	; 0x430 <right_encoder_pin_config>
}
     43e:	08 95       	ret

00000440 <left_position_encoder_interrupt_init>:
* Example Call:		left_position_encoder_interrupt_init()
*
*/
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     440:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     442:	ea e6       	ldi	r30, 0x6A	; 106
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	82 60       	ori	r24, 0x02	; 2
     44a:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     44c:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     44e:	78 94       	sei
}
     450:	08 95       	ret

00000452 <right_position_encoder_interrupt_init>:
* Example Call:		right_position_encoder_interrupt_init()
*
*/
void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     452:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     454:	ea e6       	ldi	r30, 0x6A	; 106
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	88 60       	ori	r24, 0x08	; 8
     45c:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     45e:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     460:	78 94       	sei
}
     462:	08 95       	ret

00000464 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     476:	80 91 38 02 	lds	r24, 0x0238
     47a:	90 91 39 02 	lds	r25, 0x0239
     47e:	a0 91 3a 02 	lds	r26, 0x023A
     482:	b0 91 3b 02 	lds	r27, 0x023B
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a1 1d       	adc	r26, r1
     48a:	b1 1d       	adc	r27, r1
     48c:	80 93 38 02 	sts	0x0238, r24
     490:	90 93 39 02 	sts	0x0239, r25
     494:	a0 93 3a 02 	sts	0x023A, r26
     498:	b0 93 3b 02 	sts	0x023B, r27
}
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     4c0:	80 91 3c 02 	lds	r24, 0x023C
     4c4:	90 91 3d 02 	lds	r25, 0x023D
     4c8:	a0 91 3e 02 	lds	r26, 0x023E
     4cc:	b0 91 3f 02 	lds	r27, 0x023F
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	a1 1d       	adc	r26, r1
     4d4:	b1 1d       	adc	r27, r1
     4d6:	80 93 3c 02 	sts	0x023C, r24
     4da:	90 93 3d 02 	sts	0x023D, r25
     4de:	a0 93 3e 02 	sts	0x023E, r26
     4e2:	b0 93 3f 02 	sts	0x023F, r27
}
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <angle_rotate>:
					by comparing the right/left_shaft to the req_shaft.
* Example Call:		angle_rotate(45)
*
*/
void angle_rotate(unsigned int Degrees)
{
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     4fe:	bc 01       	movw	r22, r24
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     508:	28 e4       	ldi	r18, 0x48	; 72
     50a:	31 ee       	ldi	r19, 0xE1	; 225
     50c:	42 e8       	ldi	r20, 0x82	; 130
     50e:	50 e4       	ldi	r21, 0x40	; 64
     510:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     514:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     520:	10 92 38 02 	sts	0x0238, r1
     524:	10 92 39 02 	sts	0x0239, r1
     528:	10 92 3a 02 	sts	0x023A, r1
     52c:	10 92 3b 02 	sts	0x023B, r1
	ShaftCountLeft = 0;
     530:	10 92 3c 02 	sts	0x023C, r1
     534:	10 92 3d 02 	sts	0x023D, r1
     538:	10 92 3e 02 	sts	0x023E, r1
     53c:	10 92 3f 02 	sts	0x023F, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	40 91 38 02 	lds	r20, 0x0238
     548:	50 91 39 02 	lds	r21, 0x0239
     54c:	60 91 3a 02 	lds	r22, 0x023A
     550:	70 91 3b 02 	lds	r23, 0x023B
     554:	00 91 3c 02 	lds	r16, 0x023C
     558:	10 91 3d 02 	lds	r17, 0x023D
     55c:	20 91 3e 02 	lds	r18, 0x023E
     560:	30 91 3f 02 	lds	r19, 0x023F
     564:	ef 2f       	mov	r30, r31
     566:	48 17       	cp	r20, r24
     568:	59 07       	cpc	r21, r25
     56a:	6a 07       	cpc	r22, r26
     56c:	7b 07       	cpc	r23, r27
     56e:	08 f4       	brcc	.+2      	; 0x572 <angle_rotate+0x7a>
     570:	ec 2f       	mov	r30, r28
     572:	ee 23       	and	r30, r30
     574:	49 f4       	brne	.+18     	; 0x588 <angle_rotate+0x90>
     576:	4f 2f       	mov	r20, r31
     578:	08 17       	cp	r16, r24
     57a:	19 07       	cpc	r17, r25
     57c:	2a 07       	cpc	r18, r26
     57e:	3b 07       	cpc	r19, r27
     580:	08 f4       	brcc	.+2      	; 0x584 <angle_rotate+0x8c>
     582:	4c 2f       	mov	r20, r28
     584:	44 23       	and	r20, r20
     586:	f1 f2       	breq	.-68     	; 0x544 <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     588:	0e 94 72 06 	call	0xce4	; 0xce4 <stop>
}
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     594:	bc 01       	movw	r22, r24
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     59e:	25 ee       	ldi	r18, 0xE5	; 229
     5a0:	30 ed       	ldi	r19, 0xD0	; 208
     5a2:	4a ea       	ldi	r20, 0xAA	; 170
     5a4:	50 e4       	ldi	r21, 0x40	; 64
     5a6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     5aa:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     5ae:	46 2f       	mov	r20, r22
     5b0:	57 2f       	mov	r21, r23
     5b2:	68 2f       	mov	r22, r24
     5b4:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     5b6:	10 92 38 02 	sts	0x0238, r1
     5ba:	10 92 39 02 	sts	0x0239, r1
     5be:	10 92 3a 02 	sts	0x023A, r1
     5c2:	10 92 3b 02 	sts	0x023B, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     5c6:	80 91 38 02 	lds	r24, 0x0238
     5ca:	90 91 39 02 	lds	r25, 0x0239
     5ce:	a0 91 3a 02 	lds	r26, 0x023A
     5d2:	b0 91 3b 02 	lds	r27, 0x023B
     5d6:	48 17       	cp	r20, r24
     5d8:	59 07       	cpc	r21, r25
     5da:	6a 07       	cpc	r22, r26
     5dc:	7b 07       	cpc	r23, r27
     5de:	98 f7       	brcc	.-26     	; 0x5c6 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     5e0:	0e 94 72 06 	call	0xce4	; 0xce4 <stop>
}
     5e4:	08 95       	ret

000005e6 <servo_pin_config>:
* Example Call:		servo_pin_config();
*
*/
void servo_pin_config(void)
{
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     5e6:	0e 94 95 00 	call	0x12a	; 0x12a <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     5ea:	0e 94 98 00 	call	0x130	; 0x130 <servo2_pin_config>
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     5ee:	0e 94 9b 00 	call	0x136	; 0x136 <servo3_pin_config>
}
     5f2:	08 95       	ret

000005f4 <servo_1>:
*/
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     5f4:	10 92 89 00 	sts	0x0089, r1
*
*/
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     5f8:	68 2f       	mov	r22, r24
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     604:	2b e7       	ldi	r18, 0x7B	; 123
     606:	34 e1       	ldi	r19, 0x14	; 20
     608:	4e ee       	ldi	r20, 0xEE	; 238
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	4c e0       	ldi	r20, 0x0C	; 12
     616:	52 e4       	ldi	r21, 0x42	; 66
     618:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     61c:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     620:	60 93 88 00 	sts	0x0088, r22
}
     624:	08 95       	ret

00000626 <servo_2>:
*/
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     626:	10 92 8b 00 	sts	0x008B, r1
*
*/
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     62a:	68 2f       	mov	r22, r24
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     636:	2b e7       	ldi	r18, 0x7B	; 123
     638:	34 e1       	ldi	r19, 0x14	; 20
     63a:	4e ee       	ldi	r20, 0xEE	; 238
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	4c e0       	ldi	r20, 0x0C	; 12
     648:	52 e4       	ldi	r21, 0x42	; 66
     64a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     64e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     652:	60 93 8a 00 	sts	0x008A, r22
}
     656:	08 95       	ret

00000658 <servo_3>:
*/
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     658:	10 92 8d 00 	sts	0x008D, r1
*
*/
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
     65c:	68 2f       	mov	r22, r24
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     668:	2b e7       	ldi	r18, 0x7B	; 123
     66a:	34 e1       	ldi	r19, 0x14	; 20
     66c:	4e ee       	ldi	r20, 0xEE	; 238
     66e:	5f e3       	ldi	r21, 0x3F	; 63
     670:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	4c e0       	ldi	r20, 0x0C	; 12
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
     680:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     684:	60 93 8c 00 	sts	0x008C, r22
}
     688:	08 95       	ret

0000068a <servo_1_free>:
* Example Call:		servo_1_free();
*
*/
void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	80 93 88 00 	sts	0x0088, r24
}
     696:	08 95       	ret

00000698 <servo_2_free>:
* Example Call:		servo_2_free();
*
*/
void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     69e:	8f ef       	ldi	r24, 0xFF	; 255
     6a0:	80 93 8a 00 	sts	0x008A, r24
}
     6a4:	08 95       	ret

000006a6 <servo_3_free>:
* Example Call:		servo_3_free();
*
*/
void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	80 93 8c 00 	sts	0x008C, r24
} 
     6b2:	08 95       	ret

000006b4 <rotateServo_1AntiClockWise>:
* Example Call:		rotateServo_1AntiClockWise(45,45);
*
*/
void rotateServo_1AntiClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 1 in anti-clockwise direction with a slower speed, 
																				     Therefore, intialAngle>=degrees*/
{
     6b4:	8f 92       	push	r8
     6b6:	9f 92       	push	r9
     6b8:	af 92       	push	r10
     6ba:	bf 92       	push	r11
     6bc:	df 92       	push	r13
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     6d6:	2b e7       	ldi	r18, 0x7B	; 123
     6d8:	34 e1       	ldi	r19, 0x14	; 20
     6da:	4e ee       	ldi	r20, 0xEE	; 238
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	4c e0       	ldi	r20, 0x0C	; 12
     6e8:	52 e4       	ldi	r21, 0x42	; 66
     6ea:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     6ee:	06 2f       	mov	r16, r22
     6f0:	a7 2e       	mov	r10, r23
     6f2:	88 2e       	mov	r8, r24
     6f4:	d6 2e       	mov	r13, r22
     6f6:	e7 2e       	mov	r14, r23
     6f8:	f8 2e       	mov	r15, r24
     6fa:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     6fc:	6c 2f       	mov	r22, r28
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     708:	2b e7       	ldi	r18, 0x7B	; 123
     70a:	34 e1       	ldi	r19, 0x14	; 20
     70c:	4e ee       	ldi	r20, 0xEE	; 238
     70e:	5f e3       	ldi	r21, 0x3F	; 63
     710:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4c e0       	ldi	r20, 0x0C	; 12
     71a:	52 e4       	ldi	r21, 0x42	; 66
     71c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     720:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     724:	c6 2f       	mov	r28, r22
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     730:	1a 2d       	mov	r17, r10
     732:	28 2d       	mov	r18, r8
     734:	3d 2f       	mov	r19, r29
     736:	a9 01       	movw	r20, r18
     738:	98 01       	movw	r18, r16
     73a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     73e:	88 23       	and	r24, r24
     740:	34 f1       	brlt	.+76     	; 0x78e <rotateServo_1AntiClockWise+0xda>
	{
		OCR1AH = 0x00;
     742:	0f 2e       	mov	r0, r31
     744:	f9 e8       	ldi	r31, 0x89	; 137
     746:	af 2e       	mov	r10, r31
     748:	bb 24       	eor	r11, r11
     74a:	f0 2d       	mov	r31, r0
		OCR1AL = (unsigned char) i;
     74c:	0f 2e       	mov	r0, r31
     74e:	f8 e8       	ldi	r31, 0x88	; 136
     750:	8f 2e       	mov	r8, r31
     752:	99 24       	eor	r9, r9
     754:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
	{
		OCR1AH = 0x00;
     756:	d5 01       	movw	r26, r10
     758:	1c 92       	st	X, r1
		OCR1AL = (unsigned char) i;
     75a:	f4 01       	movw	r30, r8
     75c:	c0 83       	st	Z, r28
     75e:	86 e6       	ldi	r24, 0x66	; 102
     760:	96 ee       	ldi	r25, 0xE6	; 230
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	81 50       	subi	r24, 0x01	; 1
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	a0 40       	sbci	r26, 0x00	; 0
     76a:	e1 f7       	brne	.-8      	; 0x764 <rotateServo_1AntiClockWise+0xb0>
																				     Therefore, intialAngle>=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     76c:	c1 50       	subi	r28, 0x01	; 1
     76e:	6c 2f       	mov	r22, r28
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     77a:	0d 2d       	mov	r16, r13
     77c:	1e 2d       	mov	r17, r14
     77e:	2f 2d       	mov	r18, r15
     780:	3d 2f       	mov	r19, r29
     782:	a9 01       	movw	r20, r18
     784:	98 01       	movw	r18, r16
     786:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     78a:	88 23       	and	r24, r24
     78c:	24 f7       	brge	.-56     	; 0x756 <rotateServo_1AntiClockWise+0xa2>
	{
		OCR1AH = 0x00;
		OCR1AL = (unsigned char) i;
		_delay_ms(20);
	}
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret

000007a6 <rotateServo_1ClockWise>:
* Example Call:		rotateServo_1ClockWise(45,45);
*
*/
void rotateServo_1ClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 2 in clockwise direction with a slower speed, 
																				 Therefore, intialAngle<=degrees*/
{
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     7c8:	2b e7       	ldi	r18, 0x7B	; 123
     7ca:	34 e1       	ldi	r19, 0x14	; 20
     7cc:	4e ee       	ldi	r20, 0xEE	; 238
     7ce:	5f e3       	ldi	r21, 0x3F	; 63
     7d0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	4c e0       	ldi	r20, 0x0C	; 12
     7da:	52 e4       	ldi	r21, 0x42	; 66
     7dc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     7e0:	06 2f       	mov	r16, r22
     7e2:	a7 2e       	mov	r10, r23
     7e4:	88 2e       	mov	r8, r24
     7e6:	d6 2e       	mov	r13, r22
     7e8:	e7 2e       	mov	r14, r23
     7ea:	f8 2e       	mov	r15, r24
     7ec:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     7ee:	6c 2f       	mov	r22, r28
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     7fa:	2b e7       	ldi	r18, 0x7B	; 123
     7fc:	34 e1       	ldi	r19, 0x14	; 20
     7fe:	4e ee       	ldi	r20, 0xEE	; 238
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	4c e0       	ldi	r20, 0x0C	; 12
     80c:	52 e4       	ldi	r21, 0x42	; 66
     80e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     812:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     816:	c6 2f       	mov	r28, r22
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     822:	1a 2d       	mov	r17, r10
     824:	28 2d       	mov	r18, r8
     826:	3d 2f       	mov	r19, r29
     828:	a9 01       	movw	r20, r18
     82a:	98 01       	movw	r18, r16
     82c:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpsf2>
     830:	18 16       	cp	r1, r24
     832:	34 f1       	brlt	.+76     	; 0x880 <rotateServo_1ClockWise+0xda>
	{
		OCR1AH = 0x00;
     834:	0f 2e       	mov	r0, r31
     836:	f9 e8       	ldi	r31, 0x89	; 137
     838:	af 2e       	mov	r10, r31
     83a:	bb 24       	eor	r11, r11
     83c:	f0 2d       	mov	r31, r0
		OCR1AL = (unsigned char) i;
     83e:	0f 2e       	mov	r0, r31
     840:	f8 e8       	ldi	r31, 0x88	; 136
     842:	8f 2e       	mov	r8, r31
     844:	99 24       	eor	r9, r9
     846:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
	{
		OCR1AH = 0x00;
     848:	d5 01       	movw	r26, r10
     84a:	1c 92       	st	X, r1
		OCR1AL = (unsigned char) i;
     84c:	f4 01       	movw	r30, r8
     84e:	c0 83       	st	Z, r28
     850:	86 e6       	ldi	r24, 0x66	; 102
     852:	96 ee       	ldi	r25, 0xE6	; 230
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	81 50       	subi	r24, 0x01	; 1
     858:	90 40       	sbci	r25, 0x00	; 0
     85a:	a0 40       	sbci	r26, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <rotateServo_1ClockWise+0xb0>
																				 Therefore, intialAngle<=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     85e:	cf 5f       	subi	r28, 0xFF	; 255
     860:	6c 2f       	mov	r22, r28
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     86c:	0d 2d       	mov	r16, r13
     86e:	1e 2d       	mov	r17, r14
     870:	2f 2d       	mov	r18, r15
     872:	3d 2f       	mov	r19, r29
     874:	a9 01       	movw	r20, r18
     876:	98 01       	movw	r18, r16
     878:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpsf2>
     87c:	18 16       	cp	r1, r24
     87e:	24 f7       	brge	.-56     	; 0x848 <rotateServo_1ClockWise+0xa2>
	{
		OCR1AH = 0x00;
		OCR1AL = (unsigned char) i;
		_delay_ms(20);
	}
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	08 95       	ret

00000898 <rotateServo_2AntiClockWise>:
* Example Call:		rotateServo_2AntiClockWise(45,45);
*
*/
void rotateServo_2AntiClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 1 in anti-clockwise direction with a slower speed, 
																				     Therefore, intialAngle>=degrees*/
{
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     8ba:	2b e7       	ldi	r18, 0x7B	; 123
     8bc:	34 e1       	ldi	r19, 0x14	; 20
     8be:	4e ee       	ldi	r20, 0xEE	; 238
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	4c e0       	ldi	r20, 0x0C	; 12
     8cc:	52 e4       	ldi	r21, 0x42	; 66
     8ce:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     8d2:	06 2f       	mov	r16, r22
     8d4:	a7 2e       	mov	r10, r23
     8d6:	88 2e       	mov	r8, r24
     8d8:	d6 2e       	mov	r13, r22
     8da:	e7 2e       	mov	r14, r23
     8dc:	f8 2e       	mov	r15, r24
     8de:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     8e0:	6c 2f       	mov	r22, r28
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     8ec:	2b e7       	ldi	r18, 0x7B	; 123
     8ee:	34 e1       	ldi	r19, 0x14	; 20
     8f0:	4e ee       	ldi	r20, 0xEE	; 238
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4c e0       	ldi	r20, 0x0C	; 12
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     904:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     908:	c6 2f       	mov	r28, r22
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     914:	1a 2d       	mov	r17, r10
     916:	28 2d       	mov	r18, r8
     918:	3d 2f       	mov	r19, r29
     91a:	a9 01       	movw	r20, r18
     91c:	98 01       	movw	r18, r16
     91e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     922:	88 23       	and	r24, r24
     924:	34 f1       	brlt	.+76     	; 0x972 <rotateServo_2AntiClockWise+0xda>
	{
		OCR1BH = 0x00;
     926:	0f 2e       	mov	r0, r31
     928:	fb e8       	ldi	r31, 0x8B	; 139
     92a:	af 2e       	mov	r10, r31
     92c:	bb 24       	eor	r11, r11
     92e:	f0 2d       	mov	r31, r0
		OCR1BL = (unsigned char) i;
     930:	0f 2e       	mov	r0, r31
     932:	fa e8       	ldi	r31, 0x8A	; 138
     934:	8f 2e       	mov	r8, r31
     936:	99 24       	eor	r9, r9
     938:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
	{
		OCR1BH = 0x00;
     93a:	d5 01       	movw	r26, r10
     93c:	1c 92       	st	X, r1
		OCR1BL = (unsigned char) i;
     93e:	f4 01       	movw	r30, r8
     940:	c0 83       	st	Z, r28
     942:	86 e6       	ldi	r24, 0x66	; 102
     944:	96 ee       	ldi	r25, 0xE6	; 230
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	81 50       	subi	r24, 0x01	; 1
     94a:	90 40       	sbci	r25, 0x00	; 0
     94c:	a0 40       	sbci	r26, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <rotateServo_2AntiClockWise+0xb0>
																				     Therefore, intialAngle>=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     950:	c1 50       	subi	r28, 0x01	; 1
     952:	6c 2f       	mov	r22, r28
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     95e:	0d 2d       	mov	r16, r13
     960:	1e 2d       	mov	r17, r14
     962:	2f 2d       	mov	r18, r15
     964:	3d 2f       	mov	r19, r29
     966:	a9 01       	movw	r20, r18
     968:	98 01       	movw	r18, r16
     96a:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__gesf2>
     96e:	88 23       	and	r24, r24
     970:	24 f7       	brge	.-56     	; 0x93a <rotateServo_2AntiClockWise+0xa2>
	{
		OCR1BH = 0x00;
		OCR1BL = (unsigned char) i;
		_delay_ms(20);
	}
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	08 95       	ret

0000098a <rotateServo_2ClockWise>:
* Example Call:		rotateServo_2ClockWise(45,45);
*
*/
void rotateServo_2ClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 2 in clockwise direction with a slower speed, 
																				 Therefore, intialAngle<=degrees*/
{
     98a:	8f 92       	push	r8
     98c:	9f 92       	push	r9
     98e:	af 92       	push	r10
     990:	bf 92       	push	r11
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     9ac:	2b e7       	ldi	r18, 0x7B	; 123
     9ae:	34 e1       	ldi	r19, 0x14	; 20
     9b0:	4e ee       	ldi	r20, 0xEE	; 238
     9b2:	5f e3       	ldi	r21, 0x3F	; 63
     9b4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	4c e0       	ldi	r20, 0x0C	; 12
     9be:	52 e4       	ldi	r21, 0x42	; 66
     9c0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     9c4:	06 2f       	mov	r16, r22
     9c6:	a7 2e       	mov	r10, r23
     9c8:	88 2e       	mov	r8, r24
     9ca:	d6 2e       	mov	r13, r22
     9cc:	e7 2e       	mov	r14, r23
     9ce:	f8 2e       	mov	r15, r24
     9d0:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     9d2:	6c 2f       	mov	r22, r28
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 af 0c 	call	0x195e	; 0x195e <__floatunsisf>
     9de:	2b e7       	ldi	r18, 0x7B	; 123
     9e0:	34 e1       	ldi	r19, 0x14	; 20
     9e2:	4e ee       	ldi	r20, 0xEE	; 238
     9e4:	5f e3       	ldi	r21, 0x3F	; 63
     9e6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__divsf3>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	4c e0       	ldi	r20, 0x0C	; 12
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <__addsf3>
     9f6:	0e 94 83 0c 	call	0x1906	; 0x1906 <__fixunssfsi>
     9fa:	c6 2f       	mov	r28, r22
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     a06:	1a 2d       	mov	r17, r10
     a08:	28 2d       	mov	r18, r8
     a0a:	3d 2f       	mov	r19, r29
     a0c:	a9 01       	movw	r20, r18
     a0e:	98 01       	movw	r18, r16
     a10:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpsf2>
     a14:	18 16       	cp	r1, r24
     a16:	34 f1       	brlt	.+76     	; 0xa64 <rotateServo_2ClockWise+0xda>
	{
		OCR1BH = 0x00;
     a18:	0f 2e       	mov	r0, r31
     a1a:	fb e8       	ldi	r31, 0x8B	; 139
     a1c:	af 2e       	mov	r10, r31
     a1e:	bb 24       	eor	r11, r11
     a20:	f0 2d       	mov	r31, r0
		OCR1BL = (unsigned char) i;
     a22:	0f 2e       	mov	r0, r31
     a24:	fa e8       	ldi	r31, 0x8A	; 138
     a26:	8f 2e       	mov	r8, r31
     a28:	99 24       	eor	r9, r9
     a2a:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
	{
		OCR1BH = 0x00;
     a2c:	d5 01       	movw	r26, r10
     a2e:	1c 92       	st	X, r1
		OCR1BL = (unsigned char) i;
     a30:	f4 01       	movw	r30, r8
     a32:	c0 83       	st	Z, r28
     a34:	86 e6       	ldi	r24, 0x66	; 102
     a36:	96 ee       	ldi	r25, 0xE6	; 230
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	a0 40       	sbci	r26, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <rotateServo_2ClockWise+0xb0>
																				 Therefore, intialAngle<=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     a42:	cf 5f       	subi	r28, 0xFF	; 255
     a44:	6c 2f       	mov	r22, r28
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__floatsisf>
     a50:	0d 2d       	mov	r16, r13
     a52:	1e 2d       	mov	r17, r14
     a54:	2f 2d       	mov	r18, r15
     a56:	3d 2f       	mov	r19, r29
     a58:	a9 01       	movw	r20, r18
     a5a:	98 01       	movw	r18, r16
     a5c:	0e 94 17 0c 	call	0x182e	; 0x182e <__cmpsf2>
     a60:	18 16       	cp	r1, r24
     a62:	24 f7       	brge	.-56     	; 0xa2c <rotateServo_2ClockWise+0xa2>
	{
		OCR1BH = 0x00;
		OCR1BL = (unsigned char) i;
		_delay_ms(20);
	}
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
     a7a:	08 95       	ret

00000a7c <motion_pin_config>:
* Example Call:		motion_pin_config();
*
*/
void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;   //set direction of the PORTA 3 to PORTA 0 pins as output
     a7c:	81 b1       	in	r24, 0x01	; 1
     a7e:	8f 60       	ori	r24, 0x0F	; 15
     a80:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     a82:	82 b1       	in	r24, 0x02	; 2
     a84:	80 7f       	andi	r24, 0xF0	; 240
     a86:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     a88:	ea e0       	ldi	r30, 0x0A	; 10
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	80 81       	ld	r24, Z
     a8e:	88 61       	ori	r24, 0x18	; 24
     a90:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     a92:	eb e0       	ldi	r30, 0x0B	; 11
     a94:	f1 e0       	ldi	r31, 0x01	; 1
     a96:	80 81       	ld	r24, Z
     a98:	88 61       	ori	r24, 0x18	; 24
     a9a:	80 83       	st	Z, r24
}
     a9c:	08 95       	ret

00000a9e <spi_pin_config>:
* Example Call:		spi_pin_config();
*
*/
void spi_pin_config (void)
{
 DDRB = DDRB | 0x07;
     a9e:	84 b1       	in	r24, 0x04	; 4
     aa0:	87 60       	ori	r24, 0x07	; 7
     aa2:	84 b9       	out	0x04, r24	; 4
 PORTB = PORTB | 0x07;
     aa4:	85 b1       	in	r24, 0x05	; 5
     aa6:	87 60       	ori	r24, 0x07	; 7
     aa8:	85 b9       	out	0x05, r24	; 5
}
     aaa:	08 95       	ret

00000aac <lcd_port_config>:
* Example Call:		lcd_port_config();
*
*/
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     aac:	87 b1       	in	r24, 0x07	; 7
     aae:	87 6f       	ori	r24, 0xF7	; 247
     ab0:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     ab2:	88 b1       	in	r24, 0x08	; 8
     ab4:	80 78       	andi	r24, 0x80	; 128
     ab6:	88 b9       	out	0x08, r24	; 8
}
     ab8:	08 95       	ret

00000aba <buzzer_pin_config>:
* Example Call:		buzzer_pin_config();
*
*/ 
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     aba:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     abc:	43 98       	cbi	0x08, 3	; 8
}
     abe:	08 95       	ret

00000ac0 <adc_pin_config>:
* Example Call:		adc_pin_config();
*
*/
void adc_pin_config (void)
{
 DDRF = 0x00;  //set PORTF direction as input
     ac0:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     ac2:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;  //set PORTK direction as input
     ac4:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     ac8:	10 92 08 01 	sts	0x0108, r1
}
     acc:	08 95       	ret

00000ace <pwm_port_config>:
* Example Call:		pwm_port_config();
*
*/
void pwm_port_config (void)
{
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     ace:	ea e0       	ldi	r30, 0x0A	; 10
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	80 81       	ld	r24, Z
     ad4:	88 61       	ori	r24, 0x18	; 24
     ad6:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     ad8:	eb e0       	ldi	r30, 0x0B	; 11
     ada:	f1 e0       	ldi	r31, 0x01	; 1
     adc:	80 81       	ld	r24, Z
     ade:	88 61       	ori	r24, 0x18	; 24
     ae0:	80 83       	st	Z, r24
}
     ae2:	08 95       	ret

00000ae4 <port_init>:
* Example Call:		port_init();
*
*/
void port_init(void)
{
 motion_pin_config();
     ae4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <motion_pin_config>
 servo1_pin_config();
     ae8:	0e 94 95 00 	call	0x12a	; 0x12a <servo1_pin_config>
 servo2_pin_config();
     aec:	0e 94 98 00 	call	0x130	; 0x130 <servo2_pin_config>
 servo3_pin_config();
     af0:	0e 94 9b 00 	call	0x136	; 0x136 <servo3_pin_config>
 spi_pin_config();
     af4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <spi_pin_config>
 lcd_port_config();
     af8:	0e 94 56 05 	call	0xaac	; 0xaac <lcd_port_config>
 buzzer_pin_config();           
     afc:	0e 94 5d 05 	call	0xaba	; 0xaba <buzzer_pin_config>
 left_encoder_pin_config();
     b00:	0e 94 15 02 	call	0x42a	; 0x42a <left_encoder_pin_config>
 right_encoder_pin_config();
     b04:	0e 94 18 02 	call	0x430	; 0x430 <right_encoder_pin_config>
 adc_pin_config();
     b08:	0e 94 60 05 	call	0xac0	; 0xac0 <adc_pin_config>
 pwm_port_config();
     b0c:	0e 94 67 05 	call	0xace	; 0xace <pwm_port_config>
 encoder_pin_config(); //position encoder pin config 	
     b10:	0e 94 1b 02 	call	0x436	; 0x436 <encoder_pin_config>
}
     b14:	08 95       	ret

00000b16 <timer5_init>:
* Example Call:		timer5_init();
*
*/
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     b16:	e1 e2       	ldi	r30, 0x21	; 33
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     b28:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     b2c:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     b30:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     b34:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     b38:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     b3c:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b40:	89 ea       	ldi	r24, 0xA9	; 169
     b42:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b46:	8b e0       	ldi	r24, 0x0B	; 11
     b48:	80 83       	st	Z, r24
}
     b4a:	08 95       	ret

00000b4c <timer1_init>:
* Example Call:		timer1_init();
*
*/
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     b4c:	e1 e8       	ldi	r30, 0x81	; 129
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //setup
     b52:	8c ef       	ldi	r24, 0xFC	; 252
     b54:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;
     b6a:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;
     b6e:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x00;
     b72:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = 0x00;
     b76:	10 92 8c 00 	sts	0x008C, r1
 //ICR1H  = 0x03;
 //ICR1L  = 0xFF;
 TCCR1A = 0xA3;
     b7a:	83 ea       	ldi	r24, 0xA3	; 163
     b7c:	80 93 80 00 	sts	0x0080, r24
 TCCR1C = 0x00;
     b80:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //start Timer
     b84:	8c e0       	ldi	r24, 0x0C	; 12
     b86:	80 83       	st	Z, r24
}
     b88:	08 95       	ret

00000b8a <uart2_init>:
// desired baud rate:115200
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     b8a:	e1 ed       	ldi	r30, 0xD1	; 209
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     b90:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2H = 0x00; //set baud rate hi
     b9a:	10 92 d5 00 	sts	0x00D5, r1
 UBRR2L = 0x07; //set baud rate lo
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	80 93 d4 00 	sts	0x00D4, r24
 UCSR2B = 0x98;
     ba4:	88 e9       	ldi	r24, 0x98	; 152
     ba6:	80 83       	st	Z, r24
}
     ba8:	08 95       	ret

00000baa <spi_init>:
*/
//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
 SPCR = 0x53; //setup SPI
     baa:	83 e5       	ldi	r24, 0x53	; 83
     bac:	8c bd       	out	0x2c, r24	; 44
 SPSR = 0x00; //setup SPI
     bae:	1d bc       	out	0x2d, r1	; 45
 SPDR = 0x00;
     bb0:	1e bc       	out	0x2e, r1	; 46
}
     bb2:	08 95       	ret

00000bb4 <adc_init>:
* Example Call:		adc_init();
*
*/
void adc_init(void)
{
	ADCSRA = 0x00;
     bb4:	ea e7       	ldi	r30, 0x7A	; 122
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     bba:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     bc4:	80 e8       	ldi	r24, 0x80	; 128
     bc6:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     bc8:	86 e8       	ldi	r24, 0x86	; 134
     bca:	80 83       	st	Z, r24
}
     bcc:	08 95       	ret

00000bce <ADC_Conversion>:
*
*/
unsigned char ADC_Conversion(unsigned char ch)
{
unsigned char a;
 if(ch>7)
     bce:	88 30       	cpi	r24, 0x08	; 8
     bd0:	18 f0       	brcs	.+6      	; 0xbd8 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     bd2:	98 e0       	ldi	r25, 0x08	; 8
     bd4:	90 93 7b 00 	sts	0x007B, r25
	}
 ch = ch & 0x07;			  //Store only 3 LSB bits
     bd8:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
     bda:	80 62       	ori	r24, 0x20	; 32
     bdc:	80 93 7c 00 	sts	0x007C, r24
 ADC_flag = 0x00; 			  //Clear the user defined flag
     be0:	10 92 6e 02 	sts	0x026E, r1
 ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
     be4:	ea e7       	ldi	r30, 0x7A	; 122
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	80 83       	st	Z, r24
 while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
     bee:	80 81       	ld	r24, Z
     bf0:	84 ff       	sbrs	r24, 4
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <ADC_Conversion+0x20>
 a=ADCH;
     bf4:	80 91 79 00 	lds	r24, 0x0079
 ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     bf8:	ea e7       	ldi	r30, 0x7A	; 122
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	90 81       	ld	r25, Z
     bfe:	90 61       	ori	r25, 0x10	; 16
     c00:	90 83       	st	Z, r25
 ADCSRB = 0x00;
     c02:	10 92 7b 00 	sts	0x007B, r1
 return a;
}
     c06:	08 95       	ret

00000c08 <spi_master_tx_and_rx>:
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
 unsigned char rx_data = 0;

 PORTB = PORTB & 0xFE;        // make SS pin low
     c08:	28 98       	cbi	0x05, 0	; 5
 SPDR = data;
     c0a:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
     c0c:	0d b4       	in	r0, 0x2d	; 45
     c0e:	07 fe       	sbrs	r0, 7
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <spi_master_tx_and_rx+0x4>
     c12:	86 e6       	ldi	r24, 0x66	; 102
     c14:	9e e0       	ldi	r25, 0x0E	; 14
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <spi_master_tx_and_rx+0xe>
     c1a:	00 00       	nop

 _delay_ms(1);                //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
     c1c:	80 e5       	ldi	r24, 0x50	; 80
     c1e:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
     c20:	0d b4       	in	r0, 0x2d	; 45
     c22:	07 fe       	sbrs	r0, 7
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <spi_master_tx_and_rx+0x18>
 rx_data = SPDR;
     c26:	8e b5       	in	r24, 0x2e	; 46
 PORTB = PORTB | 0x01;        // make SS high
     c28:	28 9a       	sbi	0x05, 0	; 5
 return rx_data;
}
     c2a:	08 95       	ret

00000c2c <sensor_data_interpretation>:
*
*/
void sensor_data_interpretation(void) 
{
 
 WL_LEFT = ADC_Conversion(3);
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c32:	80 93 6f 02 	sts	0x026F, r24
  
 WL_CENTER = ADC_Conversion(2);
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c3c:	80 93 79 02 	sts	0x0279, r24
  
 WL_RIGHT = ADC_Conversion(1);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c46:	80 93 78 02 	sts	0x0278, r24
 
 IR1 = ADC_Conversion(4); 
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c50:	80 93 88 02 	sts	0x0288, r24
 
 IR2 = ADC_Conversion(5);
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c5a:	80 93 72 02 	sts	0x0272, r24
 
 IR3 = ADC_Conversion(6);
     c5e:	86 e0       	ldi	r24, 0x06	; 6
     c60:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c64:	80 93 7c 02 	sts	0x027C, r24
  
 IR4 = ADC_Conversion(7);
     c68:	87 e0       	ldi	r24, 0x07	; 7
     c6a:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c6e:	80 93 8b 02 	sts	0x028B, r24

 IR5 = ADC_Conversion(8);
     c72:	88 e0       	ldi	r24, 0x08	; 8
     c74:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     c78:	80 93 6d 02 	sts	0x026D, r24
 
 IR6 = spi_master_tx_and_rx(5);  
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	0e 94 04 06 	call	0xc08	; 0xc08 <spi_master_tx_and_rx>
     c82:	80 93 a4 02 	sts	0x02A4, r24
 
 IR7 = spi_master_tx_and_rx (6); 
     c86:	86 e0       	ldi	r24, 0x06	; 6
     c88:	0e 94 04 06 	call	0xc08	; 0xc08 <spi_master_tx_and_rx>
     c8c:	80 93 90 02 	sts	0x0290, r24
 
 IR8 = spi_master_tx_and_rx (7);
     c90:	87 e0       	ldi	r24, 0x07	; 7
     c92:	0e 94 04 06 	call	0xc08	; 0xc08 <spi_master_tx_and_rx>
     c96:	80 93 7f 02 	sts	0x027F, r24
 
 SHARP_1 = ADC_Conversion(9);
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     ca0:	80 93 a1 02 	sts	0x02A1, r24
 
 SHARP_2 = ADC_Conversion(10);
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     caa:	80 93 9a 02 	sts	0x029A, r24
 
 SHARP_3 = ADC_Conversion(11);
     cae:	8b e0       	ldi	r24, 0x0B	; 11
     cb0:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     cb4:	80 93 6c 02 	sts	0x026C, r24
 
 SHARP_4 = ADC_Conversion(12);
     cb8:	8c e0       	ldi	r24, 0x0C	; 12
     cba:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     cbe:	80 93 8e 02 	sts	0x028E, r24
 
 SHARP_5 = ADC_Conversion(13);
     cc2:	8d e0       	ldi	r24, 0x0D	; 13
     cc4:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     cc8:	80 93 82 02 	sts	0x0282, r24
 
 BATT_VALUE = ADC_Conversion(0);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_Conversion>
     cd2:	80 93 8f 02 	sts	0x028F, r24
  
}
     cd6:	08 95       	ret

00000cd8 <motion_set>:
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
 ucPortARestore = PORTA;         // reading the PORTA original status
     cd8:	92 b1       	in	r25, 0x02	; 2
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
     cda:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
     cdc:	8f 70       	andi	r24, 0x0F	; 15
 ucPortARestore = PORTA;         // reading the PORTA original status
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
 ucPortARestore |= ucDirection;  // adding lower nibbel for forward command and restoring the PORTA status
     cde:	98 2b       	or	r25, r24
 PORTA = ucPortARestore;         // executing the command
     ce0:	92 b9       	out	0x02, r25	; 2
}
     ce2:	08 95       	ret

00000ce4 <stop>:
* Example Call:		stop();
*
*/
void stop(void)
{
  motion_set(0x00);
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <motion_set>
}
     cea:	08 95       	ret

00000cec <forward>:
* Example Call:		forward();
*
*/
void forward(void) 
{ 
 motion_set(0x06);
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <motion_set>
}
     cf2:	08 95       	ret

00000cf4 <back>:
* Example Call:		back();
*
*/
void back(void)  
{
  motion_set(0x09);  
     cf4:	89 e0       	ldi	r24, 0x09	; 9
     cf6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <motion_set>
}
     cfa:	08 95       	ret

00000cfc <left>:
* Example Call:		left();
*
*/
void left(void)  
{
  motion_set(0x05);
     cfc:	85 e0       	ldi	r24, 0x05	; 5
     cfe:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <motion_set>
}
     d02:	08 95       	ret

00000d04 <right>:
* Example Call:		right();
*
*/
void right(void)
{
  motion_set(0x0A);
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <motion_set>
}
     d0a:	08 95       	ret

00000d0c <buzzer_on>:
void buzzer_on(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore |= 0x08; // setting the bit to turn on the buzzer
 PORTC = portc_restore; // executing the command
     d0c:	43 9a       	sbi	0x08, 3	; 8
}
     d0e:	08 95       	ret

00000d10 <buzzer_off>:
void buzzer_off(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore &= 0xF7; // resetting the bit to turn off the buzzer
 PORTC = portc_restore; // executing the command
     d10:	43 98       	cbi	0x08, 3	; 8
}
     d12:	08 95       	ret

00000d14 <velocity>:
* Example Call:		velocity(250,250);
*
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d14:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d18:	60 93 2a 01 	sts	0x012A, r22
}
     d1c:	08 95       	ret

00000d1e <forward_mm>:
* Logic:			Calls the function forward() and linear_distance_mm(DistanceInMM) to perform the desired task
* Example Call:		forward_mm(45);
*
*/
void forward_mm(unsigned int DistanceInMM)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
	forward();
     d24:	0e 94 76 06 	call	0xcec	; 0xcec <forward>
	linear_distance_mm(DistanceInMM);
     d28:	ce 01       	movw	r24, r28
     d2a:	0e 94 ca 02 	call	0x594	; 0x594 <linear_distance_mm>
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <backward_mm>:
* Logic:			Calls the function backward() and linear_distance_mm(DistanceInMM) to perform the desired task
* Example Call:		backward_mm(45);
*
*/
void backward_mm(unsigned int DistanceInMM)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
	back();
     d3a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <back>
	linear_distance_mm(DistanceInMM);
     d3e:	ce 01       	movw	r24, r28
     d40:	0e 94 ca 02 	call	0x594	; 0x594 <linear_distance_mm>
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <left_degrees>:
* Logic:			Calls the function sharp_left() and angle_rotate(Degrees) to perform the desired task
* Example Call:		left_degrees(45);
*
*/
void left_degrees(unsigned int Degrees)
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     d50:	0e 94 7e 06 	call	0xcfc	; 0xcfc <left>
	angle_rotate(Degrees);
     d54:	ce 01       	movw	r24, r28
     d56:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <right_degrees>:
* Logic:			Calls the function sharp_right() and angle_rotate(Degrees) to perform the desired task
* Example Call:		right_degrees(45);
*
*/
void right_degrees(unsigned int Degrees)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     d66:	0e 94 82 06 	call	0xd04	; 0xd04 <right>
	angle_rotate(Degrees);
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <angle_rotate>
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <init_devices>:
*
*/
void init_devices(void)
{
 //stop errant interrupts until set up
 cli();  //Clears the global interrupt             
     d76:	f8 94       	cli
 port_init();  //Initializes all the ports
     d78:	0e 94 72 05 	call	0xae4	; 0xae4 <port_init>
 uart2_init();  //Initializes UART2
     d7c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <uart2_init>
 adc_init();  //Initializes adc
     d80:	0e 94 da 05 	call	0xbb4	; 0xbb4 <adc_init>
 timer1_init();  //Initializes the timer 1
     d84:	0e 94 a6 05 	call	0xb4c	; 0xb4c <timer1_init>
 timer5_init();   //Initializes timer 5
     d88:	0e 94 8b 05 	call	0xb16	; 0xb16 <timer5_init>
 lcd_set_4bit();  
     d8c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_set_4bit>
 lcd_init();  //Initializes the LCD
     d90:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_init>
 spi_init();  //Initializes  the spi
     d94:	0e 94 d5 05 	call	0xbaa	; 0xbaa <spi_init>
 left_position_encoder_interrupt_init(); //Initializes left position encoder interrupt
     d98:	0e 94 20 02 	call	0x440	; 0x440 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init(); //Initializes right position encoder interrupt
     d9c:	0e 94 29 02 	call	0x452	; 0x452 <right_position_encoder_interrupt_init>
 EICRB  = 0x0A;     //pin change int edge 4:7
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	80 93 6a 00 	sts	0x006A, r24
 EIMSK  = 0x30;
     da6:	80 e3       	ldi	r24, 0x30	; 48
     da8:	8d bb       	out	0x1d, r24	; 29

 sei();             //re-enable interrupts
     daa:	78 94       	sei
 //all peripherals are now initialized
}
     dac:	08 95       	ret

00000dae <__vector_51>:

// Stores the value of UDR2 register ser_data variable and performs the action depending on the value stored in ser_data
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	0b b6       	in	r0, 0x3b	; 59
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
 unsigned char ser_data = 0x00;
 unsigned char ser_data_upper_nibbel = 0x00;
 unsigned char ser_data_lower_nibbel = 0x00;
 //uart has received a character in UDR2
 ser_data = UDR2;
     dd8:	c0 91 d6 00 	lds	r28, 0x00D6
 ser_data_upper_nibbel = ser_data & 0xF0;
 ser_data_lower_nibbel = ser_data & 0x0F;

//__________________________Locomotoion setting commands_____________
// if the flag_velocity is one then next two values in UDR2 are stored in vleft and vright which are set as the velocities of left motor and right motor respectively.
if(flag_velocity == 1)
     ddc:	80 91 66 02 	lds	r24, 0x0266
     de0:	90 91 67 02 	lds	r25, 0x0267
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	91 05       	cpc	r25, r1
     de8:	79 f5       	brne	.+94     	; 0xe48 <__vector_51+0x9a>
  {
	temp_data = ser_data;
     dea:	c0 93 77 02 	sts	0x0277, r28
	if(count == 1)
     dee:	80 91 35 02 	lds	r24, 0x0235
     df2:	90 91 36 02 	lds	r25, 0x0236
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 05       	cpc	r25, r1
     dfa:	69 f4       	brne	.+26     	; 0xe16 <__vector_51+0x68>
	{
		vleft = temp_data;
     dfc:	c0 93 7a 02 	sts	0x027A, r28
		count++;
     e00:	80 91 35 02 	lds	r24, 0x0235
     e04:	90 91 36 02 	lds	r25, 0x0236
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	90 93 36 02 	sts	0x0236, r25
     e0e:	80 93 35 02 	sts	0x0235, r24
		ser_data = 0x00;
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	19 c0       	rjmp	.+50     	; 0xe48 <__vector_51+0x9a>
	}
	else if(count == 2)
     e16:	80 91 35 02 	lds	r24, 0x0235
     e1a:	90 91 36 02 	lds	r25, 0x0236
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	91 05       	cpc	r25, r1
     e22:	91 f4       	brne	.+36     	; 0xe48 <__vector_51+0x9a>
	{
		vright = temp_data;
     e24:	c0 93 87 02 	sts	0x0287, r28
		flag_velocity = 0;
     e28:	10 92 67 02 	sts	0x0267, r1
     e2c:	10 92 66 02 	sts	0x0266, r1
		count=1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	90 93 36 02 	sts	0x0236, r25
     e38:	80 93 35 02 	sts	0x0235, r24
		ser_data = 0x00;
		velocity(vleft,vright);
     e3c:	80 91 7a 02 	lds	r24, 0x027A
     e40:	6c 2f       	mov	r22, r28
     e42:	0e 94 8a 06 	call	0xd14	; 0xd14 <velocity>
	else if(count == 2)
	{
		vright = temp_data;
		flag_velocity = 0;
		count=1;
		ser_data = 0x00;
     e46:	c0 e0       	ldi	r28, 0x00	; 0
		velocity(vleft,vright);
	}
  }
  
  //__________________________ Forward and Backward Movement by Some Distance Command ________________
  if (flag_position_encoder_forward==1)
     e48:	80 91 64 02 	lds	r24, 0x0264
     e4c:	90 91 65 02 	lds	r25, 0x0265
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	09 f0       	breq	.+2      	; 0xe58 <__vector_51+0xaa>
     e56:	42 c0       	rjmp	.+132    	; 0xedc <__vector_51+0x12e>
  {
	  temp_data = ser_data;
     e58:	c0 93 77 02 	sts	0x0277, r28
	  if (count_distance==1)
     e5c:	80 91 33 02 	lds	r24, 0x0233
     e60:	90 91 34 02 	lds	r25, 0x0234
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	79 f4       	brne	.+30     	; 0xe88 <__vector_51+0xda>
	  {
		  distance_q = (unsigned int)temp_data;
     e6a:	c0 93 93 02 	sts	0x0293, r28
     e6e:	10 92 94 02 	sts	0x0294, r1
		  count_distance++;
     e72:	80 91 33 02 	lds	r24, 0x0233
     e76:	90 91 34 02 	lds	r25, 0x0234
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	90 93 34 02 	sts	0x0234, r25
     e80:	80 93 33 02 	sts	0x0233, r24
		  ser_data=0x00;
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	2a c0       	rjmp	.+84     	; 0xedc <__vector_51+0x12e>
	  }
	  else if (count_distance==2)
     e88:	80 91 33 02 	lds	r24, 0x0233
     e8c:	90 91 34 02 	lds	r25, 0x0234
     e90:	82 30       	cpi	r24, 0x02	; 2
     e92:	91 05       	cpc	r25, r1
     e94:	19 f5       	brne	.+70     	; 0xedc <__vector_51+0x12e>
	  {
		  distance_r = (unsigned int)temp_data;
     e96:	8c 2f       	mov	r24, r28
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 84 02 	sts	0x0284, r25
     e9e:	80 93 83 02 	sts	0x0283, r24
		  temp_distance = (distance_q)*255 + (distance_r);
     ea2:	20 91 93 02 	lds	r18, 0x0293
     ea6:	30 91 94 02 	lds	r19, 0x0294
     eaa:	d2 2f       	mov	r29, r18
     eac:	cc 27       	eor	r28, r28
     eae:	c2 1b       	sub	r28, r18
     eb0:	d3 0b       	sbc	r29, r19
     eb2:	8c 0f       	add	r24, r28
     eb4:	9d 1f       	adc	r25, r29
     eb6:	90 93 69 02 	sts	0x0269, r25
     eba:	80 93 68 02 	sts	0x0268, r24
		  count_distance=1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	90 93 34 02 	sts	0x0234, r25
     ec6:	80 93 33 02 	sts	0x0233, r24
		  flag_position_encoder_forward_1 = 1;
     eca:	90 93 63 02 	sts	0x0263, r25
     ece:	80 93 62 02 	sts	0x0262, r24
		  flag_position_encoder_forward = 0;
     ed2:	10 92 65 02 	sts	0x0265, r1
     ed6:	10 92 64 02 	sts	0x0264, r1
		  ser_data = 0x00;
     eda:	c0 e0       	ldi	r28, 0x00	; 0
	  }
	  
  }
  
  if (flag_position_encoder_backward==1)
     edc:	80 91 60 02 	lds	r24, 0x0260
     ee0:	90 91 61 02 	lds	r25, 0x0261
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <__vector_51+0x13e>
     eea:	42 c0       	rjmp	.+132    	; 0xf70 <__vector_51+0x1c2>
  {
	  temp_data = ser_data;
     eec:	c0 93 77 02 	sts	0x0277, r28
	  if (count_distance==1)
     ef0:	80 91 33 02 	lds	r24, 0x0233
     ef4:	90 91 34 02 	lds	r25, 0x0234
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	79 f4       	brne	.+30     	; 0xf1c <__vector_51+0x16e>
	  {
		  distance_q = (unsigned int)temp_data;
     efe:	c0 93 93 02 	sts	0x0293, r28
     f02:	10 92 94 02 	sts	0x0294, r1
		  count_distance++;
     f06:	80 91 33 02 	lds	r24, 0x0233
     f0a:	90 91 34 02 	lds	r25, 0x0234
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	90 93 34 02 	sts	0x0234, r25
     f14:	80 93 33 02 	sts	0x0233, r24
		  ser_data=0x00;
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	2a c0       	rjmp	.+84     	; 0xf70 <__vector_51+0x1c2>
	  }
	  else if (count_distance==2)
     f1c:	80 91 33 02 	lds	r24, 0x0233
     f20:	90 91 34 02 	lds	r25, 0x0234
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	91 05       	cpc	r25, r1
     f28:	19 f5       	brne	.+70     	; 0xf70 <__vector_51+0x1c2>
	  {
		  distance_r = (unsigned int)temp_data;
     f2a:	8c 2f       	mov	r24, r28
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 93 84 02 	sts	0x0284, r25
     f32:	80 93 83 02 	sts	0x0283, r24
		  temp_distance = (distance_q)*255 + (distance_r);
     f36:	20 91 93 02 	lds	r18, 0x0293
     f3a:	30 91 94 02 	lds	r19, 0x0294
     f3e:	d2 2f       	mov	r29, r18
     f40:	cc 27       	eor	r28, r28
     f42:	c2 1b       	sub	r28, r18
     f44:	d3 0b       	sbc	r29, r19
     f46:	8c 0f       	add	r24, r28
     f48:	9d 1f       	adc	r25, r29
     f4a:	90 93 69 02 	sts	0x0269, r25
     f4e:	80 93 68 02 	sts	0x0268, r24
		  count_distance=1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	90 93 34 02 	sts	0x0234, r25
     f5a:	80 93 33 02 	sts	0x0233, r24
		  flag_position_encoder_backward_1 = 1;
     f5e:	90 93 5f 02 	sts	0x025F, r25
     f62:	80 93 5e 02 	sts	0x025E, r24
		  flag_position_encoder_backward = 0;
     f66:	10 92 61 02 	sts	0x0261, r1
     f6a:	10 92 60 02 	sts	0x0260, r1
		  ser_data = 0x00;
     f6e:	c0 e0       	ldi	r28, 0x00	; 0
	  }
  }
  
  if (flag_rotation_right==1)
     f70:	80 91 5c 02 	lds	r24, 0x025C
     f74:	90 91 5d 02 	lds	r25, 0x025D
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_51+0x1d2>
     f7e:	41 c0       	rjmp	.+130    	; 0x1002 <__vector_51+0x254>
  {
	  temp_data=ser_data;
     f80:	c0 93 77 02 	sts	0x0277, r28
	  if (count_rotation == 1)
     f84:	80 91 31 02 	lds	r24, 0x0231
     f88:	90 91 32 02 	lds	r25, 0x0232
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	91 05       	cpc	r25, r1
     f90:	79 f4       	brne	.+30     	; 0xfb0 <__vector_51+0x202>
	  {
		  rotation_q = (unsigned int)temp_data;
     f92:	c0 93 8c 02 	sts	0x028C, r28
     f96:	10 92 8d 02 	sts	0x028D, r1
		  count_rotation++;
     f9a:	80 91 31 02 	lds	r24, 0x0231
     f9e:	90 91 32 02 	lds	r25, 0x0232
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	90 93 32 02 	sts	0x0232, r25
     fa8:	80 93 31 02 	sts	0x0231, r24
		  ser_data = 0x00;
     fac:	c0 e0       	ldi	r28, 0x00	; 0
     fae:	29 c0       	rjmp	.+82     	; 0x1002 <__vector_51+0x254>
	  }
	  else if(count_rotation == 2)
     fb0:	80 91 31 02 	lds	r24, 0x0231
     fb4:	90 91 32 02 	lds	r25, 0x0232
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	91 05       	cpc	r25, r1
     fbc:	11 f5       	brne	.+68     	; 0x1002 <__vector_51+0x254>
	  {
		  rotation_r = (unsigned int)temp_data;
     fbe:	4c 2f       	mov	r20, r28
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	50 93 a0 02 	sts	0x02A0, r21
     fc6:	40 93 9f 02 	sts	0x029F, r20
		  temp_rotation = (rotation_q)*255 + (rotation_r);
     fca:	80 91 8c 02 	lds	r24, 0x028C
     fce:	90 91 8d 02 	lds	r25, 0x028D
     fd2:	38 2f       	mov	r19, r24
     fd4:	22 27       	eor	r18, r18
     fd6:	28 1b       	sub	r18, r24
     fd8:	39 0b       	sbc	r19, r25
     fda:	42 0f       	add	r20, r18
     fdc:	53 1f       	adc	r21, r19
     fde:	50 93 6b 02 	sts	0x026B, r21
     fe2:	40 93 6a 02 	sts	0x026A, r20
		  count_rotation = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 93 32 02 	sts	0x0232, r25
     fee:	80 93 31 02 	sts	0x0231, r24
		  flag_rotation_right_1 = 1;
     ff2:	90 93 5b 02 	sts	0x025B, r25
     ff6:	80 93 5a 02 	sts	0x025A, r24
		  flag_rotation_right = 0;	  
     ffa:	10 92 5d 02 	sts	0x025D, r1
     ffe:	10 92 5c 02 	sts	0x025C, r1
	  }
  }
  
  if (flag_rotation_left==1)
    1002:	80 91 58 02 	lds	r24, 0x0258
    1006:	90 91 59 02 	lds	r25, 0x0259
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	09 f0       	breq	.+2      	; 0x1012 <__vector_51+0x264>
    1010:	41 c0       	rjmp	.+130    	; 0x1094 <__vector_51+0x2e6>
  {
	  temp_data=ser_data;
    1012:	c0 93 77 02 	sts	0x0277, r28
	  if (count_rotation == 1)
    1016:	80 91 31 02 	lds	r24, 0x0231
    101a:	90 91 32 02 	lds	r25, 0x0232
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	79 f4       	brne	.+30     	; 0x1042 <__vector_51+0x294>
	  {
		  rotation_q = (unsigned int)temp_data;
    1024:	c0 93 8c 02 	sts	0x028C, r28
    1028:	10 92 8d 02 	sts	0x028D, r1
		  count_rotation++;
    102c:	80 91 31 02 	lds	r24, 0x0231
    1030:	90 91 32 02 	lds	r25, 0x0232
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 32 02 	sts	0x0232, r25
    103a:	80 93 31 02 	sts	0x0231, r24
		  ser_data = 0x00;
    103e:	c0 e0       	ldi	r28, 0x00	; 0
    1040:	29 c0       	rjmp	.+82     	; 0x1094 <__vector_51+0x2e6>
	  }
	  else if(count_rotation == 2)
    1042:	80 91 31 02 	lds	r24, 0x0231
    1046:	90 91 32 02 	lds	r25, 0x0232
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	91 05       	cpc	r25, r1
    104e:	11 f5       	brne	.+68     	; 0x1094 <__vector_51+0x2e6>
	  {
		  rotation_r = (unsigned int)temp_data;
    1050:	4c 2f       	mov	r20, r28
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	50 93 a0 02 	sts	0x02A0, r21
    1058:	40 93 9f 02 	sts	0x029F, r20
		  temp_rotation = (rotation_q)*255 + (rotation_r);
    105c:	80 91 8c 02 	lds	r24, 0x028C
    1060:	90 91 8d 02 	lds	r25, 0x028D
    1064:	38 2f       	mov	r19, r24
    1066:	22 27       	eor	r18, r18
    1068:	28 1b       	sub	r18, r24
    106a:	39 0b       	sbc	r19, r25
    106c:	42 0f       	add	r20, r18
    106e:	53 1f       	adc	r21, r19
    1070:	50 93 6b 02 	sts	0x026B, r21
    1074:	40 93 6a 02 	sts	0x026A, r20
		  count_rotation = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	90 93 32 02 	sts	0x0232, r25
    1080:	80 93 31 02 	sts	0x0231, r24
		  flag_rotation_left_1 = 1;
    1084:	90 93 57 02 	sts	0x0257, r25
    1088:	80 93 56 02 	sts	0x0256, r24
		  flag_rotation_left = 0;	  
    108c:	10 92 59 02 	sts	0x0259, r1
    1090:	10 92 58 02 	sts	0x0258, r1
	  }
  }
  
    //__________________________ Servo Motor Commands ________________
	if (flag_servo1 == 1)
    1094:	80 91 54 02 	lds	r24, 0x0254
    1098:	90 91 55 02 	lds	r25, 0x0255
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	69 f4       	brne	.+26     	; 0x10bc <__vector_51+0x30e>
  {
	  temp_data = ser_data;
    10a2:	c0 93 77 02 	sts	0x0277, r28
	  flag_servo1_main=1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	90 93 30 02 	sts	0x0230, r25
    10ae:	80 93 2f 02 	sts	0x022F, r24
	  flag_servo1 = 0;
    10b2:	10 92 55 02 	sts	0x0255, r1
    10b6:	10 92 54 02 	sts	0x0254, r1
	  ser_data = 0x00;
    10ba:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  if (flag_servo2 == 1)
    10bc:	80 91 52 02 	lds	r24, 0x0252
    10c0:	90 91 53 02 	lds	r25, 0x0253
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	69 f4       	brne	.+26     	; 0x10e4 <__vector_51+0x336>
  {
	  temp_data = ser_data;
    10ca:	c0 93 77 02 	sts	0x0277, r28
	  flag_servo2_main=1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	90 93 2e 02 	sts	0x022E, r25
    10d6:	80 93 2d 02 	sts	0x022D, r24
	  flag_servo2 = 0;
    10da:	10 92 53 02 	sts	0x0253, r1
    10de:	10 92 52 02 	sts	0x0252, r1
	  ser_data = 0x00;
    10e2:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  if (flag_servo3 == 1)
    10e4:	80 91 50 02 	lds	r24, 0x0250
    10e8:	90 91 51 02 	lds	r25, 0x0251
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	69 f4       	brne	.+26     	; 0x110c <__vector_51+0x35e>
  {
	  temp_data = ser_data;
    10f2:	c0 93 77 02 	sts	0x0277, r28
	  flag_servo3_main=1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 2c 02 	sts	0x022C, r25
    10fe:	80 93 2b 02 	sts	0x022B, r24
	  flag_servo3 = 0;
    1102:	10 92 51 02 	sts	0x0251, r1
    1106:	10 92 50 02 	sts	0x0250, r1
	  ser_data = 0x00;
    110a:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  //__________________________ LCD Command ________________
  if (flag_lcd == 1)
    110c:	80 91 4e 02 	lds	r24, 0x024E
    1110:	90 91 4f 02 	lds	r25, 0x024F
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	09 f0       	breq	.+2      	; 0x111c <__vector_51+0x36e>
    111a:	46 c0       	rjmp	.+140    	; 0x11a8 <__vector_51+0x3fa>
  {
	  temp_data = ser_data;
    111c:	c0 93 77 02 	sts	0x0277, r28
	  if (count_lcd == 1)
    1120:	80 91 29 02 	lds	r24, 0x0229
    1124:	90 91 2a 02 	lds	r25, 0x022A
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	81 f4       	brne	.+32     	; 0x114e <__vector_51+0x3a0>
	  {
		  lcd_row = temp_data;
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	d0 93 43 02 	sts	0x0243, r29
    1134:	c0 93 42 02 	sts	0x0242, r28
		  count_lcd++;
    1138:	80 91 29 02 	lds	r24, 0x0229
    113c:	90 91 2a 02 	lds	r25, 0x022A
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	90 93 2a 02 	sts	0x022A, r25
    1146:	80 93 29 02 	sts	0x0229, r24
		  ser_data = 0x00;
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	2d c0       	rjmp	.+90     	; 0x11a8 <__vector_51+0x3fa>
	  }
	  else if (count_lcd == 2)
    114e:	80 91 29 02 	lds	r24, 0x0229
    1152:	90 91 2a 02 	lds	r25, 0x022A
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	91 05       	cpc	r25, r1
    115a:	81 f4       	brne	.+32     	; 0x117c <__vector_51+0x3ce>
	  {
		  lcd_column = temp_data;
    115c:	8c 2f       	mov	r24, r28
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	90 93 41 02 	sts	0x0241, r25
    1164:	80 93 40 02 	sts	0x0240, r24
		  count_lcd++;
    1168:	80 91 29 02 	lds	r24, 0x0229
    116c:	90 91 2a 02 	lds	r25, 0x022A
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	90 93 2a 02 	sts	0x022A, r25
    1176:	80 93 29 02 	sts	0x0229, r24
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__vector_51+0x3fa>
		  ser_data == 0x00;
	  }
	  else if (count_lcd == 3)
    117c:	80 91 29 02 	lds	r24, 0x0229
    1180:	90 91 2a 02 	lds	r25, 0x022A
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	79 f4       	brne	.+30     	; 0x11a8 <__vector_51+0x3fa>
	  {
		  flag_lcd_main=1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	90 93 4d 02 	sts	0x024D, r25
    1192:	80 93 4c 02 	sts	0x024C, r24
		  count_lcd = 1;
    1196:	90 93 2a 02 	sts	0x022A, r25
    119a:	80 93 29 02 	sts	0x0229, r24
		  flag_lcd = 0;
    119e:	10 92 4f 02 	sts	0x024F, r1
    11a2:	10 92 4e 02 	sts	0x024E, r1
		  ser_data = 0x00;
    11a6:	c0 e0       	ldi	r28, 0x00	; 0
	  }
  }
  
  //________________________ Bar Graph LED Command _____________________
  if (flag_bar_graph_led == 1)
    11a8:	80 91 4a 02 	lds	r24, 0x024A
    11ac:	90 91 4b 02 	lds	r25, 0x024B
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	71 f4       	brne	.+28     	; 0x11d2 <__vector_51+0x424>
  {
	  temp_data = ser_data;
    11b6:	c0 93 77 02 	sts	0x0277, r28
	  flag_bar_graph_led_main = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	90 93 49 02 	sts	0x0249, r25
    11c2:	80 93 48 02 	sts	0x0248, r24
	  flag_bar_graph_led = 0;
    11c6:	10 92 4b 02 	sts	0x024B, r1
    11ca:	10 92 4a 02 	sts	0x024A, r1
	  ser_data = 0x00;
    11ce:	c0 e0       	ldi	r28, 0x00	; 0
    11d0:	0a c0       	rjmp	.+20     	; 0x11e6 <__vector_51+0x438>
  }
  
   
 if (ser_data == 0x38) // ASCII value of 8
    11d2:	c8 33       	cpi	r28, 0x38	; 56
    11d4:	19 f4       	brne	.+6      	; 0x11dc <__vector_51+0x42e>
 {
  forward(); 
    11d6:	0e 94 76 06 	call	0xcec	; 0xcec <forward>
    11da:	0a c0       	rjmp	.+20     	; 0x11f0 <__vector_51+0x442>
 }
 
 if (ser_data == 0x32) // ASCII value of 2
    11dc:	c2 33       	cpi	r28, 0x32	; 50
    11de:	19 f4       	brne	.+6      	; 0x11e6 <__vector_51+0x438>
 {
  back();
    11e0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <back>
    11e4:	0a c0       	rjmp	.+20     	; 0x11fa <__vector_51+0x44c>
 }
 
 if (ser_data == 0x34) // ASCII value of 4
    11e6:	c4 33       	cpi	r28, 0x34	; 52
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <__vector_51+0x442>
 {
  right();
    11ea:	0e 94 82 06 	call	0xd04	; 0xd04 <right>
    11ee:	0a c0       	rjmp	.+20     	; 0x1204 <__vector_51+0x456>
 }
 
 if (ser_data == 0x36) // ASCII value of 6
    11f0:	c6 33       	cpi	r28, 0x36	; 54
    11f2:	19 f4       	brne	.+6      	; 0x11fa <__vector_51+0x44c>
 {
  left();
    11f4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <left>
    11f8:	eb c0       	rjmp	.+470    	; 0x13d0 <__vector_51+0x622>
 }
 
 if (ser_data == 0x35) // ASCII value of 5
    11fa:	c5 33       	cpi	r28, 0x35	; 53
    11fc:	19 f4       	brne	.+6      	; 0x1204 <__vector_51+0x456>
 {
  stop();
    11fe:	0e 94 72 06 	call	0xce4	; 0xce4 <stop>
    1202:	ed c0       	rjmp	.+474    	; 0x13de <__vector_51+0x630>
 }

 
 //________________ IR PROXIMITY STATUS COMMANDS + BATT VALUE + WHITE LINE SENSORS + SHARP SENSORS _____________________
 
 if (ser_data == 0x54)
    1204:	c4 35       	cpi	r28, 0x54	; 84
    1206:	09 f0       	breq	.+2      	; 0x120a <__vector_51+0x45c>
    1208:	e3 c0       	rjmp	.+454    	; 0x13d0 <__vector_51+0x622>
{
	UCSR2B=0xD8;
    120a:	88 ed       	ldi	r24, 0xD8	; 216
    120c:	80 93 d1 00 	sts	0x00D1, r24
	UDR2 = 0x59;
    1210:	89 e5       	ldi	r24, 0x59	; 89
    1212:	80 93 d6 00 	sts	0x00D6, r24
	while((UCSR2A&0x40) ==0x00);
    1216:	e0 ed       	ldi	r30, 0xD0	; 208
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	86 ff       	sbrs	r24, 6
    121e:	fd cf       	rjmp	.-6      	; 0x121a <__vector_51+0x46c>
	{UDR2 = IR1;
    1220:	80 91 88 02 	lds	r24, 0x0288
    1224:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1228:	e0 ed       	ldi	r30, 0xD0	; 208
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 64       	ori	r24, 0x40	; 64
    1230:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1232:	80 81       	ld	r24, Z
    1234:	86 ff       	sbrs	r24, 6
    1236:	fd cf       	rjmp	.-6      	; 0x1232 <__vector_51+0x484>
	{UDR2 = IR2;
    1238:	80 91 72 02 	lds	r24, 0x0272
    123c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1240:	e0 ed       	ldi	r30, 0xD0	; 208
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    124a:	80 81       	ld	r24, Z
    124c:	86 ff       	sbrs	r24, 6
    124e:	fd cf       	rjmp	.-6      	; 0x124a <__vector_51+0x49c>
	{UDR2 = IR3;
    1250:	80 91 7c 02 	lds	r24, 0x027C
    1254:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1258:	e0 ed       	ldi	r30, 0xD0	; 208
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1262:	80 81       	ld	r24, Z
    1264:	86 ff       	sbrs	r24, 6
    1266:	fd cf       	rjmp	.-6      	; 0x1262 <__vector_51+0x4b4>
	{UDR2 = IR4;
    1268:	80 91 8b 02 	lds	r24, 0x028B
    126c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1270:	e0 ed       	ldi	r30, 0xD0	; 208
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	80 64       	ori	r24, 0x40	; 64
    1278:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    127a:	80 81       	ld	r24, Z
    127c:	86 ff       	sbrs	r24, 6
    127e:	fd cf       	rjmp	.-6      	; 0x127a <__vector_51+0x4cc>
	{UDR2 = IR5;
    1280:	80 91 6d 02 	lds	r24, 0x026D
    1284:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1288:	e0 ed       	ldi	r30, 0xD0	; 208
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1292:	80 81       	ld	r24, Z
    1294:	86 ff       	sbrs	r24, 6
    1296:	fd cf       	rjmp	.-6      	; 0x1292 <__vector_51+0x4e4>
	{UDR2 = IR6;
    1298:	80 91 a4 02 	lds	r24, 0x02A4
    129c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12a0:	e0 ed       	ldi	r30, 0xD0	; 208
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12aa:	80 81       	ld	r24, Z
    12ac:	86 ff       	sbrs	r24, 6
    12ae:	fd cf       	rjmp	.-6      	; 0x12aa <__vector_51+0x4fc>
	{UDR2 = IR7;
    12b0:	80 91 90 02 	lds	r24, 0x0290
    12b4:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12b8:	e0 ed       	ldi	r30, 0xD0	; 208
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 64       	ori	r24, 0x40	; 64
    12c0:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12c2:	80 81       	ld	r24, Z
    12c4:	86 ff       	sbrs	r24, 6
    12c6:	fd cf       	rjmp	.-6      	; 0x12c2 <__vector_51+0x514>
	{UDR2 = IR8;
    12c8:	80 91 7f 02 	lds	r24, 0x027F
    12cc:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12d0:	e0 ed       	ldi	r30, 0xD0	; 208
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 64       	ori	r24, 0x40	; 64
    12d8:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12da:	80 81       	ld	r24, Z
    12dc:	86 ff       	sbrs	r24, 6
    12de:	fd cf       	rjmp	.-6      	; 0x12da <__vector_51+0x52c>
	{UDR2 = SHARP_1;
    12e0:	80 91 a1 02 	lds	r24, 0x02A1
    12e4:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12e8:	e0 ed       	ldi	r30, 0xD0	; 208
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	80 64       	ori	r24, 0x40	; 64
    12f0:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12f2:	80 81       	ld	r24, Z
    12f4:	86 ff       	sbrs	r24, 6
    12f6:	fd cf       	rjmp	.-6      	; 0x12f2 <__vector_51+0x544>
	{UDR2 = SHARP_2;
    12f8:	80 91 9a 02 	lds	r24, 0x029A
    12fc:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1300:	e0 ed       	ldi	r30, 0xD0	; 208
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    130a:	80 81       	ld	r24, Z
    130c:	86 ff       	sbrs	r24, 6
    130e:	fd cf       	rjmp	.-6      	; 0x130a <__vector_51+0x55c>
	{UDR2 = SHARP_3;
    1310:	80 91 6c 02 	lds	r24, 0x026C
    1314:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1318:	e0 ed       	ldi	r30, 0xD0	; 208
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	80 64       	ori	r24, 0x40	; 64
    1320:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1322:	80 81       	ld	r24, Z
    1324:	86 ff       	sbrs	r24, 6
    1326:	fd cf       	rjmp	.-6      	; 0x1322 <__vector_51+0x574>
	{UDR2 = SHARP_4;
    1328:	80 91 8e 02 	lds	r24, 0x028E
    132c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1330:	e0 ed       	ldi	r30, 0xD0	; 208
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 64       	ori	r24, 0x40	; 64
    1338:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    133a:	80 81       	ld	r24, Z
    133c:	86 ff       	sbrs	r24, 6
    133e:	fd cf       	rjmp	.-6      	; 0x133a <__vector_51+0x58c>
	{UDR2 = SHARP_5;
    1340:	80 91 82 02 	lds	r24, 0x0282
    1344:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1348:	e0 ed       	ldi	r30, 0xD0	; 208
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1352:	80 81       	ld	r24, Z
    1354:	86 ff       	sbrs	r24, 6
    1356:	fd cf       	rjmp	.-6      	; 0x1352 <__vector_51+0x5a4>
	{UDR2 = WL_LEFT;
    1358:	80 91 6f 02 	lds	r24, 0x026F
    135c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1360:	e0 ed       	ldi	r30, 0xD0	; 208
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 64       	ori	r24, 0x40	; 64
    1368:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    136a:	80 81       	ld	r24, Z
    136c:	86 ff       	sbrs	r24, 6
    136e:	fd cf       	rjmp	.-6      	; 0x136a <__vector_51+0x5bc>
	{UDR2 = WL_CENTER;
    1370:	80 91 79 02 	lds	r24, 0x0279
    1374:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1378:	e0 ed       	ldi	r30, 0xD0	; 208
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 64       	ori	r24, 0x40	; 64
    1380:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1382:	80 81       	ld	r24, Z
    1384:	86 ff       	sbrs	r24, 6
    1386:	fd cf       	rjmp	.-6      	; 0x1382 <__vector_51+0x5d4>
	{UDR2 = WL_RIGHT;
    1388:	80 91 78 02 	lds	r24, 0x0278
    138c:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1390:	e0 ed       	ldi	r30, 0xD0	; 208
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 64       	ori	r24, 0x40	; 64
    1398:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    139a:	80 81       	ld	r24, Z
    139c:	86 ff       	sbrs	r24, 6
    139e:	fd cf       	rjmp	.-6      	; 0x139a <__vector_51+0x5ec>
	{UDR2 = BATT_VALUE;
    13a0:	80 91 8f 02 	lds	r24, 0x028F
    13a4:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13a8:	e0 ed       	ldi	r30, 0xD0	; 208
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 64       	ori	r24, 0x40	; 64
    13b0:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    13b2:	80 81       	ld	r24, Z
    13b4:	86 ff       	sbrs	r24, 6
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <__vector_51+0x604>
	{UDR2 = 0x5A;
    13b8:	8a e5       	ldi	r24, 0x5A	; 90
    13ba:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13be:	e0 ed       	ldi	r30, 0xD0	; 208
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 64       	ori	r24, 0x40	; 64
    13c6:	80 83       	st	Z, r24
	}
	UCSR2B = 0x98;
    13c8:	88 e9       	ldi	r24, 0x98	; 152
    13ca:	80 93 d1 00 	sts	0x00D1, r24
    13ce:	0c c0       	rjmp	.+24     	; 0x13e8 <__vector_51+0x63a>
	
 
 
  
//______________________Identity tag ____________________________
 if (ser_data == 0x6B)
    13d0:	cb 36       	cpi	r28, 0x6B	; 107
    13d2:	29 f4       	brne	.+10     	; 0x13de <__vector_51+0x630>
 {
  UDR2 = robot_id;
    13d4:	80 91 37 02 	lds	r24, 0x0237
    13d8:	80 93 d6 00 	sts	0x00D6, r24
    13dc:	0a c0       	rjmp	.+20     	; 0x13f2 <__vector_51+0x644>
 }

//________________  Buzzer _______________________________________
 if (ser_data == 0x37) // ASCII value of 7
    13de:	c7 33       	cpi	r28, 0x37	; 55
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <__vector_51+0x63a>
 {
  buzzer_on();
    13e2:	0e 94 86 06 	call	0xd0c	; 0xd0c <buzzer_on>
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <__vector_51+0x656>
 }
 
 if (ser_data == 0x39) // ASCII value of 9
    13e8:	c9 33       	cpi	r28, 0x39	; 57
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <__vector_51+0x644>
 {
  buzzer_off();
    13ec:	0e 94 88 06 	call	0xd10	; 0xd10 <buzzer_off>
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <__vector_51+0x664>
 }



//_______________________ Velocity _______________________________
if(ser_data == 0x52)
    13f2:	c2 35       	cpi	r28, 0x52	; 82
    13f4:	39 f4       	brne	.+14     	; 0x1404 <__vector_51+0x656>
{
	flag_velocity = 1;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	90 93 67 02 	sts	0x0267, r25
    13fe:	80 93 66 02 	sts	0x0266, r24
    1402:	10 c0       	rjmp	.+32     	; 0x1424 <__vector_51+0x676>
}

if (ser_data == 0x53)
    1404:	c3 35       	cpi	r28, 0x53	; 83
    1406:	29 f4       	brne	.+10     	; 0x1412 <__vector_51+0x664>
{
	velocity(255,255);	
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	6f ef       	ldi	r22, 0xFF	; 255
    140c:	0e 94 8a 06 	call	0xd14	; 0xd14 <velocity>
    1410:	12 c0       	rjmp	.+36     	; 0x1436 <__vector_51+0x688>
}

//________________________ Position Encoders _______________________________
if (ser_data == 0x55 )
    1412:	c5 35       	cpi	r28, 0x55	; 85
    1414:	39 f4       	brne	.+14     	; 0x1424 <__vector_51+0x676>
{
	flag_position_encoder_forward = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 93 65 02 	sts	0x0265, r25
    141e:	80 93 64 02 	sts	0x0264, r24
    1422:	12 c0       	rjmp	.+36     	; 0x1448 <__vector_51+0x69a>
}

if (ser_data == 0x56)
    1424:	c6 35       	cpi	r28, 0x56	; 86
    1426:	39 f4       	brne	.+14     	; 0x1436 <__vector_51+0x688>
{
	flag_position_encoder_backward = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	90 93 61 02 	sts	0x0261, r25
    1430:	80 93 60 02 	sts	0x0260, r24
    1434:	12 c0       	rjmp	.+36     	; 0x145a <__vector_51+0x6ac>
}

if (ser_data == 0x57)
    1436:	c7 35       	cpi	r28, 0x57	; 87
    1438:	39 f4       	brne	.+14     	; 0x1448 <__vector_51+0x69a>
{
	flag_rotation_right=1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	90 93 5d 02 	sts	0x025D, r25
    1442:	80 93 5c 02 	sts	0x025C, r24
    1446:	12 c0       	rjmp	.+36     	; 0x146c <__vector_51+0x6be>
}

if (ser_data == 0x58)
    1448:	c8 35       	cpi	r28, 0x58	; 88
    144a:	39 f4       	brne	.+14     	; 0x145a <__vector_51+0x6ac>
{
	flag_rotation_left=1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 59 02 	sts	0x0259, r25
    1454:	80 93 58 02 	sts	0x0258, r24
    1458:	12 c0       	rjmp	.+36     	; 0x147e <__vector_51+0x6d0>
}

//_______________________________ Servo Motor ______________________________________________
if (ser_data == 0x80)
    145a:	c0 38       	cpi	r28, 0x80	; 128
    145c:	39 f4       	brne	.+14     	; 0x146c <__vector_51+0x6be>
{
	flag_servo1 = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	90 93 55 02 	sts	0x0255, r25
    1466:	80 93 54 02 	sts	0x0254, r24
    146a:	12 c0       	rjmp	.+36     	; 0x1490 <__vector_51+0x6e2>
}
if (ser_data == 0x81)
    146c:	c1 38       	cpi	r28, 0x81	; 129
    146e:	39 f4       	brne	.+14     	; 0x147e <__vector_51+0x6d0>
{
	flag_servo2 = 1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	90 93 53 02 	sts	0x0253, r25
    1478:	80 93 52 02 	sts	0x0252, r24
    147c:	12 c0       	rjmp	.+36     	; 0x14a2 <__vector_51+0x6f4>
}
if (ser_data == 0x82)
    147e:	c2 38       	cpi	r28, 0x82	; 130
    1480:	39 f4       	brne	.+14     	; 0x1490 <__vector_51+0x6e2>
{
	flag_servo3 = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	90 93 51 02 	sts	0x0251, r25
    148a:	80 93 50 02 	sts	0x0250, r24
    148e:	11 c0       	rjmp	.+34     	; 0x14b2 <__vector_51+0x704>
}

//________________________________________ LCD ______________________________________________
if (ser_data == 0x83)
    1490:	c3 38       	cpi	r28, 0x83	; 131
    1492:	39 f4       	brne	.+14     	; 0x14a2 <__vector_51+0x6f4>
{
	flag_lcd = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	90 93 4f 02 	sts	0x024F, r25
    149c:	80 93 4e 02 	sts	0x024E, r24
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <__vector_51+0x704>
}

//_________________________________________ Bar Graph LED ___________________________________
if (ser_data == 0x84)
    14a2:	c4 38       	cpi	r28, 0x84	; 132
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <__vector_51+0x704>
{
	flag_bar_graph_led = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	90 93 4b 02 	sts	0x024B, r25
    14ae:	80 93 4a 02 	sts	0x024A, r24
}

}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0b be       	out	0x3b, r0	; 59
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <main>:
* Example Call:	 
*
*/
int main(void)
{
	init_devices();
    14dc:	0e 94 bb 06 	call	0xd76	; 0xd76 <init_devices>
	DDRJ = 0xFF;
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	80 93 04 01 	sts	0x0104, r24
		}
		
		//Bar Graph Led
		if (flag_bar_graph_led_main == 1)
		{
			PORTJ = temp_data;
    14e6:	c5 e0       	ldi	r28, 0x05	; 5
    14e8:	d1 e0       	ldi	r29, 0x01	; 1
  

	while(1)
	{
		//Move the bot forward by some distance in millimeter
		if (flag_position_encoder_forward_1 == 1)
    14ea:	80 91 62 02 	lds	r24, 0x0262
    14ee:	90 91 63 02 	lds	r25, 0x0263
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	51 f4       	brne	.+20     	; 0x150c <main+0x30>
		{
			forward_mm(temp_distance);
    14f8:	80 91 68 02 	lds	r24, 0x0268
    14fc:	90 91 69 02 	lds	r25, 0x0269
    1500:	0e 94 8f 06 	call	0xd1e	; 0xd1e <forward_mm>
			flag_position_encoder_forward_1=0;
    1504:	10 92 63 02 	sts	0x0263, r1
    1508:	10 92 62 02 	sts	0x0262, r1
		}
		
		//Move the bot backward by some distance in millimeter
		if (flag_position_encoder_backward_1 == 1)
    150c:	80 91 5e 02 	lds	r24, 0x025E
    1510:	90 91 5f 02 	lds	r25, 0x025F
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	51 f4       	brne	.+20     	; 0x152e <main+0x52>
		{
			backward_mm(temp_distance);
    151a:	80 91 68 02 	lds	r24, 0x0268
    151e:	90 91 69 02 	lds	r25, 0x0269
    1522:	0e 94 9a 06 	call	0xd34	; 0xd34 <backward_mm>
			flag_position_encoder_backward_1=0;
    1526:	10 92 5f 02 	sts	0x025F, r1
    152a:	10 92 5e 02 	sts	0x025E, r1
		}
		
		// Rotate the bot right by specified degrees
		if (flag_rotation_right_1==1)
    152e:	80 91 5a 02 	lds	r24, 0x025A
    1532:	90 91 5b 02 	lds	r25, 0x025B
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	51 f4       	brne	.+20     	; 0x1550 <main+0x74>
		{
			right_degrees(temp_rotation);
    153c:	80 91 6a 02 	lds	r24, 0x026A
    1540:	90 91 6b 02 	lds	r25, 0x026B
    1544:	0e 94 b0 06 	call	0xd60	; 0xd60 <right_degrees>
			flag_rotation_right_1=0;
    1548:	10 92 5b 02 	sts	0x025B, r1
    154c:	10 92 5a 02 	sts	0x025A, r1
		}
		
		// Rotate the bot left by specified degrees
		if (flag_rotation_left_1==1)
    1550:	80 91 56 02 	lds	r24, 0x0256
    1554:	90 91 57 02 	lds	r25, 0x0257
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	51 f4       	brne	.+20     	; 0x1572 <main+0x96>
		{
			left_degrees(temp_rotation);
    155e:	80 91 6a 02 	lds	r24, 0x026A
    1562:	90 91 6b 02 	lds	r25, 0x026B
    1566:	0e 94 a5 06 	call	0xd4a	; 0xd4a <left_degrees>
			flag_rotation_left_1=0;
    156a:	10 92 57 02 	sts	0x0257, r1
    156e:	10 92 56 02 	sts	0x0256, r1
		}
		
		//Rotate Servo Motor 1
		if (flag_servo1_main==1)
    1572:	80 91 2f 02 	lds	r24, 0x022F
    1576:	90 91 30 02 	lds	r25, 0x0230
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f5       	brne	.+116    	; 0x15f4 <main+0x118>
		{
			s1 = (int)temp_data;
    1580:	80 91 77 02 	lds	r24, 0x0277
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	90 93 45 02 	sts	0x0245, r25
    158a:	80 93 44 02 	sts	0x0244, r24
			for(a=0;a<=s1;a++){
    158e:	10 92 98 02 	sts	0x0298, r1
    1592:	10 92 97 02 	sts	0x0297, r1
    1596:	80 91 44 02 	lds	r24, 0x0244
    159a:	90 91 45 02 	lds	r25, 0x0245
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
				servo_1(a);
    15a2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <servo_1>
    15a6:	89 e9       	ldi	r24, 0x99	; 153
    15a8:	99 e5       	ldi	r25, 0x59	; 89
    15aa:	a1 e0       	ldi	r26, 0x01	; 1
    15ac:	81 50       	subi	r24, 0x01	; 1
    15ae:	90 40       	sbci	r25, 0x00	; 0
    15b0:	a0 40       	sbci	r26, 0x00	; 0
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <main+0xd0>
    15b4:	00 00       	nop
		
		//Rotate Servo Motor 1
		if (flag_servo1_main==1)
		{
			s1 = (int)temp_data;
			for(a=0;a<=s1;a++){
    15b6:	80 91 97 02 	lds	r24, 0x0297
    15ba:	90 91 98 02 	lds	r25, 0x0298
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	90 93 98 02 	sts	0x0298, r25
    15c4:	80 93 97 02 	sts	0x0297, r24
    15c8:	20 91 44 02 	lds	r18, 0x0244
    15cc:	30 91 45 02 	lds	r19, 0x0245
    15d0:	28 17       	cp	r18, r24
    15d2:	39 07       	cpc	r19, r25
    15d4:	30 f7       	brcc	.-52     	; 0x15a2 <main+0xc6>
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	9f ef       	ldi	r25, 0xFF	; 255
    15da:	ac e2       	ldi	r26, 0x2C	; 44
    15dc:	81 50       	subi	r24, 0x01	; 1
    15de:	90 40       	sbci	r25, 0x00	; 0
    15e0:	a0 40       	sbci	r26, 0x00	; 0
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <main+0x100>
    15e4:	00 c0       	rjmp	.+0      	; 0x15e6 <main+0x10a>
    15e6:	00 00       	nop
				servo_1(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_1_free();
    15e8:	0e 94 45 03 	call	0x68a	; 0x68a <servo_1_free>
			flag_servo1_main=0;
    15ec:	10 92 30 02 	sts	0x0230, r1
    15f0:	10 92 2f 02 	sts	0x022F, r1
		}
		
		//Rotate Servo Motor 2
		if (flag_servo2_main==1)
    15f4:	80 91 2d 02 	lds	r24, 0x022D
    15f8:	90 91 2e 02 	lds	r25, 0x022E
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	d1 f5       	brne	.+116    	; 0x1676 <main+0x19a>
		{
			s1 = (int)temp_data;
    1602:	80 91 77 02 	lds	r24, 0x0277
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	90 93 45 02 	sts	0x0245, r25
    160c:	80 93 44 02 	sts	0x0244, r24
			for(a=0;a<=s1;a++){
    1610:	10 92 98 02 	sts	0x0298, r1
    1614:	10 92 97 02 	sts	0x0297, r1
    1618:	80 91 44 02 	lds	r24, 0x0244
    161c:	90 91 45 02 	lds	r25, 0x0245
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
				servo_2(a);
    1624:	0e 94 13 03 	call	0x626	; 0x626 <servo_2>
    1628:	89 e9       	ldi	r24, 0x99	; 153
    162a:	99 e5       	ldi	r25, 0x59	; 89
    162c:	a1 e0       	ldi	r26, 0x01	; 1
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	a0 40       	sbci	r26, 0x00	; 0
    1634:	e1 f7       	brne	.-8      	; 0x162e <main+0x152>
    1636:	00 00       	nop
		
		//Rotate Servo Motor 2
		if (flag_servo2_main==1)
		{
			s1 = (int)temp_data;
			for(a=0;a<=s1;a++){
    1638:	80 91 97 02 	lds	r24, 0x0297
    163c:	90 91 98 02 	lds	r25, 0x0298
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	90 93 98 02 	sts	0x0298, r25
    1646:	80 93 97 02 	sts	0x0297, r24
    164a:	20 91 44 02 	lds	r18, 0x0244
    164e:	30 91 45 02 	lds	r19, 0x0245
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	30 f7       	brcc	.-52     	; 0x1624 <main+0x148>
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	9f ef       	ldi	r25, 0xFF	; 255
    165c:	ac e2       	ldi	r26, 0x2C	; 44
    165e:	81 50       	subi	r24, 0x01	; 1
    1660:	90 40       	sbci	r25, 0x00	; 0
    1662:	a0 40       	sbci	r26, 0x00	; 0
    1664:	e1 f7       	brne	.-8      	; 0x165e <main+0x182>
    1666:	00 c0       	rjmp	.+0      	; 0x1668 <main+0x18c>
    1668:	00 00       	nop
				servo_2(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_2_free();
    166a:	0e 94 4c 03 	call	0x698	; 0x698 <servo_2_free>
			flag_servo2_main=0;
    166e:	10 92 2e 02 	sts	0x022E, r1
    1672:	10 92 2d 02 	sts	0x022D, r1
		}
		
		//Rotate Servo Motor 3
		if (flag_servo3_main==1)
    1676:	80 91 2b 02 	lds	r24, 0x022B
    167a:	90 91 2c 02 	lds	r25, 0x022C
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	d1 f5       	brne	.+116    	; 0x16f8 <main+0x21c>
		{
			s1 = (int)temp_data;
    1684:	80 91 77 02 	lds	r24, 0x0277
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	90 93 45 02 	sts	0x0245, r25
    168e:	80 93 44 02 	sts	0x0244, r24
			for(a=0;a<=s1;a++){
    1692:	10 92 98 02 	sts	0x0298, r1
    1696:	10 92 97 02 	sts	0x0297, r1
    169a:	80 91 44 02 	lds	r24, 0x0244
    169e:	90 91 45 02 	lds	r25, 0x0245
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
				servo_3(a);
    16a6:	0e 94 2c 03 	call	0x658	; 0x658 <servo_3>
    16aa:	89 e9       	ldi	r24, 0x99	; 153
    16ac:	99 e5       	ldi	r25, 0x59	; 89
    16ae:	a1 e0       	ldi	r26, 0x01	; 1
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	a0 40       	sbci	r26, 0x00	; 0
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <main+0x1d4>
    16b8:	00 00       	nop
		
		//Rotate Servo Motor 3
		if (flag_servo3_main==1)
		{
			s1 = (int)temp_data;
			for(a=0;a<=s1;a++){
    16ba:	80 91 97 02 	lds	r24, 0x0297
    16be:	90 91 98 02 	lds	r25, 0x0298
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	90 93 98 02 	sts	0x0298, r25
    16c8:	80 93 97 02 	sts	0x0297, r24
    16cc:	20 91 44 02 	lds	r18, 0x0244
    16d0:	30 91 45 02 	lds	r19, 0x0245
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	30 f7       	brcc	.-52     	; 0x16a6 <main+0x1ca>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	9f ef       	ldi	r25, 0xFF	; 255
    16de:	ac e2       	ldi	r26, 0x2C	; 44
    16e0:	81 50       	subi	r24, 0x01	; 1
    16e2:	90 40       	sbci	r25, 0x00	; 0
    16e4:	a0 40       	sbci	r26, 0x00	; 0
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <main+0x204>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <main+0x20e>
    16ea:	00 00       	nop
				servo_3(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_3_free();
    16ec:	0e 94 53 03 	call	0x6a6	; 0x6a6 <servo_3_free>
			flag_servo3_main=0;
    16f0:	10 92 2c 02 	sts	0x022C, r1
    16f4:	10 92 2b 02 	sts	0x022B, r1
		}
		
		//Print On LCD
		if (flag_lcd_main == 1)
    16f8:	80 91 4c 02 	lds	r24, 0x024C
    16fc:	90 91 4d 02 	lds	r25, 0x024D
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	a1 f4       	brne	.+40     	; 0x172e <main+0x252>
		{
			lcd_clear();
    1706:	0e 94 00 02 	call	0x400	; 0x400 <lcd_clear>
			lcd_cursor(lcd_row, lcd_column);
    170a:	80 91 42 02 	lds	r24, 0x0242
    170e:	90 91 43 02 	lds	r25, 0x0243
    1712:	60 91 40 02 	lds	r22, 0x0240
    1716:	70 91 41 02 	lds	r23, 0x0241
    171a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_cursor>
			lcd_wr_char(temp_data);
    171e:	80 91 77 02 	lds	r24, 0x0277
    1722:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_wr_char>
			flag_lcd_main = 0;
    1726:	10 92 4d 02 	sts	0x024D, r1
    172a:	10 92 4c 02 	sts	0x024C, r1
		}
		
		//Bar Graph Led
		if (flag_bar_graph_led_main == 1)
    172e:	80 91 48 02 	lds	r24, 0x0248
    1732:	90 91 49 02 	lds	r25, 0x0249
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	89 f4       	brne	.+34     	; 0x175e <main+0x282>
		{
			PORTJ = temp_data;
    173c:	80 91 77 02 	lds	r24, 0x0277
    1740:	88 83       	st	Y, r24
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	9f ef       	ldi	r25, 0xFF	; 255
    1746:	a9 e5       	ldi	r26, 0x59	; 89
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	90 40       	sbci	r25, 0x00	; 0
    174c:	a0 40       	sbci	r26, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <main+0x26c>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <main+0x276>
    1752:	00 00       	nop
			_delay_ms(2000);
			PORTJ = 0x00;
    1754:	18 82       	st	Y, r1
			flag_bar_graph_led_main = 0;
    1756:	10 92 49 02 	sts	0x0249, r1
    175a:	10 92 48 02 	sts	0x0248, r1
		}
		
		sensor_data_interpretation();
    175e:	0e 94 16 06 	call	0xc2c	; 0xc2c <sensor_data_interpretation>
	}
    1762:	c3 ce       	rjmp	.-634    	; 0x14ea <main+0xe>

00001764 <__subsf3>:
    1764:	50 58       	subi	r21, 0x80	; 128

00001766 <__addsf3>:
    1766:	bb 27       	eor	r27, r27
    1768:	aa 27       	eor	r26, r26
    176a:	0e d0       	rcall	.+28     	; 0x1788 <__addsf3x>
    176c:	70 c1       	rjmp	.+736    	; 0x1a4e <__fp_round>
    176e:	61 d1       	rcall	.+706    	; 0x1a32 <__fp_pscA>
    1770:	30 f0       	brcs	.+12     	; 0x177e <__addsf3+0x18>
    1772:	66 d1       	rcall	.+716    	; 0x1a40 <__fp_pscB>
    1774:	20 f0       	brcs	.+8      	; 0x177e <__addsf3+0x18>
    1776:	31 f4       	brne	.+12     	; 0x1784 <__addsf3+0x1e>
    1778:	9f 3f       	cpi	r25, 0xFF	; 255
    177a:	11 f4       	brne	.+4      	; 0x1780 <__addsf3+0x1a>
    177c:	1e f4       	brtc	.+6      	; 0x1784 <__addsf3+0x1e>
    177e:	56 c1       	rjmp	.+684    	; 0x1a2c <__fp_nan>
    1780:	0e f4       	brtc	.+2      	; 0x1784 <__addsf3+0x1e>
    1782:	e0 95       	com	r30
    1784:	e7 fb       	bst	r30, 7
    1786:	4c c1       	rjmp	.+664    	; 0x1a20 <__fp_inf>

00001788 <__addsf3x>:
    1788:	e9 2f       	mov	r30, r25
    178a:	72 d1       	rcall	.+740    	; 0x1a70 <__fp_split3>
    178c:	80 f3       	brcs	.-32     	; 0x176e <__addsf3+0x8>
    178e:	ba 17       	cp	r27, r26
    1790:	62 07       	cpc	r22, r18
    1792:	73 07       	cpc	r23, r19
    1794:	84 07       	cpc	r24, r20
    1796:	95 07       	cpc	r25, r21
    1798:	18 f0       	brcs	.+6      	; 0x17a0 <__addsf3x+0x18>
    179a:	71 f4       	brne	.+28     	; 0x17b8 <__addsf3x+0x30>
    179c:	9e f5       	brtc	.+102    	; 0x1804 <__addsf3x+0x7c>
    179e:	8a c1       	rjmp	.+788    	; 0x1ab4 <__fp_zero>
    17a0:	0e f4       	brtc	.+2      	; 0x17a4 <__addsf3x+0x1c>
    17a2:	e0 95       	com	r30
    17a4:	0b 2e       	mov	r0, r27
    17a6:	ba 2f       	mov	r27, r26
    17a8:	a0 2d       	mov	r26, r0
    17aa:	0b 01       	movw	r0, r22
    17ac:	b9 01       	movw	r22, r18
    17ae:	90 01       	movw	r18, r0
    17b0:	0c 01       	movw	r0, r24
    17b2:	ca 01       	movw	r24, r20
    17b4:	a0 01       	movw	r20, r0
    17b6:	11 24       	eor	r1, r1
    17b8:	ff 27       	eor	r31, r31
    17ba:	59 1b       	sub	r21, r25
    17bc:	99 f0       	breq	.+38     	; 0x17e4 <__addsf3x+0x5c>
    17be:	59 3f       	cpi	r21, 0xF9	; 249
    17c0:	50 f4       	brcc	.+20     	; 0x17d6 <__addsf3x+0x4e>
    17c2:	50 3e       	cpi	r21, 0xE0	; 224
    17c4:	68 f1       	brcs	.+90     	; 0x1820 <__addsf3x+0x98>
    17c6:	1a 16       	cp	r1, r26
    17c8:	f0 40       	sbci	r31, 0x00	; 0
    17ca:	a2 2f       	mov	r26, r18
    17cc:	23 2f       	mov	r18, r19
    17ce:	34 2f       	mov	r19, r20
    17d0:	44 27       	eor	r20, r20
    17d2:	58 5f       	subi	r21, 0xF8	; 248
    17d4:	f3 cf       	rjmp	.-26     	; 0x17bc <__addsf3x+0x34>
    17d6:	46 95       	lsr	r20
    17d8:	37 95       	ror	r19
    17da:	27 95       	ror	r18
    17dc:	a7 95       	ror	r26
    17de:	f0 40       	sbci	r31, 0x00	; 0
    17e0:	53 95       	inc	r21
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <__addsf3x+0x4e>
    17e4:	7e f4       	brtc	.+30     	; 0x1804 <__addsf3x+0x7c>
    17e6:	1f 16       	cp	r1, r31
    17e8:	ba 0b       	sbc	r27, r26
    17ea:	62 0b       	sbc	r22, r18
    17ec:	73 0b       	sbc	r23, r19
    17ee:	84 0b       	sbc	r24, r20
    17f0:	ba f0       	brmi	.+46     	; 0x1820 <__addsf3x+0x98>
    17f2:	91 50       	subi	r25, 0x01	; 1
    17f4:	a1 f0       	breq	.+40     	; 0x181e <__addsf3x+0x96>
    17f6:	ff 0f       	add	r31, r31
    17f8:	bb 1f       	adc	r27, r27
    17fa:	66 1f       	adc	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	c2 f7       	brpl	.-16     	; 0x17f2 <__addsf3x+0x6a>
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <__addsf3x+0x98>
    1804:	ba 0f       	add	r27, r26
    1806:	62 1f       	adc	r22, r18
    1808:	73 1f       	adc	r23, r19
    180a:	84 1f       	adc	r24, r20
    180c:	48 f4       	brcc	.+18     	; 0x1820 <__addsf3x+0x98>
    180e:	87 95       	ror	r24
    1810:	77 95       	ror	r23
    1812:	67 95       	ror	r22
    1814:	b7 95       	ror	r27
    1816:	f7 95       	ror	r31
    1818:	9e 3f       	cpi	r25, 0xFE	; 254
    181a:	08 f0       	brcs	.+2      	; 0x181e <__addsf3x+0x96>
    181c:	b3 cf       	rjmp	.-154    	; 0x1784 <__addsf3+0x1e>
    181e:	93 95       	inc	r25
    1820:	88 0f       	add	r24, r24
    1822:	08 f0       	brcs	.+2      	; 0x1826 <__addsf3x+0x9e>
    1824:	99 27       	eor	r25, r25
    1826:	ee 0f       	add	r30, r30
    1828:	97 95       	ror	r25
    182a:	87 95       	ror	r24
    182c:	08 95       	ret

0000182e <__cmpsf2>:
    182e:	d4 d0       	rcall	.+424    	; 0x19d8 <__fp_cmp>
    1830:	08 f4       	brcc	.+2      	; 0x1834 <__cmpsf2+0x6>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	08 95       	ret

00001836 <__divsf3>:
    1836:	0c d0       	rcall	.+24     	; 0x1850 <__divsf3x>
    1838:	0a c1       	rjmp	.+532    	; 0x1a4e <__fp_round>
    183a:	02 d1       	rcall	.+516    	; 0x1a40 <__fp_pscB>
    183c:	40 f0       	brcs	.+16     	; 0x184e <__divsf3+0x18>
    183e:	f9 d0       	rcall	.+498    	; 0x1a32 <__fp_pscA>
    1840:	30 f0       	brcs	.+12     	; 0x184e <__divsf3+0x18>
    1842:	21 f4       	brne	.+8      	; 0x184c <__divsf3+0x16>
    1844:	5f 3f       	cpi	r21, 0xFF	; 255
    1846:	19 f0       	breq	.+6      	; 0x184e <__divsf3+0x18>
    1848:	eb c0       	rjmp	.+470    	; 0x1a20 <__fp_inf>
    184a:	51 11       	cpse	r21, r1
    184c:	34 c1       	rjmp	.+616    	; 0x1ab6 <__fp_szero>
    184e:	ee c0       	rjmp	.+476    	; 0x1a2c <__fp_nan>

00001850 <__divsf3x>:
    1850:	0f d1       	rcall	.+542    	; 0x1a70 <__fp_split3>
    1852:	98 f3       	brcs	.-26     	; 0x183a <__divsf3+0x4>

00001854 <__divsf3_pse>:
    1854:	99 23       	and	r25, r25
    1856:	c9 f3       	breq	.-14     	; 0x184a <__divsf3+0x14>
    1858:	55 23       	and	r21, r21
    185a:	b1 f3       	breq	.-20     	; 0x1848 <__divsf3+0x12>
    185c:	95 1b       	sub	r25, r21
    185e:	55 0b       	sbc	r21, r21
    1860:	bb 27       	eor	r27, r27
    1862:	aa 27       	eor	r26, r26
    1864:	62 17       	cp	r22, r18
    1866:	73 07       	cpc	r23, r19
    1868:	84 07       	cpc	r24, r20
    186a:	38 f0       	brcs	.+14     	; 0x187a <__divsf3_pse+0x26>
    186c:	9f 5f       	subi	r25, 0xFF	; 255
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	22 0f       	add	r18, r18
    1872:	33 1f       	adc	r19, r19
    1874:	44 1f       	adc	r20, r20
    1876:	aa 1f       	adc	r26, r26
    1878:	a9 f3       	breq	.-22     	; 0x1864 <__divsf3_pse+0x10>
    187a:	33 d0       	rcall	.+102    	; 0x18e2 <__divsf3_pse+0x8e>
    187c:	0e 2e       	mov	r0, r30
    187e:	3a f0       	brmi	.+14     	; 0x188e <__divsf3_pse+0x3a>
    1880:	e0 e8       	ldi	r30, 0x80	; 128
    1882:	30 d0       	rcall	.+96     	; 0x18e4 <__divsf3_pse+0x90>
    1884:	91 50       	subi	r25, 0x01	; 1
    1886:	50 40       	sbci	r21, 0x00	; 0
    1888:	e6 95       	lsr	r30
    188a:	00 1c       	adc	r0, r0
    188c:	ca f7       	brpl	.-14     	; 0x1880 <__divsf3_pse+0x2c>
    188e:	29 d0       	rcall	.+82     	; 0x18e2 <__divsf3_pse+0x8e>
    1890:	fe 2f       	mov	r31, r30
    1892:	27 d0       	rcall	.+78     	; 0x18e2 <__divsf3_pse+0x8e>
    1894:	66 0f       	add	r22, r22
    1896:	77 1f       	adc	r23, r23
    1898:	88 1f       	adc	r24, r24
    189a:	bb 1f       	adc	r27, r27
    189c:	26 17       	cp	r18, r22
    189e:	37 07       	cpc	r19, r23
    18a0:	48 07       	cpc	r20, r24
    18a2:	ab 07       	cpc	r26, r27
    18a4:	b0 e8       	ldi	r27, 0x80	; 128
    18a6:	09 f0       	breq	.+2      	; 0x18aa <__divsf3_pse+0x56>
    18a8:	bb 0b       	sbc	r27, r27
    18aa:	80 2d       	mov	r24, r0
    18ac:	bf 01       	movw	r22, r30
    18ae:	ff 27       	eor	r31, r31
    18b0:	93 58       	subi	r25, 0x83	; 131
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	2a f0       	brmi	.+10     	; 0x18c0 <__divsf3_pse+0x6c>
    18b6:	9e 3f       	cpi	r25, 0xFE	; 254
    18b8:	51 05       	cpc	r21, r1
    18ba:	68 f0       	brcs	.+26     	; 0x18d6 <__divsf3_pse+0x82>
    18bc:	b1 c0       	rjmp	.+354    	; 0x1a20 <__fp_inf>
    18be:	fb c0       	rjmp	.+502    	; 0x1ab6 <__fp_szero>
    18c0:	5f 3f       	cpi	r21, 0xFF	; 255
    18c2:	ec f3       	brlt	.-6      	; 0x18be <__divsf3_pse+0x6a>
    18c4:	98 3e       	cpi	r25, 0xE8	; 232
    18c6:	dc f3       	brlt	.-10     	; 0x18be <__divsf3_pse+0x6a>
    18c8:	86 95       	lsr	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b7 95       	ror	r27
    18d0:	f7 95       	ror	r31
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__divsf3_pse+0x74>
    18d6:	88 0f       	add	r24, r24
    18d8:	91 1d       	adc	r25, r1
    18da:	96 95       	lsr	r25
    18dc:	87 95       	ror	r24
    18de:	97 f9       	bld	r25, 7
    18e0:	08 95       	ret
    18e2:	e1 e0       	ldi	r30, 0x01	; 1
    18e4:	66 0f       	add	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	bb 1f       	adc	r27, r27
    18ec:	62 17       	cp	r22, r18
    18ee:	73 07       	cpc	r23, r19
    18f0:	84 07       	cpc	r24, r20
    18f2:	ba 07       	cpc	r27, r26
    18f4:	20 f0       	brcs	.+8      	; 0x18fe <__divsf3_pse+0xaa>
    18f6:	62 1b       	sub	r22, r18
    18f8:	73 0b       	sbc	r23, r19
    18fa:	84 0b       	sbc	r24, r20
    18fc:	ba 0b       	sbc	r27, r26
    18fe:	ee 1f       	adc	r30, r30
    1900:	88 f7       	brcc	.-30     	; 0x18e4 <__divsf3_pse+0x90>
    1902:	e0 95       	com	r30
    1904:	08 95       	ret

00001906 <__fixunssfsi>:
    1906:	bc d0       	rcall	.+376    	; 0x1a80 <__fp_splitA>
    1908:	88 f0       	brcs	.+34     	; 0x192c <__fixunssfsi+0x26>
    190a:	9f 57       	subi	r25, 0x7F	; 127
    190c:	90 f0       	brcs	.+36     	; 0x1932 <__fixunssfsi+0x2c>
    190e:	b9 2f       	mov	r27, r25
    1910:	99 27       	eor	r25, r25
    1912:	b7 51       	subi	r27, 0x17	; 23
    1914:	a0 f0       	brcs	.+40     	; 0x193e <__fixunssfsi+0x38>
    1916:	d1 f0       	breq	.+52     	; 0x194c <__fixunssfsi+0x46>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	1a f0       	brmi	.+6      	; 0x1928 <__fixunssfsi+0x22>
    1922:	ba 95       	dec	r27
    1924:	c9 f7       	brne	.-14     	; 0x1918 <__fixunssfsi+0x12>
    1926:	12 c0       	rjmp	.+36     	; 0x194c <__fixunssfsi+0x46>
    1928:	b1 30       	cpi	r27, 0x01	; 1
    192a:	81 f0       	breq	.+32     	; 0x194c <__fixunssfsi+0x46>
    192c:	c3 d0       	rcall	.+390    	; 0x1ab4 <__fp_zero>
    192e:	b1 e0       	ldi	r27, 0x01	; 1
    1930:	08 95       	ret
    1932:	c0 c0       	rjmp	.+384    	; 0x1ab4 <__fp_zero>
    1934:	67 2f       	mov	r22, r23
    1936:	78 2f       	mov	r23, r24
    1938:	88 27       	eor	r24, r24
    193a:	b8 5f       	subi	r27, 0xF8	; 248
    193c:	39 f0       	breq	.+14     	; 0x194c <__fixunssfsi+0x46>
    193e:	b9 3f       	cpi	r27, 0xF9	; 249
    1940:	cc f3       	brlt	.-14     	; 0x1934 <__fixunssfsi+0x2e>
    1942:	86 95       	lsr	r24
    1944:	77 95       	ror	r23
    1946:	67 95       	ror	r22
    1948:	b3 95       	inc	r27
    194a:	d9 f7       	brne	.-10     	; 0x1942 <__fixunssfsi+0x3c>
    194c:	3e f4       	brtc	.+14     	; 0x195c <__fixunssfsi+0x56>
    194e:	90 95       	com	r25
    1950:	80 95       	com	r24
    1952:	70 95       	com	r23
    1954:	61 95       	neg	r22
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	08 95       	ret

0000195e <__floatunsisf>:
    195e:	e8 94       	clt
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <__floatsisf+0x12>

00001962 <__floatsisf>:
    1962:	97 fb       	bst	r25, 7
    1964:	3e f4       	brtc	.+14     	; 0x1974 <__floatsisf+0x12>
    1966:	90 95       	com	r25
    1968:	80 95       	com	r24
    196a:	70 95       	com	r23
    196c:	61 95       	neg	r22
    196e:	7f 4f       	sbci	r23, 0xFF	; 255
    1970:	8f 4f       	sbci	r24, 0xFF	; 255
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	99 23       	and	r25, r25
    1976:	a9 f0       	breq	.+42     	; 0x19a2 <__floatsisf+0x40>
    1978:	f9 2f       	mov	r31, r25
    197a:	96 e9       	ldi	r25, 0x96	; 150
    197c:	bb 27       	eor	r27, r27
    197e:	93 95       	inc	r25
    1980:	f6 95       	lsr	r31
    1982:	87 95       	ror	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	f1 11       	cpse	r31, r1
    198c:	f8 cf       	rjmp	.-16     	; 0x197e <__floatsisf+0x1c>
    198e:	fa f4       	brpl	.+62     	; 0x19ce <__floatsisf+0x6c>
    1990:	bb 0f       	add	r27, r27
    1992:	11 f4       	brne	.+4      	; 0x1998 <__floatsisf+0x36>
    1994:	60 ff       	sbrs	r22, 0
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <__floatsisf+0x6c>
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <__floatsisf+0x6c>
    19a2:	88 23       	and	r24, r24
    19a4:	11 f0       	breq	.+4      	; 0x19aa <__floatsisf+0x48>
    19a6:	96 e9       	ldi	r25, 0x96	; 150
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <__floatsisf+0x6a>
    19aa:	77 23       	and	r23, r23
    19ac:	21 f0       	breq	.+8      	; 0x19b6 <__floatsisf+0x54>
    19ae:	9e e8       	ldi	r25, 0x8E	; 142
    19b0:	87 2f       	mov	r24, r23
    19b2:	76 2f       	mov	r23, r22
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <__floatsisf+0x5e>
    19b6:	66 23       	and	r22, r22
    19b8:	71 f0       	breq	.+28     	; 0x19d6 <__floatsisf+0x74>
    19ba:	96 e8       	ldi	r25, 0x86	; 134
    19bc:	86 2f       	mov	r24, r22
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	2a f0       	brmi	.+10     	; 0x19ce <__floatsisf+0x6c>
    19c4:	9a 95       	dec	r25
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	da f7       	brpl	.-10     	; 0x19c4 <__floatsisf+0x62>
    19ce:	88 0f       	add	r24, r24
    19d0:	96 95       	lsr	r25
    19d2:	87 95       	ror	r24
    19d4:	97 f9       	bld	r25, 7
    19d6:	08 95       	ret

000019d8 <__fp_cmp>:
    19d8:	99 0f       	add	r25, r25
    19da:	00 08       	sbc	r0, r0
    19dc:	55 0f       	add	r21, r21
    19de:	aa 0b       	sbc	r26, r26
    19e0:	e0 e8       	ldi	r30, 0x80	; 128
    19e2:	fe ef       	ldi	r31, 0xFE	; 254
    19e4:	16 16       	cp	r1, r22
    19e6:	17 06       	cpc	r1, r23
    19e8:	e8 07       	cpc	r30, r24
    19ea:	f9 07       	cpc	r31, r25
    19ec:	c0 f0       	brcs	.+48     	; 0x1a1e <__fp_cmp+0x46>
    19ee:	12 16       	cp	r1, r18
    19f0:	13 06       	cpc	r1, r19
    19f2:	e4 07       	cpc	r30, r20
    19f4:	f5 07       	cpc	r31, r21
    19f6:	98 f0       	brcs	.+38     	; 0x1a1e <__fp_cmp+0x46>
    19f8:	62 1b       	sub	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	95 0b       	sbc	r25, r21
    1a00:	39 f4       	brne	.+14     	; 0x1a10 <__fp_cmp+0x38>
    1a02:	0a 26       	eor	r0, r26
    1a04:	61 f0       	breq	.+24     	; 0x1a1e <__fp_cmp+0x46>
    1a06:	23 2b       	or	r18, r19
    1a08:	24 2b       	or	r18, r20
    1a0a:	25 2b       	or	r18, r21
    1a0c:	21 f4       	brne	.+8      	; 0x1a16 <__fp_cmp+0x3e>
    1a0e:	08 95       	ret
    1a10:	0a 26       	eor	r0, r26
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__fp_cmp+0x3e>
    1a14:	a1 40       	sbci	r26, 0x01	; 1
    1a16:	a6 95       	lsr	r26
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	81 1d       	adc	r24, r1
    1a1c:	81 1d       	adc	r24, r1
    1a1e:	08 95       	ret

00001a20 <__fp_inf>:
    1a20:	97 f9       	bld	r25, 7
    1a22:	9f 67       	ori	r25, 0x7F	; 127
    1a24:	80 e8       	ldi	r24, 0x80	; 128
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	08 95       	ret

00001a2c <__fp_nan>:
    1a2c:	9f ef       	ldi	r25, 0xFF	; 255
    1a2e:	80 ec       	ldi	r24, 0xC0	; 192
    1a30:	08 95       	ret

00001a32 <__fp_pscA>:
    1a32:	00 24       	eor	r0, r0
    1a34:	0a 94       	dec	r0
    1a36:	16 16       	cp	r1, r22
    1a38:	17 06       	cpc	r1, r23
    1a3a:	18 06       	cpc	r1, r24
    1a3c:	09 06       	cpc	r0, r25
    1a3e:	08 95       	ret

00001a40 <__fp_pscB>:
    1a40:	00 24       	eor	r0, r0
    1a42:	0a 94       	dec	r0
    1a44:	12 16       	cp	r1, r18
    1a46:	13 06       	cpc	r1, r19
    1a48:	14 06       	cpc	r1, r20
    1a4a:	05 06       	cpc	r0, r21
    1a4c:	08 95       	ret

00001a4e <__fp_round>:
    1a4e:	09 2e       	mov	r0, r25
    1a50:	03 94       	inc	r0
    1a52:	00 0c       	add	r0, r0
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <__fp_round+0xc>
    1a56:	88 23       	and	r24, r24
    1a58:	52 f0       	brmi	.+20     	; 0x1a6e <__fp_round+0x20>
    1a5a:	bb 0f       	add	r27, r27
    1a5c:	40 f4       	brcc	.+16     	; 0x1a6e <__fp_round+0x20>
    1a5e:	bf 2b       	or	r27, r31
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <__fp_round+0x18>
    1a62:	60 ff       	sbrs	r22, 0
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <__fp_round+0x20>
    1a66:	6f 5f       	subi	r22, 0xFF	; 255
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	08 95       	ret

00001a70 <__fp_split3>:
    1a70:	57 fd       	sbrc	r21, 7
    1a72:	90 58       	subi	r25, 0x80	; 128
    1a74:	44 0f       	add	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	59 f0       	breq	.+22     	; 0x1a90 <__fp_splitA+0x10>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <__fp_splitA+0x1a>
    1a7e:	47 95       	ror	r20

00001a80 <__fp_splitA>:
    1a80:	88 0f       	add	r24, r24
    1a82:	97 fb       	bst	r25, 7
    1a84:	99 1f       	adc	r25, r25
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <__fp_splitA+0x20>
    1a88:	9f 3f       	cpi	r25, 0xFF	; 255
    1a8a:	79 f0       	breq	.+30     	; 0x1aaa <__fp_splitA+0x2a>
    1a8c:	87 95       	ror	r24
    1a8e:	08 95       	ret
    1a90:	12 16       	cp	r1, r18
    1a92:	13 06       	cpc	r1, r19
    1a94:	14 06       	cpc	r1, r20
    1a96:	55 1f       	adc	r21, r21
    1a98:	f2 cf       	rjmp	.-28     	; 0x1a7e <__fp_split3+0xe>
    1a9a:	46 95       	lsr	r20
    1a9c:	f1 df       	rcall	.-30     	; 0x1a80 <__fp_splitA>
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <__fp_splitA+0x30>
    1aa0:	16 16       	cp	r1, r22
    1aa2:	17 06       	cpc	r1, r23
    1aa4:	18 06       	cpc	r1, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	f1 cf       	rjmp	.-30     	; 0x1a8c <__fp_splitA+0xc>
    1aaa:	86 95       	lsr	r24
    1aac:	71 05       	cpc	r23, r1
    1aae:	61 05       	cpc	r22, r1
    1ab0:	08 94       	sec
    1ab2:	08 95       	ret

00001ab4 <__fp_zero>:
    1ab4:	e8 94       	clt

00001ab6 <__fp_szero>:
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	66 27       	eor	r22, r22
    1aba:	77 27       	eor	r23, r23
    1abc:	cb 01       	movw	r24, r22
    1abe:	97 f9       	bld	r25, 7
    1ac0:	08 95       	ret

00001ac2 <__gesf2>:
    1ac2:	8a df       	rcall	.-236    	; 0x19d8 <__fp_cmp>
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <__gesf2+0x6>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	08 95       	ret

00001aca <__udivmodhi4>:
    1aca:	aa 1b       	sub	r26, r26
    1acc:	bb 1b       	sub	r27, r27
    1ace:	51 e1       	ldi	r21, 0x11	; 17
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <__udivmodhi4_ep>

00001ad2 <__udivmodhi4_loop>:
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	a6 17       	cp	r26, r22
    1ad8:	b7 07       	cpc	r27, r23
    1ada:	10 f0       	brcs	.+4      	; 0x1ae0 <__udivmodhi4_ep>
    1adc:	a6 1b       	sub	r26, r22
    1ade:	b7 0b       	sbc	r27, r23

00001ae0 <__udivmodhi4_ep>:
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	5a 95       	dec	r21
    1ae6:	a9 f7       	brne	.-22     	; 0x1ad2 <__udivmodhi4_loop>
    1ae8:	80 95       	com	r24
    1aea:	90 95       	com	r25
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	08 95       	ret

00001af2 <_exit>:
    1af2:	f8 94       	cli

00001af4 <__stop_program>:
    1af4:	ff cf       	rjmp	.-2      	; 0x1af4 <__stop_program>
