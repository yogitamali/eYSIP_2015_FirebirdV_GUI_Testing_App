
FireBirdCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  00001fac  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800210  00800210  00002050  2**0
                  ALLOC
  3 .stab         000036d8  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000acc  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000061f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be2  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000037e  00000000  00000000  00007e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c4  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00008abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000922  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a4  00000000  00000000  000099da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_5>
      18:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_51>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <rotateServo_2AntiClockWise+0x70>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec ea       	ldi	r30, 0xAC	; 172
     17e:	ff e1       	ldi	r31, 0x1F	; 31
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 31       	cpi	r26, 0x10	; 16
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e1       	ldi	r26, 0x10	; 16
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	af 38       	cpi	r26, 0x8F	; 143
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <main>
     1a4:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <servo1_pin_config>:
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
}
void servo1_pin_config (void)	//Configure PORTB 5 pin for servo motor 1 operation
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     1ac:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     1ae:	2d 9a       	sbi	0x05, 5	; 5
}
     1b0:	08 95       	ret

000001b2 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     1b2:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     1b4:	2e 9a       	sbi	0x05, 6	; 5
}
     1b6:	08 95       	ret

000001b8 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     1b8:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     1ba:	2f 9a       	sbi	0x05, 7	; 5
}
     1bc:	08 95       	ret

000001be <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	86 e6       	ldi	r24, 0x66	; 102
     1c0:	9e e0       	ldi	r25, 0x0E	; 14
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_set_4bit+0x4>
     1c6:	00 00       	nop
/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1c8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ca:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1cc:	80 e3       	ldi	r24, 0x30	; 48
     1ce:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1d0:	42 9a       	sbi	0x08, 2	; 8
     1d2:	ef ef       	ldi	r30, 0xFF	; 255
     1d4:	f7 e4       	ldi	r31, 0x47	; 71
     1d6:	31 97       	sbiw	r30, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_set_4bit+0x18>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_set_4bit+0x1e>
     1dc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1de:	42 98       	cbi	0x08, 2	; 8
     1e0:	e6 e6       	ldi	r30, 0x66	; 102
     1e2:	fe e0       	ldi	r31, 0x0E	; 14
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x26>
     1e8:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1ea:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ec:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ee:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1f0:	42 9a       	sbi	0x08, 2	; 8
     1f2:	ef ef       	ldi	r30, 0xFF	; 255
     1f4:	f7 e4       	ldi	r31, 0x47	; 71
     1f6:	31 97       	sbiw	r30, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_set_4bit+0x38>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_set_4bit+0x3e>
     1fc:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1fe:	42 98       	cbi	0x08, 2	; 8
     200:	e6 e6       	ldi	r30, 0x66	; 102
     202:	fe e0       	ldi	r31, 0x0E	; 14
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x46>
     208:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     20a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     20c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     20e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     210:	42 9a       	sbi	0x08, 2	; 8
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	97 e4       	ldi	r25, 0x47	; 71
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <lcd_set_4bit+0x58>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_set_4bit+0x5e>
     21c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     21e:	42 98       	cbi	0x08, 2	; 8
     220:	e6 e6       	ldi	r30, 0x66	; 102
     222:	fe e0       	ldi	r31, 0x0E	; 14
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <lcd_set_4bit+0x66>
     228:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     22a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     22c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     22e:	80 e2       	ldi	r24, 0x20	; 32
     230:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     232:	42 9a       	sbi	0x08, 2	; 8
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	97 e4       	ldi	r25, 0x47	; 71
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_set_4bit+0x7a>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_set_4bit+0x80>
     23e:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     240:	42 98       	cbi	0x08, 2	; 8

	
}
     242:	08 95       	ret

00000244 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     244:	98 b1       	in	r25, 0x08	; 8
     246:	9f 70       	andi	r25, 0x0F	; 15
     248:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     24a:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     24c:	28 2f       	mov	r18, r24
     24e:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     250:	92 2b       	or	r25, r18
     252:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     254:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     256:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     258:	42 9a       	sbi	0x08, 2	; 8
     25a:	ef ef       	ldi	r30, 0xFF	; 255
     25c:	f7 e4       	ldi	r31, 0x47	; 71
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <lcd_wr_command+0x1a>
     262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_wr_command+0x20>
     264:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     266:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	9f 70       	andi	r25, 0x0F	; 15
     26c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     26e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     270:	82 95       	swap	r24
     272:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     274:	89 2b       	or	r24, r25
     276:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     278:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     27a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     27c:	42 9a       	sbi	0x08, 2	; 8
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	97 e4       	ldi	r25, 0x47	; 71
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_wr_command+0x3e>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_wr_command+0x44>
     288:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     28a:	42 98       	cbi	0x08, 2	; 8
}
     28c:	08 95       	ret

0000028e <lcd_init>:
     28e:	86 e6       	ldi	r24, 0x66	; 102
     290:	9e e0       	ldi	r25, 0x0E	; 14
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x4>
     296:	00 00       	nop
/*****Function to Initialize LCD*****/
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     298:	88 e2       	ldi	r24, 0x28	; 40
     29a:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
	lcd_wr_command(0x01);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
	lcd_wr_command(0x06);
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
	lcd_wr_command(0x0E);
     2aa:	8e e0       	ldi	r24, 0x0E	; 14
     2ac:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
	lcd_wr_command(0x80);
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
		
}
     2b6:	08 95       	ret

000002b8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2b8:	98 b1       	in	r25, 0x08	; 8
     2ba:	9f 70       	andi	r25, 0x0F	; 15
     2bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2be:	98 b1       	in	r25, 0x08	; 8
/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2c0:	28 2f       	mov	r18, r24
     2c2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2c4:	92 2b       	or	r25, r18
     2c6:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2c8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2cc:	42 9a       	sbi	0x08, 2	; 8
     2ce:	ef ef       	ldi	r30, 0xFF	; 255
     2d0:	f7 e4       	ldi	r31, 0x47	; 71
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_wr_char+0x1a>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_wr_char+0x20>
     2d8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2da:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2dc:	98 b1       	in	r25, 0x08	; 8
     2de:	9f 70       	andi	r25, 0x0F	; 15
     2e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2e2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2e4:	82 95       	swap	r24
     2e6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2e8:	89 2b       	or	r24, r25
     2ea:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2ec:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2f0:	42 9a       	sbi	0x08, 2	; 8
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	97 e4       	ldi	r25, 0x47	; 71
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_wr_char+0x3e>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_wr_char+0x44>
     2fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2fe:	42 98       	cbi	0x08, 2	; 8
}
     300:	08 95       	ret

00000302 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     302:	80 e8       	ldi	r24, 0x80	; 128
     304:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
}
     308:	08 95       	ret

0000030a <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     310:	88 81       	ld	r24, Y
     312:	88 23       	and	r24, r24
     314:	31 f0       	breq	.+12     	; 0x322 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
     316:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     318:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
     31c:	89 91       	ld	r24, Y+
     31e:	88 23       	and	r24, r24
     320:	d9 f7       	brne	.-10     	; 0x318 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
	switch (row) {
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	79 f0       	breq	.+30     	; 0x34a <lcd_cursor+0x22>
     32c:	83 30       	cpi	r24, 0x03	; 3
     32e:	18 f4       	brcc	.+6      	; 0x336 <lcd_cursor+0xe>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	c9 f4       	brne	.+50     	; 0x366 <lcd_cursor+0x3e>
     334:	05 c0       	rjmp	.+10     	; 0x340 <lcd_cursor+0x18>
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	69 f0       	breq	.+26     	; 0x354 <lcd_cursor+0x2c>
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	a1 f4       	brne	.+40     	; 0x366 <lcd_cursor+0x3e>
     33e:	0f c0       	rjmp	.+30     	; 0x35e <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     340:	86 2f       	mov	r24, r22
     342:	81 58       	subi	r24, 0x81	; 129
     344:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
     348:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     34a:	86 2f       	mov	r24, r22
     34c:	81 54       	subi	r24, 0x41	; 65
     34e:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
     352:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     354:	86 2f       	mov	r24, r22
     356:	8d 56       	subi	r24, 0x6D	; 109
     358:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
     35c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     35e:	86 2f       	mov	r24, r22
     360:	8d 52       	subi	r24, 0x2D	; 45
     362:	0e 94 22 01 	call	0x244	; 0x244 <lcd_wr_command>
     366:	08 95       	ret

00000368 <lcd_print>:
	}
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	8a 01       	movw	r16, r20
     372:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     374:	88 23       	and	r24, r24
     376:	11 f0       	breq	.+4      	; 0x37c <lcd_print+0x14>
     378:	66 23       	and	r22, r22
     37a:	19 f4       	brne	.+6      	; 0x382 <lcd_print+0x1a>
	{
		lcd_home();
     37c:	0e 94 81 01 	call	0x302	; 0x302 <lcd_home>
     380:	02 c0       	rjmp	.+4      	; 0x386 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     382:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     386:	c5 30       	cpi	r28, 0x05	; 5
     388:	d1 05       	cpc	r29, r1
     38a:	71 f4       	brne	.+28     	; 0x3a8 <lcd_print+0x40>
	{
		million=value/10000+48;
     38c:	c8 01       	movw	r24, r16
     38e:	60 e1       	ldi	r22, 0x10	; 16
     390:	77 e2       	ldi	r23, 0x27	; 39
     392:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     396:	cb 01       	movw	r24, r22
     398:	c0 96       	adiw	r24, 0x30	; 48
     39a:	90 93 55 02 	sts	0x0255, r25
     39e:	80 93 54 02 	sts	0x0254, r24
		lcd_wr_char(million);
     3a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     3a8:	c4 30       	cpi	r28, 0x04	; 4
     3aa:	d1 05       	cpc	r29, r1
     3ac:	b9 f4       	brne	.+46     	; 0x3dc <lcd_print+0x74>
	{
		temp = value/1000;
     3ae:	c8 01       	movw	r24, r16
     3b0:	68 ee       	ldi	r22, 0xE8	; 232
     3b2:	73 e0       	ldi	r23, 0x03	; 3
     3b4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     3b8:	cb 01       	movw	r24, r22
     3ba:	70 93 62 02 	sts	0x0262, r23
     3be:	60 93 61 02 	sts	0x0261, r22
		thousand = temp%10 + 48;
     3c2:	6a e0       	ldi	r22, 0x0A	; 10
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     3ca:	c0 96       	adiw	r24, 0x30	; 48
     3cc:	90 93 87 02 	sts	0x0287, r25
     3d0:	80 93 86 02 	sts	0x0286, r24
		lcd_wr_char(thousand);
     3d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	01 c0       	rjmp	.+2      	; 0x3de <lcd_print+0x76>
}

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3de:	c3 30       	cpi	r28, 0x03	; 3
     3e0:	d1 05       	cpc	r29, r1
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <lcd_print+0x80>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	b1 f4       	brne	.+44     	; 0x414 <lcd_print+0xac>
	{
		temp = value/100;
     3e8:	c8 01       	movw	r24, r16
     3ea:	64 e6       	ldi	r22, 0x64	; 100
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     3f2:	cb 01       	movw	r24, r22
     3f4:	70 93 62 02 	sts	0x0262, r23
     3f8:	60 93 61 02 	sts	0x0261, r22
		hundred = temp%10 + 48;
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     404:	c0 96       	adiw	r24, 0x30	; 48
     406:	90 93 7f 02 	sts	0x027F, r25
     40a:	80 93 7e 02 	sts	0x027E, r24
		lcd_wr_char(hundred);
     40e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     412:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     414:	c2 30       	cpi	r28, 0x02	; 2
     416:	d1 05       	cpc	r29, r1
     418:	11 f0       	breq	.+4      	; 0x41e <lcd_print+0xb6>
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	b1 f4       	brne	.+44     	; 0x44a <lcd_print+0xe2>
	{
		temp = value/10;
     41e:	2a e0       	ldi	r18, 0x0A	; 10
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	c8 01       	movw	r24, r16
     424:	b9 01       	movw	r22, r18
     426:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     42a:	cb 01       	movw	r24, r22
     42c:	70 93 62 02 	sts	0x0262, r23
     430:	60 93 61 02 	sts	0x0261, r22
		tens = temp%10 + 48;
     434:	b9 01       	movw	r22, r18
     436:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     43a:	c0 96       	adiw	r24, 0x30	; 48
     43c:	90 93 72 02 	sts	0x0272, r25
     440:	80 93 71 02 	sts	0x0271, r24
		lcd_wr_char(tens);
     444:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     448:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     44a:	c1 30       	cpi	r28, 0x01	; 1
     44c:	d1 05       	cpc	r29, r1
     44e:	11 f0       	breq	.+4      	; 0x454 <lcd_print+0xec>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	61 f4       	brne	.+24     	; 0x46c <lcd_print+0x104>
	{
		unit = value%10 + 48;
     454:	c8 01       	movw	r24, r16
     456:	6a e0       	ldi	r22, 0x0A	; 10
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodhi4>
     45e:	c0 96       	adiw	r24, 0x30	; 48
     460:	90 93 85 02 	sts	0x0285, r25
     464:	80 93 84 02 	sts	0x0284, r24
		lcd_wr_char(unit);
     468:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
	}
	if(digits>5)
     46c:	c6 30       	cpi	r28, 0x06	; 6
     46e:	d1 05       	cpc	r29, r1
     470:	1c f0       	brlt	.+6      	; 0x478 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     472:	85 e4       	ldi	r24, 0x45	; 69
     474:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
	}
	
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <left_encoder_pin_config>:
volatile unsigned int Degrees; //to accept angle in degrees for turning

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     482:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     484:	74 9a       	sbi	0x0e, 4	; 14
}
     486:	08 95       	ret

00000488 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     488:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     48a:	75 9a       	sbi	0x0e, 5	; 14
}
     48c:	08 95       	ret

0000048e <encoder_pin_config>:

//Function to initialize ports
void encoder_pin_config(void)
{
	left_encoder_pin_config(); //left encoder pin config
     48e:	0e 94 41 02 	call	0x482	; 0x482 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     492:	0e 94 44 02 	call	0x488	; 0x488 <right_encoder_pin_config>
}
     496:	08 95       	ret

00000498 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     498:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     49a:	ea e6       	ldi	r30, 0x6A	; 106
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	82 60       	ori	r24, 0x02	; 2
     4a2:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     4a4:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     4a6:	78 94       	sei
}
     4a8:	08 95       	ret

000004aa <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     4aa:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     4ac:	ea e6       	ldi	r30, 0x6A	; 106
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	88 60       	ori	r24, 0x08	; 8
     4b4:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     4b6:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     4b8:	78 94       	sei
}
     4ba:	08 95       	ret

000004bc <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	8f 93       	push	r24
     4c8:	9f 93       	push	r25
     4ca:	af 93       	push	r26
     4cc:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     4ce:	80 91 1c 02 	lds	r24, 0x021C
     4d2:	90 91 1d 02 	lds	r25, 0x021D
     4d6:	a0 91 1e 02 	lds	r26, 0x021E
     4da:	b0 91 1f 02 	lds	r27, 0x021F
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	a1 1d       	adc	r26, r1
     4e2:	b1 1d       	adc	r27, r1
     4e4:	80 93 1c 02 	sts	0x021C, r24
     4e8:	90 93 1d 02 	sts	0x021D, r25
     4ec:	a0 93 1e 02 	sts	0x021E, r26
     4f0:	b0 93 1f 02 	sts	0x021F, r27
}
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	0f 90       	pop	r0
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	0f 90       	pop	r0
     502:	1f 90       	pop	r1
     504:	18 95       	reti

00000506 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     506:	1f 92       	push	r1
     508:	0f 92       	push	r0
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	0f 92       	push	r0
     50e:	11 24       	eor	r1, r1
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	af 93       	push	r26
     516:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     518:	80 91 20 02 	lds	r24, 0x0220
     51c:	90 91 21 02 	lds	r25, 0x0221
     520:	a0 91 22 02 	lds	r26, 0x0222
     524:	b0 91 23 02 	lds	r27, 0x0223
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	a1 1d       	adc	r26, r1
     52c:	b1 1d       	adc	r27, r1
     52e:	80 93 20 02 	sts	0x0220, r24
     532:	90 93 21 02 	sts	0x0221, r25
     536:	a0 93 22 02 	sts	0x0222, r26
     53a:	b0 93 23 02 	sts	0x0223, r27
}
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     556:	bc 01       	movw	r22, r24
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     560:	28 e4       	ldi	r18, 0x48	; 72
     562:	31 ee       	ldi	r19, 0xE1	; 225
     564:	42 e8       	ldi	r20, 0x82	; 130
     566:	50 e4       	ldi	r21, 0x40	; 64
     568:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     56c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     570:	dc 01       	movw	r26, r24
     572:	cb 01       	movw	r24, r22
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     578:	10 92 1c 02 	sts	0x021C, r1
     57c:	10 92 1d 02 	sts	0x021D, r1
     580:	10 92 1e 02 	sts	0x021E, r1
     584:	10 92 1f 02 	sts	0x021F, r1
	ShaftCountLeft = 0;
     588:	10 92 20 02 	sts	0x0220, r1
     58c:	10 92 21 02 	sts	0x0221, r1
     590:	10 92 22 02 	sts	0x0222, r1
     594:	10 92 23 02 	sts	0x0223, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	c0 e0       	ldi	r28, 0x00	; 0
     59c:	40 91 1c 02 	lds	r20, 0x021C
     5a0:	50 91 1d 02 	lds	r21, 0x021D
     5a4:	60 91 1e 02 	lds	r22, 0x021E
     5a8:	70 91 1f 02 	lds	r23, 0x021F
     5ac:	00 91 20 02 	lds	r16, 0x0220
     5b0:	10 91 21 02 	lds	r17, 0x0221
     5b4:	20 91 22 02 	lds	r18, 0x0222
     5b8:	30 91 23 02 	lds	r19, 0x0223
     5bc:	ef 2f       	mov	r30, r31
     5be:	48 17       	cp	r20, r24
     5c0:	59 07       	cpc	r21, r25
     5c2:	6a 07       	cpc	r22, r26
     5c4:	7b 07       	cpc	r23, r27
     5c6:	08 f4       	brcc	.+2      	; 0x5ca <angle_rotate+0x7a>
     5c8:	ec 2f       	mov	r30, r28
     5ca:	ee 23       	and	r30, r30
     5cc:	49 f4       	brne	.+18     	; 0x5e0 <angle_rotate+0x90>
     5ce:	4f 2f       	mov	r20, r31
     5d0:	08 17       	cp	r16, r24
     5d2:	19 07       	cpc	r17, r25
     5d4:	2a 07       	cpc	r18, r26
     5d6:	3b 07       	cpc	r19, r27
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <angle_rotate+0x8c>
     5da:	4c 2f       	mov	r20, r28
     5dc:	44 23       	and	r20, r20
     5de:	f1 f2       	breq	.-68     	; 0x59c <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     5e0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <stop>
}
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     5ec:	bc 01       	movw	r22, r24
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     5f6:	25 ee       	ldi	r18, 0xE5	; 229
     5f8:	30 ed       	ldi	r19, 0xD0	; 208
     5fa:	4a ea       	ldi	r20, 0xAA	; 170
     5fc:	50 e4       	ldi	r21, 0x40	; 64
     5fe:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     602:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     606:	46 2f       	mov	r20, r22
     608:	57 2f       	mov	r21, r23
     60a:	68 2f       	mov	r22, r24
     60c:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     60e:	10 92 1c 02 	sts	0x021C, r1
     612:	10 92 1d 02 	sts	0x021D, r1
     616:	10 92 1e 02 	sts	0x021E, r1
     61a:	10 92 1f 02 	sts	0x021F, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     61e:	80 91 1c 02 	lds	r24, 0x021C
     622:	90 91 1d 02 	lds	r25, 0x021D
     626:	a0 91 1e 02 	lds	r26, 0x021E
     62a:	b0 91 1f 02 	lds	r27, 0x021F
     62e:	48 17       	cp	r20, r24
     630:	59 07       	cpc	r21, r25
     632:	6a 07       	cpc	r22, r26
     634:	7b 07       	cpc	r23, r27
     636:	98 f7       	brcc	.-26     	; 0x61e <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     638:	0e 94 9e 06 	call	0xd3c	; 0xd3c <stop>
}
     63c:	08 95       	ret

0000063e <servo_pin_config>:
void servo_pin_config(void)
{
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     63e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     642:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <servo2_pin_config>
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     646:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <servo3_pin_config>
}
     64a:	08 95       	ret

0000064c <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     64c:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     650:	68 2f       	mov	r22, r24
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     65c:	2b e7       	ldi	r18, 0x7B	; 123
     65e:	34 e1       	ldi	r19, 0x14	; 20
     660:	4e ee       	ldi	r20, 0xEE	; 238
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	4c e0       	ldi	r20, 0x0C	; 12
     66e:	52 e4       	ldi	r21, 0x42	; 66
     670:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     674:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     678:	60 93 88 00 	sts	0x0088, r22
}
     67c:	08 95       	ret

0000067e <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     67e:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     682:	68 2f       	mov	r22, r24
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     68e:	2b e7       	ldi	r18, 0x7B	; 123
     690:	34 e1       	ldi	r19, 0x14	; 20
     692:	4e ee       	ldi	r20, 0xEE	; 238
     694:	5f e3       	ldi	r21, 0x3F	; 63
     696:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4c e0       	ldi	r20, 0x0C	; 12
     6a0:	52 e4       	ldi	r21, 0x42	; 66
     6a2:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     6a6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     6aa:	60 93 8a 00 	sts	0x008A, r22
}
     6ae:	08 95       	ret

000006b0 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     6b0:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
     6b4:	68 2f       	mov	r22, r24
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     6c0:	2b e7       	ldi	r18, 0x7B	; 123
     6c2:	34 e1       	ldi	r19, 0x14	; 20
     6c4:	4e ee       	ldi	r20, 0xEE	; 238
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	4c e0       	ldi	r20, 0x0C	; 12
     6d2:	52 e4       	ldi	r21, 0x42	; 66
     6d4:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
     6d8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     6dc:	60 93 8c 00 	sts	0x008C, r22
}
     6e0:	08 95       	ret

000006e2 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	80 93 88 00 	sts	0x0088, r24
}
     6ee:	08 95       	ret

000006f0 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	80 93 8a 00 	sts	0x008A, r24
}
     6fc:	08 95       	ret

000006fe <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	80 93 8c 00 	sts	0x008C, r24
} 
     70a:	08 95       	ret

0000070c <rotateServo_1AntiClockWise>:

void rotateServo_1AntiClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 1 in anti-clockwise direction with a slower speed, 
																				     Therefore, intialAngle>=degrees*/
{
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     72e:	2b e7       	ldi	r18, 0x7B	; 123
     730:	34 e1       	ldi	r19, 0x14	; 20
     732:	4e ee       	ldi	r20, 0xEE	; 238
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4c e0       	ldi	r20, 0x0C	; 12
     740:	52 e4       	ldi	r21, 0x42	; 66
     742:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     746:	06 2f       	mov	r16, r22
     748:	a7 2e       	mov	r10, r23
     74a:	88 2e       	mov	r8, r24
     74c:	d6 2e       	mov	r13, r22
     74e:	e7 2e       	mov	r14, r23
     750:	f8 2e       	mov	r15, r24
     752:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     754:	6c 2f       	mov	r22, r28
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     760:	2b e7       	ldi	r18, 0x7B	; 123
     762:	34 e1       	ldi	r19, 0x14	; 20
     764:	4e ee       	ldi	r20, 0xEE	; 238
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	4c e0       	ldi	r20, 0x0C	; 12
     772:	52 e4       	ldi	r21, 0x42	; 66
     774:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     778:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     77c:	c6 2f       	mov	r28, r22
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     788:	1a 2d       	mov	r17, r10
     78a:	28 2d       	mov	r18, r8
     78c:	3d 2f       	mov	r19, r29
     78e:	a9 01       	movw	r20, r18
     790:	98 01       	movw	r18, r16
     792:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__gesf2>
     796:	88 23       	and	r24, r24
     798:	34 f1       	brlt	.+76     	; 0x7e6 <rotateServo_1AntiClockWise+0xda>
	{
		OCR1AH = 0x00;
     79a:	0f 2e       	mov	r0, r31
     79c:	f9 e8       	ldi	r31, 0x89	; 137
     79e:	af 2e       	mov	r10, r31
     7a0:	bb 24       	eor	r11, r11
     7a2:	f0 2d       	mov	r31, r0
		OCR1AL = (unsigned char) i;
     7a4:	0f 2e       	mov	r0, r31
     7a6:	f8 e8       	ldi	r31, 0x88	; 136
     7a8:	8f 2e       	mov	r8, r31
     7aa:	99 24       	eor	r9, r9
     7ac:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
	{
		OCR1AH = 0x00;
     7ae:	d5 01       	movw	r26, r10
     7b0:	1c 92       	st	X, r1
		OCR1AL = (unsigned char) i;
     7b2:	f4 01       	movw	r30, r8
     7b4:	c0 83       	st	Z, r28
     7b6:	86 e6       	ldi	r24, 0x66	; 102
     7b8:	96 ee       	ldi	r25, 0xE6	; 230
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	a0 40       	sbci	r26, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <rotateServo_1AntiClockWise+0xb0>
																				     Therefore, intialAngle>=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     7c4:	c1 50       	subi	r28, 0x01	; 1
     7c6:	6c 2f       	mov	r22, r28
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     7d2:	0d 2d       	mov	r16, r13
     7d4:	1e 2d       	mov	r17, r14
     7d6:	2f 2d       	mov	r18, r15
     7d8:	3d 2f       	mov	r19, r29
     7da:	a9 01       	movw	r20, r18
     7dc:	98 01       	movw	r18, r16
     7de:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__gesf2>
     7e2:	88 23       	and	r24, r24
     7e4:	24 f7       	brge	.-56     	; 0x7ae <rotateServo_1AntiClockWise+0xa2>
	{
		OCR1AH = 0x00;
		OCR1AL = (unsigned char) i;
		_delay_ms(20);
	}
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	8f 90       	pop	r8
     7fc:	08 95       	ret

000007fe <rotateServo_1ClockWise>:
void rotateServo_1ClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 2 in clockwise direction with a slower speed, 
																				 Therefore, intialAngle<=degrees*/
{
     7fe:	8f 92       	push	r8
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     820:	2b e7       	ldi	r18, 0x7B	; 123
     822:	34 e1       	ldi	r19, 0x14	; 20
     824:	4e ee       	ldi	r20, 0xEE	; 238
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	4c e0       	ldi	r20, 0x0C	; 12
     832:	52 e4       	ldi	r21, 0x42	; 66
     834:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     838:	06 2f       	mov	r16, r22
     83a:	a7 2e       	mov	r10, r23
     83c:	88 2e       	mov	r8, r24
     83e:	d6 2e       	mov	r13, r22
     840:	e7 2e       	mov	r14, r23
     842:	f8 2e       	mov	r15, r24
     844:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     846:	6c 2f       	mov	r22, r28
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     852:	2b e7       	ldi	r18, 0x7B	; 123
     854:	34 e1       	ldi	r19, 0x14	; 20
     856:	4e ee       	ldi	r20, 0xEE	; 238
     858:	5f e3       	ldi	r21, 0x3F	; 63
     85a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	4c e0       	ldi	r20, 0x0C	; 12
     864:	52 e4       	ldi	r21, 0x42	; 66
     866:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     86a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     86e:	c6 2f       	mov	r28, r22
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     87a:	1a 2d       	mov	r17, r10
     87c:	28 2d       	mov	r18, r8
     87e:	3d 2f       	mov	r19, r29
     880:	a9 01       	movw	r20, r18
     882:	98 01       	movw	r18, r16
     884:	0e 94 a5 0c 	call	0x194a	; 0x194a <__cmpsf2>
     888:	18 16       	cp	r1, r24
     88a:	34 f1       	brlt	.+76     	; 0x8d8 <rotateServo_1ClockWise+0xda>
	{
		OCR1AH = 0x00;
     88c:	0f 2e       	mov	r0, r31
     88e:	f9 e8       	ldi	r31, 0x89	; 137
     890:	af 2e       	mov	r10, r31
     892:	bb 24       	eor	r11, r11
     894:	f0 2d       	mov	r31, r0
		OCR1AL = (unsigned char) i;
     896:	0f 2e       	mov	r0, r31
     898:	f8 e8       	ldi	r31, 0x88	; 136
     89a:	8f 2e       	mov	r8, r31
     89c:	99 24       	eor	r9, r9
     89e:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
	{
		OCR1AH = 0x00;
     8a0:	d5 01       	movw	r26, r10
     8a2:	1c 92       	st	X, r1
		OCR1AL = (unsigned char) i;
     8a4:	f4 01       	movw	r30, r8
     8a6:	c0 83       	st	Z, r28
     8a8:	86 e6       	ldi	r24, 0x66	; 102
     8aa:	96 ee       	ldi	r25, 0xE6	; 230
     8ac:	a0 e0       	ldi	r26, 0x00	; 0
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	90 40       	sbci	r25, 0x00	; 0
     8b2:	a0 40       	sbci	r26, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <rotateServo_1ClockWise+0xb0>
																				 Therefore, intialAngle<=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     8b6:	cf 5f       	subi	r28, 0xFF	; 255
     8b8:	6c 2f       	mov	r22, r28
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     8c4:	0d 2d       	mov	r16, r13
     8c6:	1e 2d       	mov	r17, r14
     8c8:	2f 2d       	mov	r18, r15
     8ca:	3d 2f       	mov	r19, r29
     8cc:	a9 01       	movw	r20, r18
     8ce:	98 01       	movw	r18, r16
     8d0:	0e 94 a5 0c 	call	0x194a	; 0x194a <__cmpsf2>
     8d4:	18 16       	cp	r1, r24
     8d6:	24 f7       	brge	.-56     	; 0x8a0 <rotateServo_1ClockWise+0xa2>
	{
		OCR1AH = 0x00;
		OCR1AL = (unsigned char) i;
		_delay_ms(20);
	}
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	9f 90       	pop	r9
     8ec:	8f 90       	pop	r8
     8ee:	08 95       	ret

000008f0 <rotateServo_2AntiClockWise>:
void rotateServo_2AntiClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 1 in anti-clockwise direction with a slower speed, 
																				     Therefore, intialAngle>=degrees*/
{
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     912:	2b e7       	ldi	r18, 0x7B	; 123
     914:	34 e1       	ldi	r19, 0x14	; 20
     916:	4e ee       	ldi	r20, 0xEE	; 238
     918:	5f e3       	ldi	r21, 0x3F	; 63
     91a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	4c e0       	ldi	r20, 0x0C	; 12
     924:	52 e4       	ldi	r21, 0x42	; 66
     926:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     92a:	06 2f       	mov	r16, r22
     92c:	a7 2e       	mov	r10, r23
     92e:	88 2e       	mov	r8, r24
     930:	d6 2e       	mov	r13, r22
     932:	e7 2e       	mov	r14, r23
     934:	f8 2e       	mov	r15, r24
     936:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     938:	6c 2f       	mov	r22, r28
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     944:	2b e7       	ldi	r18, 0x7B	; 123
     946:	34 e1       	ldi	r19, 0x14	; 20
     948:	4e ee       	ldi	r20, 0xEE	; 238
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4c e0       	ldi	r20, 0x0C	; 12
     956:	52 e4       	ldi	r21, 0x42	; 66
     958:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     95c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     960:	c6 2f       	mov	r28, r22
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     96c:	1a 2d       	mov	r17, r10
     96e:	28 2d       	mov	r18, r8
     970:	3d 2f       	mov	r19, r29
     972:	a9 01       	movw	r20, r18
     974:	98 01       	movw	r18, r16
     976:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__gesf2>
     97a:	88 23       	and	r24, r24
     97c:	34 f1       	brlt	.+76     	; 0x9ca <rotateServo_2AntiClockWise+0xda>
	{
		OCR1BH = 0x00;
     97e:	0f 2e       	mov	r0, r31
     980:	fb e8       	ldi	r31, 0x8B	; 139
     982:	af 2e       	mov	r10, r31
     984:	bb 24       	eor	r11, r11
     986:	f0 2d       	mov	r31, r0
		OCR1BL = (unsigned char) i;
     988:	0f 2e       	mov	r0, r31
     98a:	fa e8       	ldi	r31, 0x8A	; 138
     98c:	8f 2e       	mov	r8, r31
     98e:	99 24       	eor	r9, r9
     990:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
	{
		OCR1BH = 0x00;
     992:	d5 01       	movw	r26, r10
     994:	1c 92       	st	X, r1
		OCR1BL = (unsigned char) i;
     996:	f4 01       	movw	r30, r8
     998:	c0 83       	st	Z, r28
     99a:	86 e6       	ldi	r24, 0x66	; 102
     99c:	96 ee       	ldi	r25, 0xE6	; 230
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	90 40       	sbci	r25, 0x00	; 0
     9a4:	a0 40       	sbci	r26, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <rotateServo_2AntiClockWise+0xb0>
																				     Therefore, intialAngle>=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i>=PositionPanServo;i--)
     9a8:	c1 50       	subi	r28, 0x01	; 1
     9aa:	6c 2f       	mov	r22, r28
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     9b6:	0d 2d       	mov	r16, r13
     9b8:	1e 2d       	mov	r17, r14
     9ba:	2f 2d       	mov	r18, r15
     9bc:	3d 2f       	mov	r19, r29
     9be:	a9 01       	movw	r20, r18
     9c0:	98 01       	movw	r18, r16
     9c2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__gesf2>
     9c6:	88 23       	and	r24, r24
     9c8:	24 f7       	brge	.-56     	; 0x992 <rotateServo_2AntiClockWise+0xa2>
	{
		OCR1BH = 0x00;
		OCR1BL = (unsigned char) i;
		_delay_ms(20);
	}
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	8f 90       	pop	r8
     9e0:	08 95       	ret

000009e2 <rotateServo_2ClockWise>:
void rotateServo_2ClockWise(unsigned char initialAngle, unsigned char degrees) /*Rotates servo 2 in clockwise direction with a slower speed, 
																				 Therefore, intialAngle<=degrees*/
{
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	c8 2f       	mov	r28, r24
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     a04:	2b e7       	ldi	r18, 0x7B	; 123
     a06:	34 e1       	ldi	r19, 0x14	; 20
     a08:	4e ee       	ldi	r20, 0xEE	; 238
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4c e0       	ldi	r20, 0x0C	; 12
     a16:	52 e4       	ldi	r21, 0x42	; 66
     a18:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     a1c:	06 2f       	mov	r16, r22
     a1e:	a7 2e       	mov	r10, r23
     a20:	88 2e       	mov	r8, r24
     a22:	d6 2e       	mov	r13, r22
     a24:	e7 2e       	mov	r14, r23
     a26:	f8 2e       	mov	r15, r24
     a28:	d9 2f       	mov	r29, r25
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     a2a:	6c 2f       	mov	r22, r28
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
     a36:	2b e7       	ldi	r18, 0x7B	; 123
     a38:	34 e1       	ldi	r19, 0x14	; 20
     a3a:	4e ee       	ldi	r20, 0xEE	; 238
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	4c e0       	ldi	r20, 0x0C	; 12
     a48:	52 e4       	ldi	r21, 0x42	; 66
     a4a:	0e 94 41 0c 	call	0x1882	; 0x1882 <__addsf3>
     a4e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fixunssfsi>
     a52:	c6 2f       	mov	r28, r22
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     a5e:	1a 2d       	mov	r17, r10
     a60:	28 2d       	mov	r18, r8
     a62:	3d 2f       	mov	r19, r29
     a64:	a9 01       	movw	r20, r18
     a66:	98 01       	movw	r18, r16
     a68:	0e 94 a5 0c 	call	0x194a	; 0x194a <__cmpsf2>
     a6c:	18 16       	cp	r1, r24
     a6e:	34 f1       	brlt	.+76     	; 0xabc <rotateServo_2ClockWise+0xda>
	{
		OCR1BH = 0x00;
     a70:	0f 2e       	mov	r0, r31
     a72:	fb e8       	ldi	r31, 0x8B	; 139
     a74:	af 2e       	mov	r10, r31
     a76:	bb 24       	eor	r11, r11
     a78:	f0 2d       	mov	r31, r0
		OCR1BL = (unsigned char) i;
     a7a:	0f 2e       	mov	r0, r31
     a7c:	fa e8       	ldi	r31, 0x8A	; 138
     a7e:	8f 2e       	mov	r8, r31
     a80:	99 24       	eor	r9, r9
     a82:	f0 2d       	mov	r31, r0
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
	{
		OCR1BH = 0x00;
     a84:	d5 01       	movw	r26, r10
     a86:	1c 92       	st	X, r1
		OCR1BL = (unsigned char) i;
     a88:	f4 01       	movw	r30, r8
     a8a:	c0 83       	st	Z, r28
     a8c:	86 e6       	ldi	r24, 0x66	; 102
     a8e:	96 ee       	ldi	r25, 0xE6	; 230
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	90 40       	sbci	r25, 0x00	; 0
     a96:	a0 40       	sbci	r26, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <rotateServo_2ClockWise+0xb0>
																				 Therefore, intialAngle<=degrees*/
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	char i;
	for (i=(((float)initialAngle / 1.86) + 35.0);i<=PositionPanServo;i++)
     a9a:	cf 5f       	subi	r28, 0xFF	; 255
     a9c:	6c 2f       	mov	r22, r28
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
     aa8:	0d 2d       	mov	r16, r13
     aaa:	1e 2d       	mov	r17, r14
     aac:	2f 2d       	mov	r18, r15
     aae:	3d 2f       	mov	r19, r29
     ab0:	a9 01       	movw	r20, r18
     ab2:	98 01       	movw	r18, r16
     ab4:	0e 94 a5 0c 	call	0x194a	; 0x194a <__cmpsf2>
     ab8:	18 16       	cp	r1, r24
     aba:	24 f7       	brge	.-56     	; 0xa84 <rotateServo_2ClockWise+0xa2>
	{
		OCR1BH = 0x00;
		OCR1BL = (unsigned char) i;
		_delay_ms(20);
	}
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	08 95       	ret

00000ad4 <motion_pin_config>:
unsigned int right_motor_pulse_count_locked = 0x00; // locked at serial comm isr
//-------------------------------------------------------------------------------

void motion_pin_config (void)
{
 DDRA = DDRA | 0x0F;   //set direction of the PORTA 3 to PORTA 0 pins as output
     ad4:	81 b1       	in	r24, 0x01	; 1
     ad6:	8f 60       	ori	r24, 0x0F	; 15
     ad8:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     ada:	82 b1       	in	r24, 0x02	; 2
     adc:	80 7f       	andi	r24, 0xF0	; 240
     ade:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     ae0:	ea e0       	ldi	r30, 0x0A	; 10
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	80 81       	ld	r24, Z
     ae6:	88 61       	ori	r24, 0x18	; 24
     ae8:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     aea:	eb e0       	ldi	r30, 0x0B	; 11
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	80 81       	ld	r24, Z
     af0:	88 61       	ori	r24, 0x18	; 24
     af2:	80 83       	st	Z, r24
}
     af4:	08 95       	ret

00000af6 <spi_pin_config>:
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
}*/

void spi_pin_config (void)
{
 DDRB = DDRB | 0x07;
     af6:	84 b1       	in	r24, 0x04	; 4
     af8:	87 60       	ori	r24, 0x07	; 7
     afa:	84 b9       	out	0x04, r24	; 4
 PORTB = PORTB | 0x07;
     afc:	85 b1       	in	r24, 0x05	; 5
     afe:	87 60       	ori	r24, 0x07	; 7
     b00:	85 b9       	out	0x05, r24	; 5
}
     b02:	08 95       	ret

00000b04 <lcd_port_config>:

void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     b04:	87 b1       	in	r24, 0x07	; 7
     b06:	87 6f       	ori	r24, 0xF7	; 247
     b08:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     b0a:	88 b1       	in	r24, 0x08	; 8
     b0c:	80 78       	andi	r24, 0x80	; 128
     b0e:	88 b9       	out	0x08, r24	; 8
}
     b10:	08 95       	ret

00000b12 <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     b12:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     b14:	43 98       	cbi	0x08, 3	; 8
}
     b16:	08 95       	ret

00000b18 <adc_pin_config>:
}*/

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00;  //set PORTF direction as input
     b18:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00; //set PORTF pins floating
     b1a:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;  //set PORTK direction as input
     b1c:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00; //set PORTK pins floating
     b20:	10 92 08 01 	sts	0x0108, r1
}
     b24:	08 95       	ret

00000b26 <pwm_port_config>:

void pwm_port_config (void)
{
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     b26:	ea e0       	ldi	r30, 0x0A	; 10
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	80 81       	ld	r24, Z
     b2c:	88 61       	ori	r24, 0x18	; 24
     b2e:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     b30:	eb e0       	ldi	r30, 0x0B	; 11
     b32:	f1 e0       	ldi	r31, 0x01	; 1
     b34:	80 81       	ld	r24, Z
     b36:	88 61       	ori	r24, 0x18	; 24
     b38:	80 83       	st	Z, r24
}
     b3a:	08 95       	ret

00000b3c <port_init>:

//Port init for different modules
void port_init(void)
{
 motion_pin_config();
     b3c:	0e 94 6a 05 	call	0xad4	; 0xad4 <motion_pin_config>
 servo1_pin_config();
     b40:	0e 94 d6 00 	call	0x1ac	; 0x1ac <servo1_pin_config>
 servo2_pin_config();
     b44:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <servo2_pin_config>
 servo3_pin_config();
     b48:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <servo3_pin_config>
 spi_pin_config();
     b4c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <spi_pin_config>
 lcd_port_config();
     b50:	0e 94 82 05 	call	0xb04	; 0xb04 <lcd_port_config>
 buzzer_pin_config();           
     b54:	0e 94 89 05 	call	0xb12	; 0xb12 <buzzer_pin_config>
 left_encoder_pin_config();
     b58:	0e 94 41 02 	call	0x482	; 0x482 <left_encoder_pin_config>
 right_encoder_pin_config();
     b5c:	0e 94 44 02 	call	0x488	; 0x488 <right_encoder_pin_config>
 adc_pin_config();
     b60:	0e 94 8c 05 	call	0xb18	; 0xb18 <adc_pin_config>
 pwm_port_config();
     b64:	0e 94 93 05 	call	0xb26	; 0xb26 <pwm_port_config>
 encoder_pin_config(); //position encoder pin config 	
     b68:	0e 94 47 02 	call	0x48e	; 0x48e <encoder_pin_config>
}
     b6c:	08 95       	ret

00000b6e <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     b6e:	e1 e2       	ldi	r30, 0x21	; 33
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     b80:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     b84:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     b88:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     b8c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     b90:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     b94:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     b98:	89 ea       	ldi	r24, 0xA9	; 169
     b9a:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     b9e:	8b e0       	ldi	r24, 0x0B	; 11
     ba0:	80 83       	st	Z, r24
}
     ba2:	08 95       	ret

00000ba4 <timer1_init>:
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// desired value: 40Hz
// actual value: 42.187Hz (5.2%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     ba4:	e1 e8       	ldi	r30, 0x81	; 129
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //setup
     baa:	8c ef       	ldi	r24, 0xFC	; 252
     bac:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;
     bc2:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;
     bc6:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x00;
     bca:	10 92 8d 00 	sts	0x008D, r1
 OCR1CL = 0x00;
     bce:	10 92 8c 00 	sts	0x008C, r1
 //ICR1H  = 0x03;
 //ICR1L  = 0xFF;
 TCCR1A = 0xA3;
     bd2:	83 ea       	ldi	r24, 0xA3	; 163
     bd4:	80 93 80 00 	sts	0x0080, r24
 TCCR1C = 0x00;
     bd8:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //start Timer
     bdc:	8c e0       	ldi	r24, 0x0C	; 12
     bde:	80 83       	st	Z, r24
}
     be0:	08 95       	ret

00000be2 <uart2_init>:
// desired baud rate:115200
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 UCSR2B = 0x00; //disable while setting baud rate
     be2:	e1 ed       	ldi	r30, 0xD1	; 209
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	10 82       	st	Z, r1
 UCSR2A = 0x00;
     be8:	10 92 d0 00 	sts	0x00D0, r1
 UCSR2C = 0x06;
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	80 93 d2 00 	sts	0x00D2, r24
 UBRR2H = 0x00; //set baud rate hi
     bf2:	10 92 d5 00 	sts	0x00D5, r1
 UBRR2L = 0x07; //set baud rate lo
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	80 93 d4 00 	sts	0x00D4, r24
 UCSR2B = 0x98;
     bfc:	88 e9       	ldi	r24, 0x98	; 152
     bfe:	80 83       	st	Z, r24
}
     c00:	08 95       	ret

00000c02 <spi_init>:

//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
 SPCR = 0x53; //setup SPI
     c02:	83 e5       	ldi	r24, 0x53	; 83
     c04:	8c bd       	out	0x2c, r24	; 44
 SPSR = 0x00; //setup SPI
     c06:	1d bc       	out	0x2d, r1	; 45
 SPDR = 0x00;
     c08:	1e bc       	out	0x2e, r1	; 46
}
     c0a:	08 95       	ret

00000c0c <adc_init>:

//ADC initialize
// Conversion time: 56uS
void adc_init(void)
{
	ADCSRA = 0x00;
     c0c:	ea e7       	ldi	r30, 0x7A	; 122
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     c12:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     c1c:	80 e8       	ldi	r24, 0x80	; 128
     c1e:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     c20:	86 e8       	ldi	r24, 0x86	; 134
     c22:	80 83       	st	Z, r24
}
     c24:	08 95       	ret

00000c26 <ADC_Conversion>:
//-- ADC Conversion Function --------------
//-------------------------------------------------------------------------------
unsigned char ADC_Conversion(unsigned char ch)
{
unsigned char a;
 if(ch>7)
     c26:	88 30       	cpi	r24, 0x08	; 8
     c28:	18 f0       	brcs	.+6      	; 0xc30 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     c2a:	98 e0       	ldi	r25, 0x08	; 8
     c2c:	90 93 7b 00 	sts	0x007B, r25
	}
 ch = ch & 0x07;			  //Store only 3 LSB bits
     c30:	87 70       	andi	r24, 0x07	; 7
 ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
     c32:	80 62       	ori	r24, 0x20	; 32
     c34:	80 93 7c 00 	sts	0x007C, r24
 ADC_flag = 0x00; 			  //Clear the user defined flag
     c38:	10 92 4e 02 	sts	0x024E, r1
 ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
     c3c:	ea e7       	ldi	r30, 0x7A	; 122
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	80 83       	st	Z, r24
 while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
     c46:	80 81       	ld	r24, Z
     c48:	84 ff       	sbrs	r24, 4
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <ADC_Conversion+0x20>
 a=ADCH;
     c4c:	80 91 79 00 	lds	r24, 0x0079
 ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     c50:	ea e7       	ldi	r30, 0x7A	; 122
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	90 81       	ld	r25, Z
     c56:	90 61       	ori	r25, 0x10	; 16
     c58:	90 83       	st	Z, r25
 ADCSRB = 0x00;
     c5a:	10 92 7b 00 	sts	0x007B, r1
 return a;
}
     c5e:	08 95       	ret

00000c60 <spi_master_tx_and_rx>:
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
 unsigned char rx_data = 0;

 PORTB = PORTB & 0xFE;        // make SS pin low
     c60:	28 98       	cbi	0x05, 0	; 5
 SPDR = data;
     c62:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
     c64:	0d b4       	in	r0, 0x2d	; 45
     c66:	07 fe       	sbrs	r0, 7
     c68:	fd cf       	rjmp	.-6      	; 0xc64 <spi_master_tx_and_rx+0x4>
     c6a:	86 e6       	ldi	r24, 0x66	; 102
     c6c:	9e e0       	ldi	r25, 0x0E	; 14
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <spi_master_tx_and_rx+0xe>
     c72:	00 00       	nop

 _delay_ms(1);                //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
     c74:	80 e5       	ldi	r24, 0x50	; 80
     c76:	8e bd       	out	0x2e, r24	; 46
 while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
     c78:	0d b4       	in	r0, 0x2d	; 45
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <spi_master_tx_and_rx+0x18>
 rx_data = SPDR;
     c7e:	8e b5       	in	r24, 0x2e	; 46
 PORTB = PORTB | 0x01;        // make SS high
     c80:	28 9a       	sbi	0x05, 0	; 5
 return rx_data;
}
     c82:	08 95       	ret

00000c84 <sensor_data_interpretation>:
//-------------------------------------------------------------------------------

void sensor_data_interpretation(void) //ld, fd, rd, light int
{
 
 WL_LEFT = ADC_Conversion(3);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     c8a:	80 93 4f 02 	sts	0x024F, r24
  
 WL_CENTER = ADC_Conversion(2);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     c94:	80 93 5a 02 	sts	0x025A, r24
  
 WL_RIGHT = ADC_Conversion(1);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     c9e:	80 93 59 02 	sts	0x0259, r24
 
 
 IR1 = ADC_Conversion(4); 
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     ca8:	80 93 6c 02 	sts	0x026C, r24
 
 IR2 = ADC_Conversion(5);
     cac:	85 e0       	ldi	r24, 0x05	; 5
     cae:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     cb2:	80 93 53 02 	sts	0x0253, r24
 
 IR3 = ADC_Conversion(6);
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     cbc:	80 93 5c 02 	sts	0x025C, r24
  
 IR4 = ADC_Conversion(7);
     cc0:	87 e0       	ldi	r24, 0x07	; 7
     cc2:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     cc6:	80 93 74 02 	sts	0x0274, r24

 IR5 = ADC_Conversion(8);
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     cd0:	80 93 4d 02 	sts	0x024D, r24
 
 IR6 = spi_master_tx_and_rx(5);  
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	0e 94 30 06 	call	0xc60	; 0xc60 <spi_master_tx_and_rx>
     cda:	80 93 8e 02 	sts	0x028E, r24
 
 IR7 = spi_master_tx_and_rx (6); 
     cde:	86 e0       	ldi	r24, 0x06	; 6
     ce0:	0e 94 30 06 	call	0xc60	; 0xc60 <spi_master_tx_and_rx>
     ce4:	80 93 79 02 	sts	0x0279, r24
 
 IR8 = spi_master_tx_and_rx (7);
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	0e 94 30 06 	call	0xc60	; 0xc60 <spi_master_tx_and_rx>
     cee:	80 93 63 02 	sts	0x0263, r24
 
 
 SHARP_1 = ADC_Conversion(9);
     cf2:	89 e0       	ldi	r24, 0x09	; 9
     cf4:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     cf8:	80 93 8b 02 	sts	0x028B, r24
 //lcd_print(2,1,SHARP_1,3);
 
 SHARP_2 = ADC_Conversion(10);
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     d02:	80 93 83 02 	sts	0x0283, r24
 //lcd_print(2,5,SHARP_2,3);
 
 SHARP_3 = ADC_Conversion(11);
     d06:	8b e0       	ldi	r24, 0x0B	; 11
     d08:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     d0c:	80 93 4c 02 	sts	0x024C, r24
 //lcd_print(1,13,SHARP_3,3);
 
 SHARP_4 = ADC_Conversion(12);
     d10:	8c e0       	ldi	r24, 0x0C	; 12
     d12:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     d16:	80 93 77 02 	sts	0x0277, r24
 //lcd_print(2,9,SHARP_4,3);
 
 SHARP_5 = ADC_Conversion(13);
     d1a:	8d e0       	ldi	r24, 0x0D	; 13
     d1c:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     d20:	80 93 66 02 	sts	0x0266, r24
 
 BATT_VALUE = ADC_Conversion(0);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
     d2a:	80 93 78 02 	sts	0x0278, r24
  
}
     d2e:	08 95       	ret

00000d30 <motion_set>:
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
 ucPortARestore = PORTA;         // reading the PORTA original status
     d30:	92 b1       	in	r25, 0x02	; 2
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
     d32:	90 7f       	andi	r25, 0xF0	; 240
//-------------------------------------------------------------------------------
void motion_set(unsigned char ucDirection)
{
 unsigned char ucPortARestore = 0;

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
     d34:	8f 70       	andi	r24, 0x0F	; 15
 ucPortARestore = PORTA;         // reading the PORTA original status
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
 ucPortARestore |= ucDirection;  // adding lower nibbel for forward command and restoring the PORTA status
     d36:	98 2b       	or	r25, r24
 PORTA = ucPortARestore;         // executing the command
     d38:	92 b9       	out	0x02, r25	; 2
}
     d3a:	08 95       	ret

00000d3c <stop>:
  motion_set(0x0A);
}

void stop(void)
{
  motion_set(0x00);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 98 06 	call	0xd30	; 0xd30 <motion_set>
}
     d42:	08 95       	ret

00000d44 <forward>:
 PORTA = ucPortARestore;         // executing the command
}

void forward(void) 
{ 
 motion_set(0x06);
     d44:	86 e0       	ldi	r24, 0x06	; 6
     d46:	0e 94 98 06 	call	0xd30	; 0xd30 <motion_set>
}
     d4a:	08 95       	ret

00000d4c <back>:

void back(void)  
{
  motion_set(0x09);  
     d4c:	89 e0       	ldi	r24, 0x09	; 9
     d4e:	0e 94 98 06 	call	0xd30	; 0xd30 <motion_set>
}
     d52:	08 95       	ret

00000d54 <left>:

void left(void)  
{
  motion_set(0x05);
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	0e 94 98 06 	call	0xd30	; 0xd30 <motion_set>
}
     d5a:	08 95       	ret

00000d5c <right>:

void right(void)
{
  motion_set(0x0A);
     d5c:	8a e0       	ldi	r24, 0x0A	; 10
     d5e:	0e 94 98 06 	call	0xd30	; 0xd30 <motion_set>
}
     d62:	08 95       	ret

00000d64 <buzzer_on>:
void buzzer_on(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore |= 0x08; // setting the bit to turn on the buzzer
 PORTC = portc_restore; // executing the command
     d64:	43 9a       	sbi	0x08, 3	; 8
}
     d66:	08 95       	ret

00000d68 <buzzer_off>:
void buzzer_off(void)
{
 unsigned char portc_restore = 0;
 portc_restore = PORTC; // reading the PORTC original status
 portc_restore &= 0xF7; // resetting the bit to turn off the buzzer
 PORTC = portc_restore; // executing the command
     d68:	43 98       	cbi	0x08, 3	; 8
}
     d6a:	08 95       	ret

00000d6c <velocity>:
//-------------------------------------------------------------------------------
//------ Velocity Control -------------
//-------------------------------------------------------------------------------
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d6c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     d70:	60 93 2a 01 	sts	0x012A, r22
}
     d74:	08 95       	ret

00000d76 <forward_mm>:

//-------------------------------------------------------------------------------
//------ Position Encoders -------------
//-------------------------------------------------------------------------------
void forward_mm(unsigned int DistanceInMM)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ec 01       	movw	r28, r24
	forward();
     d7c:	0e 94 a2 06 	call	0xd44	; 0xd44 <forward>
	linear_distance_mm(DistanceInMM);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 f6 02 	call	0x5ec	; 0x5ec <linear_distance_mm>
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	08 95       	ret

00000d8c <backward_mm>:
void backward_mm(unsigned int DistanceInMM)
{
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
	back();
     d92:	0e 94 a6 06 	call	0xd4c	; 0xd4c <back>
	linear_distance_mm(DistanceInMM);
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 f6 02 	call	0x5ec	; 0x5ec <linear_distance_mm>
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <left_degrees>:
void left_degrees(unsigned int Degrees)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     da8:	0e 94 aa 06 	call	0xd54	; 0xd54 <left>
	angle_rotate(Degrees);
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 a8 02 	call	0x550	; 0x550 <angle_rotate>
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <right_degrees>:
void right_degrees(unsigned int Degrees)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     dbe:	0e 94 ae 06 	call	0xd5c	; 0xd5c <right>
	angle_rotate(Degrees);
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 a8 02 	call	0x550	; 0x550 <angle_rotate>
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <init_devices>:
//-------------------------------------------------------------------------------
//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli();              //disable all interrupts
     dce:	f8 94       	cli
 port_init();
     dd0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <port_init>
 uart2_init();
     dd4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <uart2_init>
 adc_init();
     dd8:	0e 94 06 06 	call	0xc0c	; 0xc0c <adc_init>
 timer1_init();
     ddc:	0e 94 d2 05 	call	0xba4	; 0xba4 <timer1_init>
 timer5_init();
     de0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <timer5_init>
 lcd_set_4bit();
     de4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_set_4bit>
 lcd_init();
     de8:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_init>
 spi_init();
     dec:	0e 94 01 06 	call	0xc02	; 0xc02 <spi_init>
 
 // below for lines are important for Encoder init
 left_position_encoder_interrupt_init();
     df0:	0e 94 4c 02 	call	0x498	; 0x498 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
     df4:	0e 94 55 02 	call	0x4aa	; 0x4aa <right_position_encoder_interrupt_init>
 EICRB  = 0x0A;     //pin change int edge 4:7
     df8:	8a e0       	ldi	r24, 0x0A	; 10
     dfa:	80 93 6a 00 	sts	0x006A, r24
 EIMSK  = 0x30;
     dfe:	80 e3       	ldi	r24, 0x30	; 48
     e00:	8d bb       	out	0x1d, r24	; 29

 sei();             //re-enable interrupts
     e02:	78 94       	sei
 //all peripherals are now initialized
}
     e04:	08 95       	ret

00000e06 <__vector_51>:
	q++;
	
}*/
//-------------------------------------------------------------------------------
SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
{
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	0b b6       	in	r0, 0x3b	; 59
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
 unsigned char ser_data = 0x00;
 unsigned char ser_data_upper_nibbel = 0x00;
 unsigned char ser_data_lower_nibbel = 0x00;
 //uart has received a character in UDR2
 ser_data = UDR2;
     e30:	c0 91 d6 00 	lds	r28, 0x00D6
 ser_data_upper_nibbel = ser_data & 0xF0;
 ser_data_lower_nibbel = ser_data & 0x0F;

//__________________________Locomotoion setting commands_____________
if(flag == 1)
     e34:	80 91 46 02 	lds	r24, 0x0246
     e38:	90 91 47 02 	lds	r25, 0x0247
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	91 05       	cpc	r25, r1
     e40:	79 f5       	brne	.+94     	; 0xea0 <__vector_51+0x9a>
  {
	temp1 = ser_data;
     e42:	c0 93 67 02 	sts	0x0267, r28
	if(count == 1)
     e46:	80 91 0c 02 	lds	r24, 0x020C
     e4a:	90 91 0d 02 	lds	r25, 0x020D
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	69 f4       	brne	.+26     	; 0xe6e <__vector_51+0x68>
	{
		v1 = temp1;
     e54:	c0 93 58 02 	sts	0x0258, r28
		count++;
     e58:	80 91 0c 02 	lds	r24, 0x020C
     e5c:	90 91 0d 02 	lds	r25, 0x020D
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	90 93 0d 02 	sts	0x020D, r25
     e66:	80 93 0c 02 	sts	0x020C, r24
		ser_data = 0x00;
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	19 c0       	rjmp	.+50     	; 0xea0 <__vector_51+0x9a>
	}
	else if(count == 2)
     e6e:	80 91 0c 02 	lds	r24, 0x020C
     e72:	90 91 0d 02 	lds	r25, 0x020D
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	91 05       	cpc	r25, r1
     e7a:	91 f4       	brne	.+36     	; 0xea0 <__vector_51+0x9a>
	{
		v2 = temp1;
     e7c:	c0 93 73 02 	sts	0x0273, r28
		flag = 0;
     e80:	10 92 47 02 	sts	0x0247, r1
     e84:	10 92 46 02 	sts	0x0246, r1
		count=1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	90 93 0d 02 	sts	0x020D, r25
     e90:	80 93 0c 02 	sts	0x020C, r24
		ser_data = 0x00;
		velocity(v1,v2);
     e94:	80 91 58 02 	lds	r24, 0x0258
     e98:	6c 2f       	mov	r22, r28
     e9a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <velocity>
	else if(count == 2)
	{
		v2 = temp1;
		flag = 0;
		count=1;
		ser_data = 0x00;
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
		velocity(v1,v2);
	}
  }
  
  //__________________________ Forward and Backward Movement by Some Distance Command ________________
  if (flag_position_encoder_forward==1)
     ea0:	80 91 44 02 	lds	r24, 0x0244
     ea4:	90 91 45 02 	lds	r25, 0x0245
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <__vector_51+0xaa>
     eae:	42 c0       	rjmp	.+132    	; 0xf34 <__vector_51+0x12e>
  {
	  temp2 = ser_data;
     eb0:	c0 93 50 02 	sts	0x0250, r28
	  if (count_distance==1)
     eb4:	80 91 0a 02 	lds	r24, 0x020A
     eb8:	90 91 0b 02 	lds	r25, 0x020B
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	79 f4       	brne	.+30     	; 0xee0 <__vector_51+0xda>
	  {
		  distance_q = (unsigned int)temp2;
     ec2:	c0 93 7c 02 	sts	0x027C, r28
     ec6:	10 92 7d 02 	sts	0x027D, r1
		  count_distance++;
     eca:	80 91 0a 02 	lds	r24, 0x020A
     ece:	90 91 0b 02 	lds	r25, 0x020B
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	90 93 0b 02 	sts	0x020B, r25
     ed8:	80 93 0a 02 	sts	0x020A, r24
		  ser_data=0x00;
     edc:	c0 e0       	ldi	r28, 0x00	; 0
     ede:	2a c0       	rjmp	.+84     	; 0xf34 <__vector_51+0x12e>
	  }
	  else if (count_distance==2)
     ee0:	80 91 0a 02 	lds	r24, 0x020A
     ee4:	90 91 0b 02 	lds	r25, 0x020B
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	91 05       	cpc	r25, r1
     eec:	19 f5       	brne	.+70     	; 0xf34 <__vector_51+0x12e>
	  {
		  distance_r = (unsigned int)temp2;
     eee:	8c 2f       	mov	r24, r28
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	90 93 69 02 	sts	0x0269, r25
     ef6:	80 93 68 02 	sts	0x0268, r24
		  temp_distance = (distance_q)*255 + (distance_r);
     efa:	20 91 7c 02 	lds	r18, 0x027C
     efe:	30 91 7d 02 	lds	r19, 0x027D
     f02:	d2 2f       	mov	r29, r18
     f04:	cc 27       	eor	r28, r28
     f06:	c2 1b       	sub	r28, r18
     f08:	d3 0b       	sbc	r29, r19
     f0a:	8c 0f       	add	r24, r28
     f0c:	9d 1f       	adc	r25, r29
     f0e:	90 93 49 02 	sts	0x0249, r25
     f12:	80 93 48 02 	sts	0x0248, r24
		  count_distance=1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 0b 02 	sts	0x020B, r25
     f1e:	80 93 0a 02 	sts	0x020A, r24
		  flag_position_encoder_forward_1 = 1;
     f22:	90 93 43 02 	sts	0x0243, r25
     f26:	80 93 42 02 	sts	0x0242, r24
		  flag_position_encoder_forward = 0;
     f2a:	10 92 45 02 	sts	0x0245, r1
     f2e:	10 92 44 02 	sts	0x0244, r1
		  ser_data = 0x00;
     f32:	c0 e0       	ldi	r28, 0x00	; 0
	  }
	  
  }
  
  if (flag_position_encoder_backward==1)
     f34:	80 91 40 02 	lds	r24, 0x0240
     f38:	90 91 41 02 	lds	r25, 0x0241
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	91 05       	cpc	r25, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <__vector_51+0x13e>
     f42:	42 c0       	rjmp	.+132    	; 0xfc8 <__vector_51+0x1c2>
  {
	  temp2 = ser_data;
     f44:	c0 93 50 02 	sts	0x0250, r28
	  if (count_distance==1)
     f48:	80 91 0a 02 	lds	r24, 0x020A
     f4c:	90 91 0b 02 	lds	r25, 0x020B
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	91 05       	cpc	r25, r1
     f54:	79 f4       	brne	.+30     	; 0xf74 <__vector_51+0x16e>
	  {
		  distance_q = (unsigned int)temp2;
     f56:	c0 93 7c 02 	sts	0x027C, r28
     f5a:	10 92 7d 02 	sts	0x027D, r1
		  count_distance++;
     f5e:	80 91 0a 02 	lds	r24, 0x020A
     f62:	90 91 0b 02 	lds	r25, 0x020B
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	90 93 0b 02 	sts	0x020B, r25
     f6c:	80 93 0a 02 	sts	0x020A, r24
		  ser_data=0x00;
     f70:	c0 e0       	ldi	r28, 0x00	; 0
     f72:	2a c0       	rjmp	.+84     	; 0xfc8 <__vector_51+0x1c2>
	  }
	  else if (count_distance==2)
     f74:	80 91 0a 02 	lds	r24, 0x020A
     f78:	90 91 0b 02 	lds	r25, 0x020B
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	19 f5       	brne	.+70     	; 0xfc8 <__vector_51+0x1c2>
	  {
		  distance_r = (unsigned int)temp2;
     f82:	8c 2f       	mov	r24, r28
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 69 02 	sts	0x0269, r25
     f8a:	80 93 68 02 	sts	0x0268, r24
		  temp_distance = (distance_q)*255 + (distance_r);
     f8e:	20 91 7c 02 	lds	r18, 0x027C
     f92:	30 91 7d 02 	lds	r19, 0x027D
     f96:	d2 2f       	mov	r29, r18
     f98:	cc 27       	eor	r28, r28
     f9a:	c2 1b       	sub	r28, r18
     f9c:	d3 0b       	sbc	r29, r19
     f9e:	8c 0f       	add	r24, r28
     fa0:	9d 1f       	adc	r25, r29
     fa2:	90 93 49 02 	sts	0x0249, r25
     fa6:	80 93 48 02 	sts	0x0248, r24
		  count_distance=1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	90 93 0b 02 	sts	0x020B, r25
     fb2:	80 93 0a 02 	sts	0x020A, r24
		  flag_position_encoder_backward_1 = 1;
     fb6:	90 93 3f 02 	sts	0x023F, r25
     fba:	80 93 3e 02 	sts	0x023E, r24
		  flag_position_encoder_backward = 0;
     fbe:	10 92 41 02 	sts	0x0241, r1
     fc2:	10 92 40 02 	sts	0x0240, r1
		  ser_data = 0x00;
     fc6:	c0 e0       	ldi	r28, 0x00	; 0
	  }
  }
  
  if (flag_rotation_right==1)
     fc8:	80 91 3c 02 	lds	r24, 0x023C
     fcc:	90 91 3d 02 	lds	r25, 0x023D
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <__vector_51+0x1d2>
     fd6:	41 c0       	rjmp	.+130    	; 0x105a <__vector_51+0x254>
  {
	  temp2=ser_data;
     fd8:	c0 93 50 02 	sts	0x0250, r28
	  if (count_rotation == 1)
     fdc:	80 91 08 02 	lds	r24, 0x0208
     fe0:	90 91 09 02 	lds	r25, 0x0209
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	91 05       	cpc	r25, r1
     fe8:	79 f4       	brne	.+30     	; 0x1008 <__vector_51+0x202>
	  {
		  rotation_q = (unsigned int)temp2;
     fea:	c0 93 75 02 	sts	0x0275, r28
     fee:	10 92 76 02 	sts	0x0276, r1
		  count_rotation++;
     ff2:	80 91 08 02 	lds	r24, 0x0208
     ff6:	90 91 09 02 	lds	r25, 0x0209
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 09 02 	sts	0x0209, r25
    1000:	80 93 08 02 	sts	0x0208, r24
		  ser_data = 0x00;
    1004:	c0 e0       	ldi	r28, 0x00	; 0
    1006:	29 c0       	rjmp	.+82     	; 0x105a <__vector_51+0x254>
	  }
	  else if(count_rotation == 2)
    1008:	80 91 08 02 	lds	r24, 0x0208
    100c:	90 91 09 02 	lds	r25, 0x0209
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	91 05       	cpc	r25, r1
    1014:	11 f5       	brne	.+68     	; 0x105a <__vector_51+0x254>
	  {
		  rotation_r = (unsigned int)temp2;
    1016:	4c 2f       	mov	r20, r28
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	50 93 8a 02 	sts	0x028A, r21
    101e:	40 93 89 02 	sts	0x0289, r20
		  temp_rotation = (rotation_q)*255 + (rotation_r);
    1022:	80 91 75 02 	lds	r24, 0x0275
    1026:	90 91 76 02 	lds	r25, 0x0276
    102a:	38 2f       	mov	r19, r24
    102c:	22 27       	eor	r18, r18
    102e:	28 1b       	sub	r18, r24
    1030:	39 0b       	sbc	r19, r25
    1032:	42 0f       	add	r20, r18
    1034:	53 1f       	adc	r21, r19
    1036:	50 93 4b 02 	sts	0x024B, r21
    103a:	40 93 4a 02 	sts	0x024A, r20
		  count_rotation = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 09 02 	sts	0x0209, r25
    1046:	80 93 08 02 	sts	0x0208, r24
		  flag_rotation_right_1 = 1;
    104a:	90 93 3b 02 	sts	0x023B, r25
    104e:	80 93 3a 02 	sts	0x023A, r24
		  flag_rotation_right = 0;	  
    1052:	10 92 3d 02 	sts	0x023D, r1
    1056:	10 92 3c 02 	sts	0x023C, r1
	  }
  }
  
  if (flag_rotation_left==1)
    105a:	80 91 38 02 	lds	r24, 0x0238
    105e:	90 91 39 02 	lds	r25, 0x0239
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	09 f0       	breq	.+2      	; 0x106a <__vector_51+0x264>
    1068:	41 c0       	rjmp	.+130    	; 0x10ec <__vector_51+0x2e6>
  {
	  temp2=ser_data;
    106a:	c0 93 50 02 	sts	0x0250, r28
	  if (count_rotation == 1)
    106e:	80 91 08 02 	lds	r24, 0x0208
    1072:	90 91 09 02 	lds	r25, 0x0209
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	79 f4       	brne	.+30     	; 0x109a <__vector_51+0x294>
	  {
		  rotation_q = (unsigned int)temp2;
    107c:	c0 93 75 02 	sts	0x0275, r28
    1080:	10 92 76 02 	sts	0x0276, r1
		  count_rotation++;
    1084:	80 91 08 02 	lds	r24, 0x0208
    1088:	90 91 09 02 	lds	r25, 0x0209
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	90 93 09 02 	sts	0x0209, r25
    1092:	80 93 08 02 	sts	0x0208, r24
		  ser_data = 0x00;
    1096:	c0 e0       	ldi	r28, 0x00	; 0
    1098:	29 c0       	rjmp	.+82     	; 0x10ec <__vector_51+0x2e6>
	  }
	  else if(count_rotation == 2)
    109a:	80 91 08 02 	lds	r24, 0x0208
    109e:	90 91 09 02 	lds	r25, 0x0209
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 05       	cpc	r25, r1
    10a6:	11 f5       	brne	.+68     	; 0x10ec <__vector_51+0x2e6>
	  {
		  rotation_r = (unsigned int)temp2;
    10a8:	4c 2f       	mov	r20, r28
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	50 93 8a 02 	sts	0x028A, r21
    10b0:	40 93 89 02 	sts	0x0289, r20
		  temp_rotation = (rotation_q)*255 + (rotation_r);
    10b4:	80 91 75 02 	lds	r24, 0x0275
    10b8:	90 91 76 02 	lds	r25, 0x0276
    10bc:	38 2f       	mov	r19, r24
    10be:	22 27       	eor	r18, r18
    10c0:	28 1b       	sub	r18, r24
    10c2:	39 0b       	sbc	r19, r25
    10c4:	42 0f       	add	r20, r18
    10c6:	53 1f       	adc	r21, r19
    10c8:	50 93 4b 02 	sts	0x024B, r21
    10cc:	40 93 4a 02 	sts	0x024A, r20
		  count_rotation = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	90 93 09 02 	sts	0x0209, r25
    10d8:	80 93 08 02 	sts	0x0208, r24
		  flag_rotation_left_1 = 1;
    10dc:	90 93 37 02 	sts	0x0237, r25
    10e0:	80 93 36 02 	sts	0x0236, r24
		  flag_rotation_left = 0;	  
    10e4:	10 92 39 02 	sts	0x0239, r1
    10e8:	10 92 38 02 	sts	0x0238, r1
	  }
  }
  
    //__________________________ Servo Motor Commands ________________
	if (flag_servo1 == 1)
    10ec:	80 91 34 02 	lds	r24, 0x0234
    10f0:	90 91 35 02 	lds	r25, 0x0235
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	69 f4       	brne	.+26     	; 0x1114 <__vector_51+0x30e>
  {
	  temp2 = ser_data;
    10fa:	c0 93 50 02 	sts	0x0250, r28
	  flag_servo1_main=1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 07 02 	sts	0x0207, r25
    1106:	80 93 06 02 	sts	0x0206, r24
	  flag_servo1 = 0;
    110a:	10 92 35 02 	sts	0x0235, r1
    110e:	10 92 34 02 	sts	0x0234, r1
	  ser_data = 0x00;
    1112:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  if (flag_servo2 == 1)
    1114:	80 91 32 02 	lds	r24, 0x0232
    1118:	90 91 33 02 	lds	r25, 0x0233
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	91 05       	cpc	r25, r1
    1120:	69 f4       	brne	.+26     	; 0x113c <__vector_51+0x336>
  {
	  temp2 = ser_data;
    1122:	c0 93 50 02 	sts	0x0250, r28
	  flag_servo2_main=1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 05 02 	sts	0x0205, r25
    112e:	80 93 04 02 	sts	0x0204, r24
	  flag_servo2 = 0;
    1132:	10 92 33 02 	sts	0x0233, r1
    1136:	10 92 32 02 	sts	0x0232, r1
	  ser_data = 0x00;
    113a:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  if (flag_servo3 == 1)
    113c:	80 91 30 02 	lds	r24, 0x0230
    1140:	90 91 31 02 	lds	r25, 0x0231
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	69 f4       	brne	.+26     	; 0x1164 <__vector_51+0x35e>
  {
	  temp2 = ser_data;
    114a:	c0 93 50 02 	sts	0x0250, r28
	  flag_servo3_main=1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 03 02 	sts	0x0203, r25
    1156:	80 93 02 02 	sts	0x0202, r24
	  flag_servo3 = 0;
    115a:	10 92 31 02 	sts	0x0231, r1
    115e:	10 92 30 02 	sts	0x0230, r1
	  ser_data = 0x00;
    1162:	c0 e0       	ldi	r28, 0x00	; 0
  }
  
  //__________________________ LCD Command ________________
  if (flag_lcd == 1)
    1164:	80 91 2e 02 	lds	r24, 0x022E
    1168:	90 91 2f 02 	lds	r25, 0x022F
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <__vector_51+0x36e>
    1172:	45 c0       	rjmp	.+138    	; 0x11fe <__vector_51+0x3f8>
  {
	  temp2 = ser_data;
    1174:	c0 93 50 02 	sts	0x0250, r28
	  if (count_lcd == 1)
    1178:	80 91 00 02 	lds	r24, 0x0200
    117c:	90 91 01 02 	lds	r25, 0x0201
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	79 f4       	brne	.+30     	; 0x11a4 <__vector_51+0x39e>
	  {
		  lcd_row = temp2;
    1186:	d0 e0       	ldi	r29, 0x00	; 0
    1188:	d0 93 27 02 	sts	0x0227, r29
    118c:	c0 93 26 02 	sts	0x0226, r28
		  count_lcd++;
    1190:	80 91 00 02 	lds	r24, 0x0200
    1194:	90 91 01 02 	lds	r25, 0x0201
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	90 93 01 02 	sts	0x0201, r25
    119e:	80 93 00 02 	sts	0x0200, r24
    11a2:	bd c1       	rjmp	.+890    	; 0x151e <__vector_51+0x718>
		  ser_data = 0x00;
	  }
	  else if (count_lcd == 2)
    11a4:	80 91 00 02 	lds	r24, 0x0200
    11a8:	90 91 01 02 	lds	r25, 0x0201
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	81 f4       	brne	.+32     	; 0x11d2 <__vector_51+0x3cc>
	  {
		  lcd_column = temp2;
    11b2:	8c 2f       	mov	r24, r28
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	90 93 25 02 	sts	0x0225, r25
    11ba:	80 93 24 02 	sts	0x0224, r24
		  count_lcd++;
    11be:	80 91 00 02 	lds	r24, 0x0200
    11c2:	90 91 01 02 	lds	r25, 0x0201
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	90 93 01 02 	sts	0x0201, r25
    11cc:	80 93 00 02 	sts	0x0200, r24
    11d0:	16 c0       	rjmp	.+44     	; 0x11fe <__vector_51+0x3f8>
		  ser_data == 0x00;
	  }
	  else if (count_lcd == 3)
    11d2:	80 91 00 02 	lds	r24, 0x0200
    11d6:	90 91 01 02 	lds	r25, 0x0201
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	79 f4       	brne	.+30     	; 0x11fe <__vector_51+0x3f8>
	  {
		  flag_lcd_main=1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 2d 02 	sts	0x022D, r25
    11e8:	80 93 2c 02 	sts	0x022C, r24
		  count_lcd = 1;
    11ec:	90 93 01 02 	sts	0x0201, r25
    11f0:	80 93 00 02 	sts	0x0200, r24
		  flag_lcd = 0;
    11f4:	10 92 2f 02 	sts	0x022F, r1
    11f8:	10 92 2e 02 	sts	0x022E, r1
    11fc:	90 c1       	rjmp	.+800    	; 0x151e <__vector_51+0x718>
		  ser_data = 0x00;
	  }
  }
  
   
 if (ser_data == 0x38) // ASCII value of 8
    11fe:	c8 33       	cpi	r28, 0x38	; 56
    1200:	19 f4       	brne	.+6      	; 0x1208 <__vector_51+0x402>
 {
  forward(); 
    1202:	0e 94 a2 06 	call	0xd44	; 0xd44 <forward>
    1206:	0a c0       	rjmp	.+20     	; 0x121c <__vector_51+0x416>
 }
 
 if (ser_data == 0x32) // ASCII value of 2
    1208:	c2 33       	cpi	r28, 0x32	; 50
    120a:	19 f4       	brne	.+6      	; 0x1212 <__vector_51+0x40c>
 {
  back();
    120c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <back>
    1210:	0a c0       	rjmp	.+20     	; 0x1226 <__vector_51+0x420>
 }
 
 if (ser_data == 0x34) // ASCII value of 4
    1212:	c4 33       	cpi	r28, 0x34	; 52
    1214:	19 f4       	brne	.+6      	; 0x121c <__vector_51+0x416>
 {
  right();
    1216:	0e 94 ae 06 	call	0xd5c	; 0xd5c <right>
    121a:	0a c0       	rjmp	.+20     	; 0x1230 <__vector_51+0x42a>
 }
 
 if (ser_data == 0x36) // ASCII value of 6
    121c:	c6 33       	cpi	r28, 0x36	; 54
    121e:	19 f4       	brne	.+6      	; 0x1226 <__vector_51+0x420>
 {
  left();
    1220:	0e 94 aa 06 	call	0xd54	; 0xd54 <left>
    1224:	12 c0       	rjmp	.+36     	; 0x124a <__vector_51+0x444>
 }
 
 if (ser_data == 0x35) // ASCII value of 5
    1226:	c5 33       	cpi	r28, 0x35	; 53
    1228:	19 f4       	brne	.+6      	; 0x1230 <__vector_51+0x42a>
 {
  stop();
    122a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <stop>
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <__vector_51+0x452>
 }

//_______________________Shaft encoder data__________________________

 if(ser_data == 0x72) //Lower_byte number of pulse counted
    1230:	c2 37       	cpi	r28, 0x72	; 114
    1232:	59 f4       	brne	.+22     	; 0x124a <__vector_51+0x444>
 {
  left_motor_pulse_count_locked = left_motor_pulse_count;
    1234:	80 91 16 02 	lds	r24, 0x0216
    1238:	90 91 17 02 	lds	r25, 0x0217
    123c:	80 93 14 02 	sts	0x0214, r24
    1240:	90 93 15 02 	sts	0x0215, r25
  UDR2 = left_motor_pulse_count_locked % 256;
    1244:	80 93 d6 00 	sts	0x00D6, r24
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <__vector_51+0x46c>
 }
 
 if(ser_data == 0x73) //Upper_byte number of pulse counted
    124a:	c3 37       	cpi	r28, 0x73	; 115
    124c:	29 f4       	brne	.+10     	; 0x1258 <__vector_51+0x452>
 {
  UDR2 = left_motor_pulse_count_locked / 256;
    124e:	80 91 15 02 	lds	r24, 0x0215
    1252:	80 93 d6 00 	sts	0x00D6, r24
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <__vector_51+0x47a>
 }

 if(ser_data == 0x79) //Lower_byte number of pulse counted
    1258:	c9 37       	cpi	r28, 0x79	; 121
    125a:	59 f4       	brne	.+22     	; 0x1272 <__vector_51+0x46c>
 {
  right_motor_pulse_count_locked = right_motor_pulse_count;
    125c:	80 91 12 02 	lds	r24, 0x0212
    1260:	90 91 13 02 	lds	r25, 0x0213
    1264:	80 93 10 02 	sts	0x0210, r24
    1268:	90 93 11 02 	sts	0x0211, r25
  UDR2 = right_motor_pulse_count_locked % 256;
    126c:	80 93 d6 00 	sts	0x00D6, r24
    1270:	ed c0       	rjmp	.+474    	; 0x144c <__vector_51+0x646>
 }
 
 if(ser_data == 0x7A) //Upper_byte number of pulse counted
    1272:	ca 37       	cpi	r28, 0x7A	; 122
    1274:	29 f4       	brne	.+10     	; 0x1280 <__vector_51+0x47a>
 {
  UDR2 = right_motor_pulse_count_locked / 256;
    1276:	80 91 11 02 	lds	r24, 0x0211
    127a:	80 93 d6 00 	sts	0x00D6, r24
    127e:	ed c0       	rjmp	.+474    	; 0x145a <__vector_51+0x654>
 

 
 //________________ IR PROXIMITY STATUS COMMANDS + BATT VALUE + WHITE LINE SENSORS + SHARP SENSORS _____________________
 
 if (ser_data == 0x54)
    1280:	c4 35       	cpi	r28, 0x54	; 84
    1282:	09 f0       	breq	.+2      	; 0x1286 <__vector_51+0x480>
    1284:	e3 c0       	rjmp	.+454    	; 0x144c <__vector_51+0x646>
{
	UCSR2B=0xD8;
    1286:	88 ed       	ldi	r24, 0xD8	; 216
    1288:	80 93 d1 00 	sts	0x00D1, r24
	UDR2 = 0x59;
    128c:	89 e5       	ldi	r24, 0x59	; 89
    128e:	80 93 d6 00 	sts	0x00D6, r24
	while((UCSR2A&0x40) ==0x00);
    1292:	e0 ed       	ldi	r30, 0xD0	; 208
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	86 ff       	sbrs	r24, 6
    129a:	fd cf       	rjmp	.-6      	; 0x1296 <__vector_51+0x490>
	{UDR2 = IR1;
    129c:	80 91 6c 02 	lds	r24, 0x026C
    12a0:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12a4:	e0 ed       	ldi	r30, 0xD0	; 208
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	80 64       	ori	r24, 0x40	; 64
    12ac:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12ae:	80 81       	ld	r24, Z
    12b0:	86 ff       	sbrs	r24, 6
    12b2:	fd cf       	rjmp	.-6      	; 0x12ae <__vector_51+0x4a8>
	{UDR2 = IR2;
    12b4:	80 91 53 02 	lds	r24, 0x0253
    12b8:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12bc:	e0 ed       	ldi	r30, 0xD0	; 208
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12c6:	80 81       	ld	r24, Z
    12c8:	86 ff       	sbrs	r24, 6
    12ca:	fd cf       	rjmp	.-6      	; 0x12c6 <__vector_51+0x4c0>
	{UDR2 = IR3;
    12cc:	80 91 5c 02 	lds	r24, 0x025C
    12d0:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12d4:	e0 ed       	ldi	r30, 0xD0	; 208
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 64       	ori	r24, 0x40	; 64
    12dc:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12de:	80 81       	ld	r24, Z
    12e0:	86 ff       	sbrs	r24, 6
    12e2:	fd cf       	rjmp	.-6      	; 0x12de <__vector_51+0x4d8>
	{UDR2 = IR4;
    12e4:	80 91 74 02 	lds	r24, 0x0274
    12e8:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    12ec:	e0 ed       	ldi	r30, 0xD0	; 208
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    12f6:	80 81       	ld	r24, Z
    12f8:	86 ff       	sbrs	r24, 6
    12fa:	fd cf       	rjmp	.-6      	; 0x12f6 <__vector_51+0x4f0>
	{UDR2 = IR5;
    12fc:	80 91 4d 02 	lds	r24, 0x024D
    1300:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1304:	e0 ed       	ldi	r30, 0xD0	; 208
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	80 64       	ori	r24, 0x40	; 64
    130c:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    130e:	80 81       	ld	r24, Z
    1310:	86 ff       	sbrs	r24, 6
    1312:	fd cf       	rjmp	.-6      	; 0x130e <__vector_51+0x508>
	{UDR2 = IR6;
    1314:	80 91 8e 02 	lds	r24, 0x028E
    1318:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    131c:	e0 ed       	ldi	r30, 0xD0	; 208
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 64       	ori	r24, 0x40	; 64
    1324:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1326:	80 81       	ld	r24, Z
    1328:	86 ff       	sbrs	r24, 6
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <__vector_51+0x520>
	{UDR2 = IR7;
    132c:	80 91 79 02 	lds	r24, 0x0279
    1330:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1334:	e0 ed       	ldi	r30, 0xD0	; 208
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    133e:	80 81       	ld	r24, Z
    1340:	86 ff       	sbrs	r24, 6
    1342:	fd cf       	rjmp	.-6      	; 0x133e <__vector_51+0x538>
	{UDR2 = IR8;
    1344:	80 91 63 02 	lds	r24, 0x0263
    1348:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    134c:	e0 ed       	ldi	r30, 0xD0	; 208
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1356:	80 81       	ld	r24, Z
    1358:	86 ff       	sbrs	r24, 6
    135a:	fd cf       	rjmp	.-6      	; 0x1356 <__vector_51+0x550>
	{UDR2 = SHARP_1;
    135c:	80 91 8b 02 	lds	r24, 0x028B
    1360:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1364:	e0 ed       	ldi	r30, 0xD0	; 208
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 64       	ori	r24, 0x40	; 64
    136c:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    136e:	80 81       	ld	r24, Z
    1370:	86 ff       	sbrs	r24, 6
    1372:	fd cf       	rjmp	.-6      	; 0x136e <__vector_51+0x568>
	{UDR2 = SHARP_2;
    1374:	80 91 83 02 	lds	r24, 0x0283
    1378:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    137c:	e0 ed       	ldi	r30, 0xD0	; 208
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1386:	80 81       	ld	r24, Z
    1388:	86 ff       	sbrs	r24, 6
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <__vector_51+0x580>
	{UDR2 = SHARP_3;
    138c:	80 91 4c 02 	lds	r24, 0x024C
    1390:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1394:	e0 ed       	ldi	r30, 0xD0	; 208
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 64       	ori	r24, 0x40	; 64
    139c:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    139e:	80 81       	ld	r24, Z
    13a0:	86 ff       	sbrs	r24, 6
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <__vector_51+0x598>
	{UDR2 = SHARP_4;
    13a4:	80 91 77 02 	lds	r24, 0x0277
    13a8:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13ac:	e0 ed       	ldi	r30, 0xD0	; 208
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    13b6:	80 81       	ld	r24, Z
    13b8:	86 ff       	sbrs	r24, 6
    13ba:	fd cf       	rjmp	.-6      	; 0x13b6 <__vector_51+0x5b0>
	{UDR2 = SHARP_5;
    13bc:	80 91 66 02 	lds	r24, 0x0266
    13c0:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13c4:	e0 ed       	ldi	r30, 0xD0	; 208
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 64       	ori	r24, 0x40	; 64
    13cc:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    13ce:	80 81       	ld	r24, Z
    13d0:	86 ff       	sbrs	r24, 6
    13d2:	fd cf       	rjmp	.-6      	; 0x13ce <__vector_51+0x5c8>
	{UDR2 = WL_LEFT;
    13d4:	80 91 4f 02 	lds	r24, 0x024F
    13d8:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13dc:	e0 ed       	ldi	r30, 0xD0	; 208
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 64       	ori	r24, 0x40	; 64
    13e4:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    13e6:	80 81       	ld	r24, Z
    13e8:	86 ff       	sbrs	r24, 6
    13ea:	fd cf       	rjmp	.-6      	; 0x13e6 <__vector_51+0x5e0>
	{UDR2 = WL_CENTER;
    13ec:	80 91 5a 02 	lds	r24, 0x025A
    13f0:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    13f4:	e0 ed       	ldi	r30, 0xD0	; 208
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    13fe:	80 81       	ld	r24, Z
    1400:	86 ff       	sbrs	r24, 6
    1402:	fd cf       	rjmp	.-6      	; 0x13fe <__vector_51+0x5f8>
	{UDR2 = WL_RIGHT;
    1404:	80 91 59 02 	lds	r24, 0x0259
    1408:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    140c:	e0 ed       	ldi	r30, 0xD0	; 208
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 64       	ori	r24, 0x40	; 64
    1414:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    1416:	80 81       	ld	r24, Z
    1418:	86 ff       	sbrs	r24, 6
    141a:	fd cf       	rjmp	.-6      	; 0x1416 <__vector_51+0x610>
	{UDR2 = BATT_VALUE;
    141c:	80 91 78 02 	lds	r24, 0x0278
    1420:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    1424:	e0 ed       	ldi	r30, 0xD0	; 208
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 64       	ori	r24, 0x40	; 64
    142c:	80 83       	st	Z, r24
	}
	while((UCSR2A&0x40) ==0x00);
    142e:	80 81       	ld	r24, Z
    1430:	86 ff       	sbrs	r24, 6
    1432:	fd cf       	rjmp	.-6      	; 0x142e <__vector_51+0x628>
	{UDR2 = 0x5A;
    1434:	8a e5       	ldi	r24, 0x5A	; 90
    1436:	80 93 d6 00 	sts	0x00D6, r24
		UCSR2A|=0x40;
    143a:	e0 ed       	ldi	r30, 0xD0	; 208
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 64       	ori	r24, 0x40	; 64
    1442:	80 83       	st	Z, r24
	}
	UCSR2B = 0x98;
    1444:	88 e9       	ldi	r24, 0x98	; 152
    1446:	80 93 d1 00 	sts	0x00D1, r24
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <__vector_51+0x65e>
	
 
 
  
//______________________Identity tag ____________________________
 if (ser_data == 0x6B)
    144c:	cb 36       	cpi	r28, 0x6B	; 107
    144e:	29 f4       	brne	.+10     	; 0x145a <__vector_51+0x654>
 {
  UDR2 = robot_id;
    1450:	80 91 0e 02 	lds	r24, 0x020E
    1454:	80 93 d6 00 	sts	0x00D6, r24
    1458:	0a c0       	rjmp	.+20     	; 0x146e <__vector_51+0x668>
 }

//________________  Buzzer _______________________________________
 if (ser_data == 0x37) // ASCII value of 7
    145a:	c7 33       	cpi	r28, 0x37	; 55
    145c:	19 f4       	brne	.+6      	; 0x1464 <__vector_51+0x65e>
 {
  buzzer_on();
    145e:	0e 94 b2 06 	call	0xd64	; 0xd64 <buzzer_on>
    1462:	0e c0       	rjmp	.+28     	; 0x1480 <__vector_51+0x67a>
 }
 
 if (ser_data == 0x39) // ASCII value of 9
    1464:	c9 33       	cpi	r28, 0x39	; 57
    1466:	19 f4       	brne	.+6      	; 0x146e <__vector_51+0x668>
 {
  buzzer_off();
    1468:	0e 94 b4 06 	call	0xd68	; 0xd68 <buzzer_off>
    146c:	10 c0       	rjmp	.+32     	; 0x148e <__vector_51+0x688>
 }



//_______________________ Velocity _______________________________
if(ser_data == 0x52)
    146e:	c2 35       	cpi	r28, 0x52	; 82
    1470:	39 f4       	brne	.+14     	; 0x1480 <__vector_51+0x67a>
{
	flag = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 47 02 	sts	0x0247, r25
    147a:	80 93 46 02 	sts	0x0246, r24
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <__vector_51+0x69a>
}

if (ser_data == 0x53)
    1480:	c3 35       	cpi	r28, 0x53	; 83
    1482:	29 f4       	brne	.+10     	; 0x148e <__vector_51+0x688>
{
	velocity(255,255);	
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	0e 94 b6 06 	call	0xd6c	; 0xd6c <velocity>
    148c:	12 c0       	rjmp	.+36     	; 0x14b2 <__vector_51+0x6ac>
}

//________________________ Position Encoders _______________________________
if (ser_data == 0x55 )
    148e:	c5 35       	cpi	r28, 0x55	; 85
    1490:	39 f4       	brne	.+14     	; 0x14a0 <__vector_51+0x69a>
{
	flag_position_encoder_forward = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	90 93 45 02 	sts	0x0245, r25
    149a:	80 93 44 02 	sts	0x0244, r24
    149e:	12 c0       	rjmp	.+36     	; 0x14c4 <__vector_51+0x6be>
}

if (ser_data == 0x56)
    14a0:	c6 35       	cpi	r28, 0x56	; 86
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <__vector_51+0x6ac>
{
	flag_position_encoder_backward = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	90 93 41 02 	sts	0x0241, r25
    14ac:	80 93 40 02 	sts	0x0240, r24
    14b0:	12 c0       	rjmp	.+36     	; 0x14d6 <__vector_51+0x6d0>
}

if (ser_data == 0x57)
    14b2:	c7 35       	cpi	r28, 0x57	; 87
    14b4:	39 f4       	brne	.+14     	; 0x14c4 <__vector_51+0x6be>
{
	flag_rotation_right=1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	90 93 3d 02 	sts	0x023D, r25
    14be:	80 93 3c 02 	sts	0x023C, r24
    14c2:	12 c0       	rjmp	.+36     	; 0x14e8 <__vector_51+0x6e2>
}

if (ser_data == 0x58)
    14c4:	c8 35       	cpi	r28, 0x58	; 88
    14c6:	39 f4       	brne	.+14     	; 0x14d6 <__vector_51+0x6d0>
{
	flag_rotation_left=1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	90 93 39 02 	sts	0x0239, r25
    14d0:	80 93 38 02 	sts	0x0238, r24
    14d4:	12 c0       	rjmp	.+36     	; 0x14fa <__vector_51+0x6f4>
}

//_______________________________ Servo Motor ______________________________________________
if (ser_data == 0x80)
    14d6:	c0 38       	cpi	r28, 0x80	; 128
    14d8:	39 f4       	brne	.+14     	; 0x14e8 <__vector_51+0x6e2>
{
	flag_servo1 = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 35 02 	sts	0x0235, r25
    14e2:	80 93 34 02 	sts	0x0234, r24
    14e6:	12 c0       	rjmp	.+36     	; 0x150c <__vector_51+0x706>
}
if (ser_data == 0x81)
    14e8:	c1 38       	cpi	r28, 0x81	; 129
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__vector_51+0x6f4>
{
	flag_servo2 = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	90 93 33 02 	sts	0x0233, r25
    14f4:	80 93 32 02 	sts	0x0232, r24
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <__vector_51+0x71c>
}
if (ser_data == 0x82)
    14fa:	c2 38       	cpi	r28, 0x82	; 130
    14fc:	39 f4       	brne	.+14     	; 0x150c <__vector_51+0x706>
{
	flag_servo3 = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	90 93 31 02 	sts	0x0231, r25
    1506:	80 93 30 02 	sts	0x0230, r24
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <__vector_51+0x71c>
}

//________________________________________ LCD ______________________________________________
if (ser_data == 0x83)
    150c:	c3 38       	cpi	r28, 0x83	; 131
    150e:	49 f4       	brne	.+18     	; 0x1522 <__vector_51+0x71c>
{
	flag_lcd = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 93 2f 02 	sts	0x022F, r25
    1518:	80 93 2e 02 	sts	0x022E, r24
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <__vector_51+0x71c>
  if (flag_servo3 == 1)
  {
	  temp2 = ser_data;
	  flag_servo3_main=1;
	  flag_servo3 = 0;
	  ser_data = 0x00;
    151e:	c0 e0       	ldi	r28, 0x00	; 0
    1520:	78 ce       	rjmp	.-784    	; 0x1212 <__vector_51+0x40c>
if (ser_data == 0x83)
{
	flag_lcd = 1;
}

}
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <print_sensor>:


// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location.
void print_sensor(char row, char coloumn,unsigned char channel)
{
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	d8 2f       	mov	r29, r24
    1552:	c6 2f       	mov	r28, r22
    1554:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
    1556:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
    155a:	48 2f       	mov	r20, r24
    155c:	80 93 65 02 	sts	0x0265, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    1560:	8d 2f       	mov	r24, r29
    1562:	6c 2f       	mov	r22, r28
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	23 e0       	ldi	r18, 0x03	; 3
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor.
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1578:	68 2f       	mov	r22, r24
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__floatunsisf>
    1584:	2f ee       	ldi	r18, 0xEF	; 239
    1586:	39 ec       	ldi	r19, 0xC9	; 201
    1588:	43 e9       	ldi	r20, 0x93	; 147
    158a:	5f e3       	ldi	r21, 0x3F	; 63
    158c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <pow>
    1590:	b6 2f       	mov	r27, r22
    1592:	a7 2f       	mov	r26, r23
    1594:	38 2f       	mov	r19, r24
    1596:	29 2f       	mov	r18, r25
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	9f e3       	ldi	r25, 0x3F	; 63
    15a0:	42 2f       	mov	r20, r18
    15a2:	0b 2f       	mov	r16, r27
    15a4:	1a 2f       	mov	r17, r26
    15a6:	23 2f       	mov	r18, r19
    15a8:	34 2f       	mov	r19, r20
    15aa:	a9 01       	movw	r20, r18
    15ac:	98 01       	movw	r18, r16
    15ae:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__divsf3>
    15b2:	2a e9       	ldi	r18, 0x9A	; 154
    15b4:	39 ef       	ldi	r19, 0xF9	; 249
    15b6:	4e e2       	ldi	r20, 0x2E	; 46
    15b8:	55 e4       	ldi	r21, 0x45	; 69
    15ba:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__mulsf3>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	51 e4       	ldi	r21, 0x41	; 65
    15c6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__mulsf3>
    15ca:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fixsfsi>
    15ce:	88 27       	eor	r24, r24
    15d0:	77 fd       	sbrc	r23, 7
    15d2:	80 95       	com	r24
    15d4:	98 2f       	mov	r25, r24
    15d6:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <__floatsisf>
	distanceInt = (int)distance;
    15da:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
    15de:	86 2f       	mov	r24, r22
    15e0:	97 2f       	mov	r25, r23
    15e2:	23 e0       	ldi	r18, 0x03	; 3
    15e4:	81 32       	cpi	r24, 0x21	; 33
    15e6:	92 07       	cpc	r25, r18
    15e8:	10 f0       	brcs	.+4      	; 0x15ee <Sharp_GP2D12_estimation+0x7a>
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	93 e0       	ldi	r25, 0x03	; 3
}
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	08 95       	ret

000015f4 <main>:
//-------------------------------------------------------------------------------
//Main Function
//-------------------------------------------------------------------------------
int main(void)
{
	init_devices();
    15f4:	0e 94 e7 06 	call	0xdce	; 0xdce <init_devices>
	
  

	while(1)
	{
		if (flag_position_encoder_forward_1 == 1)
    15f8:	80 91 42 02 	lds	r24, 0x0242
    15fc:	90 91 43 02 	lds	r25, 0x0243
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	51 f4       	brne	.+20     	; 0x161a <main+0x26>
		{
			//distance_position_encoder = (unsigned int)temp4;
			forward_mm(temp_distance);
    1606:	80 91 48 02 	lds	r24, 0x0248
    160a:	90 91 49 02 	lds	r25, 0x0249
    160e:	0e 94 bb 06 	call	0xd76	; 0xd76 <forward_mm>
			flag_position_encoder_forward_1=0;
    1612:	10 92 43 02 	sts	0x0243, r1
    1616:	10 92 42 02 	sts	0x0242, r1
		}
		if (flag_position_encoder_backward_1 == 1)
    161a:	80 91 3e 02 	lds	r24, 0x023E
    161e:	90 91 3f 02 	lds	r25, 0x023F
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	51 f4       	brne	.+20     	; 0x163c <main+0x48>
		{
			//distance_position_encoder = (unsigned int)temp4;
			backward_mm(temp_distance);
    1628:	80 91 48 02 	lds	r24, 0x0248
    162c:	90 91 49 02 	lds	r25, 0x0249
    1630:	0e 94 c6 06 	call	0xd8c	; 0xd8c <backward_mm>
			flag_position_encoder_backward_1=0;
    1634:	10 92 3f 02 	sts	0x023F, r1
    1638:	10 92 3e 02 	sts	0x023E, r1
		}
		if (flag_rotation_right_1==1)
    163c:	80 91 3a 02 	lds	r24, 0x023A
    1640:	90 91 3b 02 	lds	r25, 0x023B
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	51 f4       	brne	.+20     	; 0x165e <main+0x6a>
		{
			//angle_rotation = (unsigned int)temp2;
			right_degrees(temp_rotation);
    164a:	80 91 4a 02 	lds	r24, 0x024A
    164e:	90 91 4b 02 	lds	r25, 0x024B
    1652:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <right_degrees>
			flag_rotation_right_1=0;
    1656:	10 92 3b 02 	sts	0x023B, r1
    165a:	10 92 3a 02 	sts	0x023A, r1
		}
		if (flag_rotation_left_1==1)
    165e:	80 91 36 02 	lds	r24, 0x0236
    1662:	90 91 37 02 	lds	r25, 0x0237
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	51 f4       	brne	.+20     	; 0x1680 <main+0x8c>
		{
			//angle_rotation = (unsigned int)temp2;
			left_degrees(temp_rotation);
    166c:	80 91 4a 02 	lds	r24, 0x024A
    1670:	90 91 4b 02 	lds	r25, 0x024B
    1674:	0e 94 d1 06 	call	0xda2	; 0xda2 <left_degrees>
			flag_rotation_left_1=0;
    1678:	10 92 37 02 	sts	0x0237, r1
    167c:	10 92 36 02 	sts	0x0236, r1
		}
		
		//Rotate Servo Motor 1
		if (flag_servo1_main==1)
    1680:	80 91 06 02 	lds	r24, 0x0206
    1684:	90 91 07 02 	lds	r25, 0x0207
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	d1 f5       	brne	.+116    	; 0x1702 <main+0x10e>
		{
			s1 = (int)temp2;
    168e:	80 91 50 02 	lds	r24, 0x0250
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	90 93 29 02 	sts	0x0229, r25
    1698:	80 93 28 02 	sts	0x0228, r24
			for(a=0;a<=s1;a++){
    169c:	10 92 81 02 	sts	0x0281, r1
    16a0:	10 92 80 02 	sts	0x0280, r1
    16a4:	80 91 28 02 	lds	r24, 0x0228
    16a8:	90 91 29 02 	lds	r25, 0x0229
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
				servo_1(a);
    16b0:	0e 94 26 03 	call	0x64c	; 0x64c <servo_1>
    16b4:	89 e9       	ldi	r24, 0x99	; 153
    16b6:	99 e5       	ldi	r25, 0x59	; 89
    16b8:	a1 e0       	ldi	r26, 0x01	; 1
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	90 40       	sbci	r25, 0x00	; 0
    16be:	a0 40       	sbci	r26, 0x00	; 0
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <main+0xc6>
    16c2:	00 00       	nop
		
		//Rotate Servo Motor 1
		if (flag_servo1_main==1)
		{
			s1 = (int)temp2;
			for(a=0;a<=s1;a++){
    16c4:	80 91 80 02 	lds	r24, 0x0280
    16c8:	90 91 81 02 	lds	r25, 0x0281
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	90 93 81 02 	sts	0x0281, r25
    16d2:	80 93 80 02 	sts	0x0280, r24
    16d6:	20 91 28 02 	lds	r18, 0x0228
    16da:	30 91 29 02 	lds	r19, 0x0229
    16de:	28 17       	cp	r18, r24
    16e0:	39 07       	cpc	r19, r25
    16e2:	30 f7       	brcc	.-52     	; 0x16b0 <main+0xbc>
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	9f ef       	ldi	r25, 0xFF	; 255
    16e8:	ac e2       	ldi	r26, 0x2C	; 44
    16ea:	81 50       	subi	r24, 0x01	; 1
    16ec:	90 40       	sbci	r25, 0x00	; 0
    16ee:	a0 40       	sbci	r26, 0x00	; 0
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <main+0xf6>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <main+0x100>
    16f4:	00 00       	nop
				servo_1(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_1_free();
    16f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <servo_1_free>
			flag_servo1_main=0;
    16fa:	10 92 07 02 	sts	0x0207, r1
    16fe:	10 92 06 02 	sts	0x0206, r1
		}
		
		//Rotate Servo Motor 2
		if (flag_servo2_main==1)
    1702:	80 91 04 02 	lds	r24, 0x0204
    1706:	90 91 05 02 	lds	r25, 0x0205
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	d1 f5       	brne	.+116    	; 0x1784 <main+0x190>
		{
			s1 = (int)temp2;
    1710:	80 91 50 02 	lds	r24, 0x0250
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	90 93 29 02 	sts	0x0229, r25
    171a:	80 93 28 02 	sts	0x0228, r24
			for(a=0;a<=s1;a++){
    171e:	10 92 81 02 	sts	0x0281, r1
    1722:	10 92 80 02 	sts	0x0280, r1
    1726:	80 91 28 02 	lds	r24, 0x0228
    172a:	90 91 29 02 	lds	r25, 0x0229
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
				servo_2(a);
    1732:	0e 94 3f 03 	call	0x67e	; 0x67e <servo_2>
    1736:	89 e9       	ldi	r24, 0x99	; 153
    1738:	99 e5       	ldi	r25, 0x59	; 89
    173a:	a1 e0       	ldi	r26, 0x01	; 1
    173c:	81 50       	subi	r24, 0x01	; 1
    173e:	90 40       	sbci	r25, 0x00	; 0
    1740:	a0 40       	sbci	r26, 0x00	; 0
    1742:	e1 f7       	brne	.-8      	; 0x173c <main+0x148>
    1744:	00 00       	nop
		
		//Rotate Servo Motor 2
		if (flag_servo2_main==1)
		{
			s1 = (int)temp2;
			for(a=0;a<=s1;a++){
    1746:	80 91 80 02 	lds	r24, 0x0280
    174a:	90 91 81 02 	lds	r25, 0x0281
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	90 93 81 02 	sts	0x0281, r25
    1754:	80 93 80 02 	sts	0x0280, r24
    1758:	20 91 28 02 	lds	r18, 0x0228
    175c:	30 91 29 02 	lds	r19, 0x0229
    1760:	28 17       	cp	r18, r24
    1762:	39 07       	cpc	r19, r25
    1764:	30 f7       	brcc	.-52     	; 0x1732 <main+0x13e>
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	ac e2       	ldi	r26, 0x2C	; 44
    176c:	81 50       	subi	r24, 0x01	; 1
    176e:	90 40       	sbci	r25, 0x00	; 0
    1770:	a0 40       	sbci	r26, 0x00	; 0
    1772:	e1 f7       	brne	.-8      	; 0x176c <main+0x178>
    1774:	00 c0       	rjmp	.+0      	; 0x1776 <main+0x182>
    1776:	00 00       	nop
				servo_2(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_2_free();
    1778:	0e 94 78 03 	call	0x6f0	; 0x6f0 <servo_2_free>
			flag_servo2_main=0;
    177c:	10 92 05 02 	sts	0x0205, r1
    1780:	10 92 04 02 	sts	0x0204, r1
		}
		
		//Rotate Servo Motor 3
		if (flag_servo3_main==1)
    1784:	80 91 02 02 	lds	r24, 0x0202
    1788:	90 91 03 02 	lds	r25, 0x0203
    178c:	81 30       	cpi	r24, 0x01	; 1
    178e:	91 05       	cpc	r25, r1
    1790:	d1 f5       	brne	.+116    	; 0x1806 <main+0x212>
		{
			s1 = (int)temp2;
    1792:	80 91 50 02 	lds	r24, 0x0250
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	90 93 29 02 	sts	0x0229, r25
    179c:	80 93 28 02 	sts	0x0228, r24
			for(a=0;a<=s1;a++){
    17a0:	10 92 81 02 	sts	0x0281, r1
    17a4:	10 92 80 02 	sts	0x0280, r1
    17a8:	80 91 28 02 	lds	r24, 0x0228
    17ac:	90 91 29 02 	lds	r25, 0x0229
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
				servo_3(a);
    17b4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <servo_3>
    17b8:	89 e9       	ldi	r24, 0x99	; 153
    17ba:	99 e5       	ldi	r25, 0x59	; 89
    17bc:	a1 e0       	ldi	r26, 0x01	; 1
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	a0 40       	sbci	r26, 0x00	; 0
    17c4:	e1 f7       	brne	.-8      	; 0x17be <main+0x1ca>
    17c6:	00 00       	nop
		
		//Rotate Servo Motor 3
		if (flag_servo3_main==1)
		{
			s1 = (int)temp2;
			for(a=0;a<=s1;a++){
    17c8:	80 91 80 02 	lds	r24, 0x0280
    17cc:	90 91 81 02 	lds	r25, 0x0281
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	90 93 81 02 	sts	0x0281, r25
    17d6:	80 93 80 02 	sts	0x0280, r24
    17da:	20 91 28 02 	lds	r18, 0x0228
    17de:	30 91 29 02 	lds	r19, 0x0229
    17e2:	28 17       	cp	r18, r24
    17e4:	39 07       	cpc	r19, r25
    17e6:	30 f7       	brcc	.-52     	; 0x17b4 <main+0x1c0>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	ac e2       	ldi	r26, 0x2C	; 44
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	90 40       	sbci	r25, 0x00	; 0
    17f2:	a0 40       	sbci	r26, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <main+0x1fa>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <main+0x204>
    17f8:	00 00       	nop
				servo_3(a);
				_delay_ms(30);
			}
			_delay_ms(1000);
			servo_3_free();
    17fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <servo_3_free>
			flag_servo3_main=0;
    17fe:	10 92 03 02 	sts	0x0203, r1
    1802:	10 92 02 02 	sts	0x0202, r1
		}
		
		//Print On LCD
		if (flag_lcd_main == 1)
    1806:	80 91 2c 02 	lds	r24, 0x022C
    180a:	90 91 2d 02 	lds	r25, 0x022D
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	91 f4       	brne	.+36     	; 0x1838 <main+0x244>
		{
			lcd_cursor(lcd_row, lcd_column);
    1814:	80 91 26 02 	lds	r24, 0x0226
    1818:	90 91 27 02 	lds	r25, 0x0227
    181c:	60 91 24 02 	lds	r22, 0x0224
    1820:	70 91 25 02 	lds	r23, 0x0225
    1824:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
			lcd_wr_char(temp2);
    1828:	80 91 50 02 	lds	r24, 0x0250
    182c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
			flag_lcd_main = 0;
    1830:	10 92 2d 02 	sts	0x022D, r1
    1834:	10 92 2c 02 	sts	0x022C, r1
		}
		
		sensor_data_interpretation();
    1838:	0e 94 42 06 	call	0xc84	; 0xc84 <sensor_data_interpretation>
		//BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
		//lcd_print(1,1,v1,4);

		//print_sensor(1,1,0);							//Prints Battery voltage binary value

		print_sensor(1,6,5);							//Prints IR Proximity Sensor 1
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	66 e0       	ldi	r22, 0x06	; 6
    1840:	45 e0       	ldi	r20, 0x05	; 5
    1842:	0e 94 a6 0a 	call	0x154c	; 0x154c <print_sensor>
		print_sensor(1,10,6);							//Prints vlaue of Analog IR Proximity Sensor 2
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	6a e0       	ldi	r22, 0x0A	; 10
    184a:	46 e0       	ldi	r20, 0x06	; 6
    184c:	0e 94 a6 0a 	call	0x154c	; 0x154c <print_sensor>
		print_sensor(1,14,7);							//Prints value of Analog IR Proximity Sensor 3
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	6e e0       	ldi	r22, 0x0E	; 14
    1854:	47 e0       	ldi	r20, 0x07	; 7
    1856:	0e 94 a6 0a 	call	0x154c	; 0x154c <print_sensor>
		//lcd_print(2,1,v2,4);

		//print_sensor(2,9,11); 						//Analog Value Of Front Sharp Sensor

		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    185a:	8b e0       	ldi	r24, 0x0B	; 11
    185c:	0e 94 13 06 	call	0xc26	; 0xc26 <ADC_Conversion>
    1860:	80 93 82 02 	sts	0x0282, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    1864:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Sharp_GP2D12_estimation>
    1868:	ac 01       	movw	r20, r24
    186a:	90 93 8d 02 	sts	0x028D, r25
    186e:	80 93 8c 02 	sts	0x028C, r24
		lcd_print(2,14,value,3);
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	6e e0       	ldi	r22, 0x0E	; 14
    1876:	23 e0       	ldi	r18, 0x03	; 3
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
	}
    187e:	bc ce       	rjmp	.-648    	; 0x15f8 <main+0x4>

00001880 <__subsf3>:
    1880:	50 58       	subi	r21, 0x80	; 128

00001882 <__addsf3>:
    1882:	bb 27       	eor	r27, r27
    1884:	aa 27       	eor	r26, r26
    1886:	0e d0       	rcall	.+28     	; 0x18a4 <__addsf3x>
    1888:	75 c1       	rjmp	.+746    	; 0x1b74 <__fp_round>
    188a:	66 d1       	rcall	.+716    	; 0x1b58 <__fp_pscA>
    188c:	30 f0       	brcs	.+12     	; 0x189a <__addsf3+0x18>
    188e:	6b d1       	rcall	.+726    	; 0x1b66 <__fp_pscB>
    1890:	20 f0       	brcs	.+8      	; 0x189a <__addsf3+0x18>
    1892:	31 f4       	brne	.+12     	; 0x18a0 <__addsf3+0x1e>
    1894:	9f 3f       	cpi	r25, 0xFF	; 255
    1896:	11 f4       	brne	.+4      	; 0x189c <__addsf3+0x1a>
    1898:	1e f4       	brtc	.+6      	; 0x18a0 <__addsf3+0x1e>
    189a:	5b c1       	rjmp	.+694    	; 0x1b52 <__fp_nan>
    189c:	0e f4       	brtc	.+2      	; 0x18a0 <__addsf3+0x1e>
    189e:	e0 95       	com	r30
    18a0:	e7 fb       	bst	r30, 7
    18a2:	51 c1       	rjmp	.+674    	; 0x1b46 <__fp_inf>

000018a4 <__addsf3x>:
    18a4:	e9 2f       	mov	r30, r25
    18a6:	77 d1       	rcall	.+750    	; 0x1b96 <__fp_split3>
    18a8:	80 f3       	brcs	.-32     	; 0x188a <__addsf3+0x8>
    18aa:	ba 17       	cp	r27, r26
    18ac:	62 07       	cpc	r22, r18
    18ae:	73 07       	cpc	r23, r19
    18b0:	84 07       	cpc	r24, r20
    18b2:	95 07       	cpc	r25, r21
    18b4:	18 f0       	brcs	.+6      	; 0x18bc <__addsf3x+0x18>
    18b6:	71 f4       	brne	.+28     	; 0x18d4 <__addsf3x+0x30>
    18b8:	9e f5       	brtc	.+102    	; 0x1920 <__addsf3x+0x7c>
    18ba:	8f c1       	rjmp	.+798    	; 0x1bda <__fp_zero>
    18bc:	0e f4       	brtc	.+2      	; 0x18c0 <__addsf3x+0x1c>
    18be:	e0 95       	com	r30
    18c0:	0b 2e       	mov	r0, r27
    18c2:	ba 2f       	mov	r27, r26
    18c4:	a0 2d       	mov	r26, r0
    18c6:	0b 01       	movw	r0, r22
    18c8:	b9 01       	movw	r22, r18
    18ca:	90 01       	movw	r18, r0
    18cc:	0c 01       	movw	r0, r24
    18ce:	ca 01       	movw	r24, r20
    18d0:	a0 01       	movw	r20, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	ff 27       	eor	r31, r31
    18d6:	59 1b       	sub	r21, r25
    18d8:	99 f0       	breq	.+38     	; 0x1900 <__addsf3x+0x5c>
    18da:	59 3f       	cpi	r21, 0xF9	; 249
    18dc:	50 f4       	brcc	.+20     	; 0x18f2 <__addsf3x+0x4e>
    18de:	50 3e       	cpi	r21, 0xE0	; 224
    18e0:	68 f1       	brcs	.+90     	; 0x193c <__addsf3x+0x98>
    18e2:	1a 16       	cp	r1, r26
    18e4:	f0 40       	sbci	r31, 0x00	; 0
    18e6:	a2 2f       	mov	r26, r18
    18e8:	23 2f       	mov	r18, r19
    18ea:	34 2f       	mov	r19, r20
    18ec:	44 27       	eor	r20, r20
    18ee:	58 5f       	subi	r21, 0xF8	; 248
    18f0:	f3 cf       	rjmp	.-26     	; 0x18d8 <__addsf3x+0x34>
    18f2:	46 95       	lsr	r20
    18f4:	37 95       	ror	r19
    18f6:	27 95       	ror	r18
    18f8:	a7 95       	ror	r26
    18fa:	f0 40       	sbci	r31, 0x00	; 0
    18fc:	53 95       	inc	r21
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__addsf3x+0x4e>
    1900:	7e f4       	brtc	.+30     	; 0x1920 <__addsf3x+0x7c>
    1902:	1f 16       	cp	r1, r31
    1904:	ba 0b       	sbc	r27, r26
    1906:	62 0b       	sbc	r22, r18
    1908:	73 0b       	sbc	r23, r19
    190a:	84 0b       	sbc	r24, r20
    190c:	ba f0       	brmi	.+46     	; 0x193c <__addsf3x+0x98>
    190e:	91 50       	subi	r25, 0x01	; 1
    1910:	a1 f0       	breq	.+40     	; 0x193a <__addsf3x+0x96>
    1912:	ff 0f       	add	r31, r31
    1914:	bb 1f       	adc	r27, r27
    1916:	66 1f       	adc	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	c2 f7       	brpl	.-16     	; 0x190e <__addsf3x+0x6a>
    191e:	0e c0       	rjmp	.+28     	; 0x193c <__addsf3x+0x98>
    1920:	ba 0f       	add	r27, r26
    1922:	62 1f       	adc	r22, r18
    1924:	73 1f       	adc	r23, r19
    1926:	84 1f       	adc	r24, r20
    1928:	48 f4       	brcc	.+18     	; 0x193c <__addsf3x+0x98>
    192a:	87 95       	ror	r24
    192c:	77 95       	ror	r23
    192e:	67 95       	ror	r22
    1930:	b7 95       	ror	r27
    1932:	f7 95       	ror	r31
    1934:	9e 3f       	cpi	r25, 0xFE	; 254
    1936:	08 f0       	brcs	.+2      	; 0x193a <__addsf3x+0x96>
    1938:	b3 cf       	rjmp	.-154    	; 0x18a0 <__addsf3+0x1e>
    193a:	93 95       	inc	r25
    193c:	88 0f       	add	r24, r24
    193e:	08 f0       	brcs	.+2      	; 0x1942 <__addsf3x+0x9e>
    1940:	99 27       	eor	r25, r25
    1942:	ee 0f       	add	r30, r30
    1944:	97 95       	ror	r25
    1946:	87 95       	ror	r24
    1948:	08 95       	ret

0000194a <__cmpsf2>:
    194a:	d9 d0       	rcall	.+434    	; 0x1afe <__fp_cmp>
    194c:	08 f4       	brcc	.+2      	; 0x1950 <__cmpsf2+0x6>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	08 95       	ret

00001952 <__divsf3>:
    1952:	0c d0       	rcall	.+24     	; 0x196c <__divsf3x>
    1954:	0f c1       	rjmp	.+542    	; 0x1b74 <__fp_round>
    1956:	07 d1       	rcall	.+526    	; 0x1b66 <__fp_pscB>
    1958:	40 f0       	brcs	.+16     	; 0x196a <__divsf3+0x18>
    195a:	fe d0       	rcall	.+508    	; 0x1b58 <__fp_pscA>
    195c:	30 f0       	brcs	.+12     	; 0x196a <__divsf3+0x18>
    195e:	21 f4       	brne	.+8      	; 0x1968 <__divsf3+0x16>
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	19 f0       	breq	.+6      	; 0x196a <__divsf3+0x18>
    1964:	f0 c0       	rjmp	.+480    	; 0x1b46 <__fp_inf>
    1966:	51 11       	cpse	r21, r1
    1968:	39 c1       	rjmp	.+626    	; 0x1bdc <__fp_szero>
    196a:	f3 c0       	rjmp	.+486    	; 0x1b52 <__fp_nan>

0000196c <__divsf3x>:
    196c:	14 d1       	rcall	.+552    	; 0x1b96 <__fp_split3>
    196e:	98 f3       	brcs	.-26     	; 0x1956 <__divsf3+0x4>

00001970 <__divsf3_pse>:
    1970:	99 23       	and	r25, r25
    1972:	c9 f3       	breq	.-14     	; 0x1966 <__divsf3+0x14>
    1974:	55 23       	and	r21, r21
    1976:	b1 f3       	breq	.-20     	; 0x1964 <__divsf3+0x12>
    1978:	95 1b       	sub	r25, r21
    197a:	55 0b       	sbc	r21, r21
    197c:	bb 27       	eor	r27, r27
    197e:	aa 27       	eor	r26, r26
    1980:	62 17       	cp	r22, r18
    1982:	73 07       	cpc	r23, r19
    1984:	84 07       	cpc	r24, r20
    1986:	38 f0       	brcs	.+14     	; 0x1996 <__divsf3_pse+0x26>
    1988:	9f 5f       	subi	r25, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	44 1f       	adc	r20, r20
    1992:	aa 1f       	adc	r26, r26
    1994:	a9 f3       	breq	.-22     	; 0x1980 <__divsf3_pse+0x10>
    1996:	33 d0       	rcall	.+102    	; 0x19fe <__divsf3_pse+0x8e>
    1998:	0e 2e       	mov	r0, r30
    199a:	3a f0       	brmi	.+14     	; 0x19aa <__divsf3_pse+0x3a>
    199c:	e0 e8       	ldi	r30, 0x80	; 128
    199e:	30 d0       	rcall	.+96     	; 0x1a00 <__divsf3_pse+0x90>
    19a0:	91 50       	subi	r25, 0x01	; 1
    19a2:	50 40       	sbci	r21, 0x00	; 0
    19a4:	e6 95       	lsr	r30
    19a6:	00 1c       	adc	r0, r0
    19a8:	ca f7       	brpl	.-14     	; 0x199c <__divsf3_pse+0x2c>
    19aa:	29 d0       	rcall	.+82     	; 0x19fe <__divsf3_pse+0x8e>
    19ac:	fe 2f       	mov	r31, r30
    19ae:	27 d0       	rcall	.+78     	; 0x19fe <__divsf3_pse+0x8e>
    19b0:	66 0f       	add	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	bb 1f       	adc	r27, r27
    19b8:	26 17       	cp	r18, r22
    19ba:	37 07       	cpc	r19, r23
    19bc:	48 07       	cpc	r20, r24
    19be:	ab 07       	cpc	r26, r27
    19c0:	b0 e8       	ldi	r27, 0x80	; 128
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <__divsf3_pse+0x56>
    19c4:	bb 0b       	sbc	r27, r27
    19c6:	80 2d       	mov	r24, r0
    19c8:	bf 01       	movw	r22, r30
    19ca:	ff 27       	eor	r31, r31
    19cc:	93 58       	subi	r25, 0x83	; 131
    19ce:	5f 4f       	sbci	r21, 0xFF	; 255
    19d0:	2a f0       	brmi	.+10     	; 0x19dc <__divsf3_pse+0x6c>
    19d2:	9e 3f       	cpi	r25, 0xFE	; 254
    19d4:	51 05       	cpc	r21, r1
    19d6:	68 f0       	brcs	.+26     	; 0x19f2 <__divsf3_pse+0x82>
    19d8:	b6 c0       	rjmp	.+364    	; 0x1b46 <__fp_inf>
    19da:	00 c1       	rjmp	.+512    	; 0x1bdc <__fp_szero>
    19dc:	5f 3f       	cpi	r21, 0xFF	; 255
    19de:	ec f3       	brlt	.-6      	; 0x19da <__divsf3_pse+0x6a>
    19e0:	98 3e       	cpi	r25, 0xE8	; 232
    19e2:	dc f3       	brlt	.-10     	; 0x19da <__divsf3_pse+0x6a>
    19e4:	86 95       	lsr	r24
    19e6:	77 95       	ror	r23
    19e8:	67 95       	ror	r22
    19ea:	b7 95       	ror	r27
    19ec:	f7 95       	ror	r31
    19ee:	9f 5f       	subi	r25, 0xFF	; 255
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__divsf3_pse+0x74>
    19f2:	88 0f       	add	r24, r24
    19f4:	91 1d       	adc	r25, r1
    19f6:	96 95       	lsr	r25
    19f8:	87 95       	ror	r24
    19fa:	97 f9       	bld	r25, 7
    19fc:	08 95       	ret
    19fe:	e1 e0       	ldi	r30, 0x01	; 1
    1a00:	66 0f       	add	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	bb 1f       	adc	r27, r27
    1a08:	62 17       	cp	r22, r18
    1a0a:	73 07       	cpc	r23, r19
    1a0c:	84 07       	cpc	r24, r20
    1a0e:	ba 07       	cpc	r27, r26
    1a10:	20 f0       	brcs	.+8      	; 0x1a1a <__divsf3_pse+0xaa>
    1a12:	62 1b       	sub	r22, r18
    1a14:	73 0b       	sbc	r23, r19
    1a16:	84 0b       	sbc	r24, r20
    1a18:	ba 0b       	sbc	r27, r26
    1a1a:	ee 1f       	adc	r30, r30
    1a1c:	88 f7       	brcc	.-30     	; 0x1a00 <__divsf3_pse+0x90>
    1a1e:	e0 95       	com	r30
    1a20:	08 95       	ret

00001a22 <__fixsfsi>:
    1a22:	04 d0       	rcall	.+8      	; 0x1a2c <__fixunssfsi>
    1a24:	68 94       	set
    1a26:	b1 11       	cpse	r27, r1
    1a28:	d9 c0       	rjmp	.+434    	; 0x1bdc <__fp_szero>
    1a2a:	08 95       	ret

00001a2c <__fixunssfsi>:
    1a2c:	bc d0       	rcall	.+376    	; 0x1ba6 <__fp_splitA>
    1a2e:	88 f0       	brcs	.+34     	; 0x1a52 <__fixunssfsi+0x26>
    1a30:	9f 57       	subi	r25, 0x7F	; 127
    1a32:	90 f0       	brcs	.+36     	; 0x1a58 <__fixunssfsi+0x2c>
    1a34:	b9 2f       	mov	r27, r25
    1a36:	99 27       	eor	r25, r25
    1a38:	b7 51       	subi	r27, 0x17	; 23
    1a3a:	a0 f0       	brcs	.+40     	; 0x1a64 <__fixunssfsi+0x38>
    1a3c:	d1 f0       	breq	.+52     	; 0x1a72 <__fixunssfsi+0x46>
    1a3e:	66 0f       	add	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	1a f0       	brmi	.+6      	; 0x1a4e <__fixunssfsi+0x22>
    1a48:	ba 95       	dec	r27
    1a4a:	c9 f7       	brne	.-14     	; 0x1a3e <__fixunssfsi+0x12>
    1a4c:	12 c0       	rjmp	.+36     	; 0x1a72 <__fixunssfsi+0x46>
    1a4e:	b1 30       	cpi	r27, 0x01	; 1
    1a50:	81 f0       	breq	.+32     	; 0x1a72 <__fixunssfsi+0x46>
    1a52:	c3 d0       	rcall	.+390    	; 0x1bda <__fp_zero>
    1a54:	b1 e0       	ldi	r27, 0x01	; 1
    1a56:	08 95       	ret
    1a58:	c0 c0       	rjmp	.+384    	; 0x1bda <__fp_zero>
    1a5a:	67 2f       	mov	r22, r23
    1a5c:	78 2f       	mov	r23, r24
    1a5e:	88 27       	eor	r24, r24
    1a60:	b8 5f       	subi	r27, 0xF8	; 248
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <__fixunssfsi+0x46>
    1a64:	b9 3f       	cpi	r27, 0xF9	; 249
    1a66:	cc f3       	brlt	.-14     	; 0x1a5a <__fixunssfsi+0x2e>
    1a68:	86 95       	lsr	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	b3 95       	inc	r27
    1a70:	d9 f7       	brne	.-10     	; 0x1a68 <__fixunssfsi+0x3c>
    1a72:	3e f4       	brtc	.+14     	; 0x1a82 <__fixunssfsi+0x56>
    1a74:	90 95       	com	r25
    1a76:	80 95       	com	r24
    1a78:	70 95       	com	r23
    1a7a:	61 95       	neg	r22
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	08 95       	ret

00001a84 <__floatunsisf>:
    1a84:	e8 94       	clt
    1a86:	09 c0       	rjmp	.+18     	; 0x1a9a <__floatsisf+0x12>

00001a88 <__floatsisf>:
    1a88:	97 fb       	bst	r25, 7
    1a8a:	3e f4       	brtc	.+14     	; 0x1a9a <__floatsisf+0x12>
    1a8c:	90 95       	com	r25
    1a8e:	80 95       	com	r24
    1a90:	70 95       	com	r23
    1a92:	61 95       	neg	r22
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	8f 4f       	sbci	r24, 0xFF	; 255
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	99 23       	and	r25, r25
    1a9c:	a9 f0       	breq	.+42     	; 0x1ac8 <__floatsisf+0x40>
    1a9e:	f9 2f       	mov	r31, r25
    1aa0:	96 e9       	ldi	r25, 0x96	; 150
    1aa2:	bb 27       	eor	r27, r27
    1aa4:	93 95       	inc	r25
    1aa6:	f6 95       	lsr	r31
    1aa8:	87 95       	ror	r24
    1aaa:	77 95       	ror	r23
    1aac:	67 95       	ror	r22
    1aae:	b7 95       	ror	r27
    1ab0:	f1 11       	cpse	r31, r1
    1ab2:	f8 cf       	rjmp	.-16     	; 0x1aa4 <__floatsisf+0x1c>
    1ab4:	fa f4       	brpl	.+62     	; 0x1af4 <__floatsisf+0x6c>
    1ab6:	bb 0f       	add	r27, r27
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__floatsisf+0x36>
    1aba:	60 ff       	sbrs	r22, 0
    1abc:	1b c0       	rjmp	.+54     	; 0x1af4 <__floatsisf+0x6c>
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	16 c0       	rjmp	.+44     	; 0x1af4 <__floatsisf+0x6c>
    1ac8:	88 23       	and	r24, r24
    1aca:	11 f0       	breq	.+4      	; 0x1ad0 <__floatsisf+0x48>
    1acc:	96 e9       	ldi	r25, 0x96	; 150
    1ace:	11 c0       	rjmp	.+34     	; 0x1af2 <__floatsisf+0x6a>
    1ad0:	77 23       	and	r23, r23
    1ad2:	21 f0       	breq	.+8      	; 0x1adc <__floatsisf+0x54>
    1ad4:	9e e8       	ldi	r25, 0x8E	; 142
    1ad6:	87 2f       	mov	r24, r23
    1ad8:	76 2f       	mov	r23, r22
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <__floatsisf+0x5e>
    1adc:	66 23       	and	r22, r22
    1ade:	71 f0       	breq	.+28     	; 0x1afc <__floatsisf+0x74>
    1ae0:	96 e8       	ldi	r25, 0x86	; 134
    1ae2:	86 2f       	mov	r24, r22
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	2a f0       	brmi	.+10     	; 0x1af4 <__floatsisf+0x6c>
    1aea:	9a 95       	dec	r25
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	da f7       	brpl	.-10     	; 0x1aea <__floatsisf+0x62>
    1af4:	88 0f       	add	r24, r24
    1af6:	96 95       	lsr	r25
    1af8:	87 95       	ror	r24
    1afa:	97 f9       	bld	r25, 7
    1afc:	08 95       	ret

00001afe <__fp_cmp>:
    1afe:	99 0f       	add	r25, r25
    1b00:	00 08       	sbc	r0, r0
    1b02:	55 0f       	add	r21, r21
    1b04:	aa 0b       	sbc	r26, r26
    1b06:	e0 e8       	ldi	r30, 0x80	; 128
    1b08:	fe ef       	ldi	r31, 0xFE	; 254
    1b0a:	16 16       	cp	r1, r22
    1b0c:	17 06       	cpc	r1, r23
    1b0e:	e8 07       	cpc	r30, r24
    1b10:	f9 07       	cpc	r31, r25
    1b12:	c0 f0       	brcs	.+48     	; 0x1b44 <__fp_cmp+0x46>
    1b14:	12 16       	cp	r1, r18
    1b16:	13 06       	cpc	r1, r19
    1b18:	e4 07       	cpc	r30, r20
    1b1a:	f5 07       	cpc	r31, r21
    1b1c:	98 f0       	brcs	.+38     	; 0x1b44 <__fp_cmp+0x46>
    1b1e:	62 1b       	sub	r22, r18
    1b20:	73 0b       	sbc	r23, r19
    1b22:	84 0b       	sbc	r24, r20
    1b24:	95 0b       	sbc	r25, r21
    1b26:	39 f4       	brne	.+14     	; 0x1b36 <__fp_cmp+0x38>
    1b28:	0a 26       	eor	r0, r26
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <__fp_cmp+0x46>
    1b2c:	23 2b       	or	r18, r19
    1b2e:	24 2b       	or	r18, r20
    1b30:	25 2b       	or	r18, r21
    1b32:	21 f4       	brne	.+8      	; 0x1b3c <__fp_cmp+0x3e>
    1b34:	08 95       	ret
    1b36:	0a 26       	eor	r0, r26
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <__fp_cmp+0x3e>
    1b3a:	a1 40       	sbci	r26, 0x01	; 1
    1b3c:	a6 95       	lsr	r26
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	81 1d       	adc	r24, r1
    1b42:	81 1d       	adc	r24, r1
    1b44:	08 95       	ret

00001b46 <__fp_inf>:
    1b46:	97 f9       	bld	r25, 7
    1b48:	9f 67       	ori	r25, 0x7F	; 127
    1b4a:	80 e8       	ldi	r24, 0x80	; 128
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	08 95       	ret

00001b52 <__fp_nan>:
    1b52:	9f ef       	ldi	r25, 0xFF	; 255
    1b54:	80 ec       	ldi	r24, 0xC0	; 192
    1b56:	08 95       	ret

00001b58 <__fp_pscA>:
    1b58:	00 24       	eor	r0, r0
    1b5a:	0a 94       	dec	r0
    1b5c:	16 16       	cp	r1, r22
    1b5e:	17 06       	cpc	r1, r23
    1b60:	18 06       	cpc	r1, r24
    1b62:	09 06       	cpc	r0, r25
    1b64:	08 95       	ret

00001b66 <__fp_pscB>:
    1b66:	00 24       	eor	r0, r0
    1b68:	0a 94       	dec	r0
    1b6a:	12 16       	cp	r1, r18
    1b6c:	13 06       	cpc	r1, r19
    1b6e:	14 06       	cpc	r1, r20
    1b70:	05 06       	cpc	r0, r21
    1b72:	08 95       	ret

00001b74 <__fp_round>:
    1b74:	09 2e       	mov	r0, r25
    1b76:	03 94       	inc	r0
    1b78:	00 0c       	add	r0, r0
    1b7a:	11 f4       	brne	.+4      	; 0x1b80 <__fp_round+0xc>
    1b7c:	88 23       	and	r24, r24
    1b7e:	52 f0       	brmi	.+20     	; 0x1b94 <__fp_round+0x20>
    1b80:	bb 0f       	add	r27, r27
    1b82:	40 f4       	brcc	.+16     	; 0x1b94 <__fp_round+0x20>
    1b84:	bf 2b       	or	r27, r31
    1b86:	11 f4       	brne	.+4      	; 0x1b8c <__fp_round+0x18>
    1b88:	60 ff       	sbrs	r22, 0
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <__fp_round+0x20>
    1b8c:	6f 5f       	subi	r22, 0xFF	; 255
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	8f 4f       	sbci	r24, 0xFF	; 255
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	08 95       	ret

00001b96 <__fp_split3>:
    1b96:	57 fd       	sbrc	r21, 7
    1b98:	90 58       	subi	r25, 0x80	; 128
    1b9a:	44 0f       	add	r20, r20
    1b9c:	55 1f       	adc	r21, r21
    1b9e:	59 f0       	breq	.+22     	; 0x1bb6 <__fp_splitA+0x10>
    1ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba2:	71 f0       	breq	.+28     	; 0x1bc0 <__fp_splitA+0x1a>
    1ba4:	47 95       	ror	r20

00001ba6 <__fp_splitA>:
    1ba6:	88 0f       	add	r24, r24
    1ba8:	97 fb       	bst	r25, 7
    1baa:	99 1f       	adc	r25, r25
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <__fp_splitA+0x20>
    1bae:	9f 3f       	cpi	r25, 0xFF	; 255
    1bb0:	79 f0       	breq	.+30     	; 0x1bd0 <__fp_splitA+0x2a>
    1bb2:	87 95       	ror	r24
    1bb4:	08 95       	ret
    1bb6:	12 16       	cp	r1, r18
    1bb8:	13 06       	cpc	r1, r19
    1bba:	14 06       	cpc	r1, r20
    1bbc:	55 1f       	adc	r21, r21
    1bbe:	f2 cf       	rjmp	.-28     	; 0x1ba4 <__fp_split3+0xe>
    1bc0:	46 95       	lsr	r20
    1bc2:	f1 df       	rcall	.-30     	; 0x1ba6 <__fp_splitA>
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <__fp_splitA+0x30>
    1bc6:	16 16       	cp	r1, r22
    1bc8:	17 06       	cpc	r1, r23
    1bca:	18 06       	cpc	r1, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	f1 cf       	rjmp	.-30     	; 0x1bb2 <__fp_splitA+0xc>
    1bd0:	86 95       	lsr	r24
    1bd2:	71 05       	cpc	r23, r1
    1bd4:	61 05       	cpc	r22, r1
    1bd6:	08 94       	sec
    1bd8:	08 95       	ret

00001bda <__fp_zero>:
    1bda:	e8 94       	clt

00001bdc <__fp_szero>:
    1bdc:	bb 27       	eor	r27, r27
    1bde:	66 27       	eor	r22, r22
    1be0:	77 27       	eor	r23, r23
    1be2:	cb 01       	movw	r24, r22
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret

00001be8 <__gesf2>:
    1be8:	8a df       	rcall	.-236    	; 0x1afe <__fp_cmp>
    1bea:	08 f4       	brcc	.+2      	; 0x1bee <__gesf2+0x6>
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	08 95       	ret

00001bf0 <__mulsf3>:
    1bf0:	0b d0       	rcall	.+22     	; 0x1c08 <__mulsf3x>
    1bf2:	c0 cf       	rjmp	.-128    	; 0x1b74 <__fp_round>
    1bf4:	b1 df       	rcall	.-158    	; 0x1b58 <__fp_pscA>
    1bf6:	28 f0       	brcs	.+10     	; 0x1c02 <__mulsf3+0x12>
    1bf8:	b6 df       	rcall	.-148    	; 0x1b66 <__fp_pscB>
    1bfa:	18 f0       	brcs	.+6      	; 0x1c02 <__mulsf3+0x12>
    1bfc:	95 23       	and	r25, r21
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <__mulsf3+0x12>
    1c00:	a2 cf       	rjmp	.-188    	; 0x1b46 <__fp_inf>
    1c02:	a7 cf       	rjmp	.-178    	; 0x1b52 <__fp_nan>
    1c04:	11 24       	eor	r1, r1
    1c06:	ea cf       	rjmp	.-44     	; 0x1bdc <__fp_szero>

00001c08 <__mulsf3x>:
    1c08:	c6 df       	rcall	.-116    	; 0x1b96 <__fp_split3>
    1c0a:	a0 f3       	brcs	.-24     	; 0x1bf4 <__mulsf3+0x4>

00001c0c <__mulsf3_pse>:
    1c0c:	95 9f       	mul	r25, r21
    1c0e:	d1 f3       	breq	.-12     	; 0x1c04 <__mulsf3+0x14>
    1c10:	95 0f       	add	r25, r21
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	55 1f       	adc	r21, r21
    1c16:	62 9f       	mul	r22, r18
    1c18:	f0 01       	movw	r30, r0
    1c1a:	72 9f       	mul	r23, r18
    1c1c:	bb 27       	eor	r27, r27
    1c1e:	f0 0d       	add	r31, r0
    1c20:	b1 1d       	adc	r27, r1
    1c22:	63 9f       	mul	r22, r19
    1c24:	aa 27       	eor	r26, r26
    1c26:	f0 0d       	add	r31, r0
    1c28:	b1 1d       	adc	r27, r1
    1c2a:	aa 1f       	adc	r26, r26
    1c2c:	64 9f       	mul	r22, r20
    1c2e:	66 27       	eor	r22, r22
    1c30:	b0 0d       	add	r27, r0
    1c32:	a1 1d       	adc	r26, r1
    1c34:	66 1f       	adc	r22, r22
    1c36:	82 9f       	mul	r24, r18
    1c38:	22 27       	eor	r18, r18
    1c3a:	b0 0d       	add	r27, r0
    1c3c:	a1 1d       	adc	r26, r1
    1c3e:	62 1f       	adc	r22, r18
    1c40:	73 9f       	mul	r23, r19
    1c42:	b0 0d       	add	r27, r0
    1c44:	a1 1d       	adc	r26, r1
    1c46:	62 1f       	adc	r22, r18
    1c48:	83 9f       	mul	r24, r19
    1c4a:	a0 0d       	add	r26, r0
    1c4c:	61 1d       	adc	r22, r1
    1c4e:	22 1f       	adc	r18, r18
    1c50:	74 9f       	mul	r23, r20
    1c52:	33 27       	eor	r19, r19
    1c54:	a0 0d       	add	r26, r0
    1c56:	61 1d       	adc	r22, r1
    1c58:	23 1f       	adc	r18, r19
    1c5a:	84 9f       	mul	r24, r20
    1c5c:	60 0d       	add	r22, r0
    1c5e:	21 1d       	adc	r18, r1
    1c60:	82 2f       	mov	r24, r18
    1c62:	76 2f       	mov	r23, r22
    1c64:	6a 2f       	mov	r22, r26
    1c66:	11 24       	eor	r1, r1
    1c68:	9f 57       	subi	r25, 0x7F	; 127
    1c6a:	50 40       	sbci	r21, 0x00	; 0
    1c6c:	8a f0       	brmi	.+34     	; 0x1c90 <__mulsf3_pse+0x84>
    1c6e:	e1 f0       	breq	.+56     	; 0x1ca8 <__mulsf3_pse+0x9c>
    1c70:	88 23       	and	r24, r24
    1c72:	4a f0       	brmi	.+18     	; 0x1c86 <__mulsf3_pse+0x7a>
    1c74:	ee 0f       	add	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	bb 1f       	adc	r27, r27
    1c7a:	66 1f       	adc	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	88 1f       	adc	r24, r24
    1c80:	91 50       	subi	r25, 0x01	; 1
    1c82:	50 40       	sbci	r21, 0x00	; 0
    1c84:	a9 f7       	brne	.-22     	; 0x1c70 <__mulsf3_pse+0x64>
    1c86:	9e 3f       	cpi	r25, 0xFE	; 254
    1c88:	51 05       	cpc	r21, r1
    1c8a:	70 f0       	brcs	.+28     	; 0x1ca8 <__mulsf3_pse+0x9c>
    1c8c:	5c cf       	rjmp	.-328    	; 0x1b46 <__fp_inf>
    1c8e:	a6 cf       	rjmp	.-180    	; 0x1bdc <__fp_szero>
    1c90:	5f 3f       	cpi	r21, 0xFF	; 255
    1c92:	ec f3       	brlt	.-6      	; 0x1c8e <__mulsf3_pse+0x82>
    1c94:	98 3e       	cpi	r25, 0xE8	; 232
    1c96:	dc f3       	brlt	.-10     	; 0x1c8e <__mulsf3_pse+0x82>
    1c98:	86 95       	lsr	r24
    1c9a:	77 95       	ror	r23
    1c9c:	67 95       	ror	r22
    1c9e:	b7 95       	ror	r27
    1ca0:	f7 95       	ror	r31
    1ca2:	e7 95       	ror	r30
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	c1 f7       	brne	.-16     	; 0x1c98 <__mulsf3_pse+0x8c>
    1ca8:	fe 2b       	or	r31, r30
    1caa:	88 0f       	add	r24, r24
    1cac:	91 1d       	adc	r25, r1
    1cae:	96 95       	lsr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	97 f9       	bld	r25, 7
    1cb4:	08 95       	ret

00001cb6 <pow>:
    1cb6:	fa 01       	movw	r30, r20
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	30 96       	adiw	r30, 0x00	; 0
    1cbe:	21 05       	cpc	r18, r1
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	99 f1       	breq	.+102    	; 0x1d2a <pow+0x74>
    1cc4:	61 15       	cp	r22, r1
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	61 f4       	brne	.+24     	; 0x1ce2 <pow+0x2c>
    1cca:	80 38       	cpi	r24, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	9b 07       	cpc	r25, r27
    1cd0:	49 f1       	breq	.+82     	; 0x1d24 <pow+0x6e>
    1cd2:	68 94       	set
    1cd4:	90 38       	cpi	r25, 0x80	; 128
    1cd6:	81 05       	cpc	r24, r1
    1cd8:	61 f0       	breq	.+24     	; 0x1cf2 <pow+0x3c>
    1cda:	80 38       	cpi	r24, 0x80	; 128
    1cdc:	bf ef       	ldi	r27, 0xFF	; 255
    1cde:	9b 07       	cpc	r25, r27
    1ce0:	41 f0       	breq	.+16     	; 0x1cf2 <pow+0x3c>
    1ce2:	99 23       	and	r25, r25
    1ce4:	42 f5       	brpl	.+80     	; 0x1d36 <pow+0x80>
    1ce6:	ff 3f       	cpi	r31, 0xFF	; 255
    1ce8:	e1 05       	cpc	r30, r1
    1cea:	31 05       	cpc	r19, r1
    1cec:	21 05       	cpc	r18, r1
    1cee:	11 f1       	breq	.+68     	; 0x1d34 <pow+0x7e>
    1cf0:	e8 94       	clt
    1cf2:	08 94       	sec
    1cf4:	e7 95       	ror	r30
    1cf6:	d9 01       	movw	r26, r18
    1cf8:	aa 23       	and	r26, r26
    1cfa:	29 f4       	brne	.+10     	; 0x1d06 <pow+0x50>
    1cfc:	ab 2f       	mov	r26, r27
    1cfe:	be 2f       	mov	r27, r30
    1d00:	f8 5f       	subi	r31, 0xF8	; 248
    1d02:	d0 f3       	brcs	.-12     	; 0x1cf8 <pow+0x42>
    1d04:	10 c0       	rjmp	.+32     	; 0x1d26 <pow+0x70>
    1d06:	ff 5f       	subi	r31, 0xFF	; 255
    1d08:	70 f4       	brcc	.+28     	; 0x1d26 <pow+0x70>
    1d0a:	a6 95       	lsr	r26
    1d0c:	e0 f7       	brcc	.-8      	; 0x1d06 <pow+0x50>
    1d0e:	f7 39       	cpi	r31, 0x97	; 151
    1d10:	50 f0       	brcs	.+20     	; 0x1d26 <pow+0x70>
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <pow+0x64>
    1d14:	ff 3a       	cpi	r31, 0xAF	; 175
    1d16:	38 f4       	brcc	.+14     	; 0x1d26 <pow+0x70>
    1d18:	9f 77       	andi	r25, 0x7F	; 127
    1d1a:	9f 93       	push	r25
    1d1c:	0c d0       	rcall	.+24     	; 0x1d36 <pow+0x80>
    1d1e:	0f 90       	pop	r0
    1d20:	07 fc       	sbrc	r0, 7
    1d22:	90 58       	subi	r25, 0x80	; 128
    1d24:	08 95       	ret
    1d26:	3e f0       	brts	.+14     	; 0x1d36 <pow+0x80>
    1d28:	14 cf       	rjmp	.-472    	; 0x1b52 <__fp_nan>
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	80 e8       	ldi	r24, 0x80	; 128
    1d30:	9f e3       	ldi	r25, 0x3F	; 63
    1d32:	08 95       	ret
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	9f 77       	andi	r25, 0x7F	; 127
    1d38:	5f 93       	push	r21
    1d3a:	4f 93       	push	r20
    1d3c:	3f 93       	push	r19
    1d3e:	2f 93       	push	r18
    1d40:	9e d0       	rcall	.+316    	; 0x1e7e <log>
    1d42:	2f 91       	pop	r18
    1d44:	3f 91       	pop	r19
    1d46:	4f 91       	pop	r20
    1d48:	5f 91       	pop	r21
    1d4a:	52 df       	rcall	.-348    	; 0x1bf0 <__mulsf3>
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <exp>
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <pow+0xa0>
    1d50:	0e f0       	brts	.+2      	; 0x1d54 <pow+0x9e>
    1d52:	f9 ce       	rjmp	.-526    	; 0x1b46 <__fp_inf>
    1d54:	42 cf       	rjmp	.-380    	; 0x1bda <__fp_zero>
    1d56:	fd ce       	rjmp	.-518    	; 0x1b52 <__fp_nan>

00001d58 <exp>:
    1d58:	26 df       	rcall	.-436    	; 0x1ba6 <__fp_splitA>
    1d5a:	c8 f3       	brcs	.-14     	; 0x1d4e <pow+0x98>
    1d5c:	96 38       	cpi	r25, 0x86	; 134
    1d5e:	c0 f7       	brcc	.-16     	; 0x1d50 <pow+0x9a>
    1d60:	07 f8       	bld	r0, 7
    1d62:	0f 92       	push	r0
    1d64:	e8 94       	clt
    1d66:	2b e3       	ldi	r18, 0x3B	; 59
    1d68:	3a ea       	ldi	r19, 0xAA	; 170
    1d6a:	48 eb       	ldi	r20, 0xB8	; 184
    1d6c:	5f e7       	ldi	r21, 0x7F	; 127
    1d6e:	4e df       	rcall	.-356    	; 0x1c0c <__mulsf3_pse>
    1d70:	0f 92       	push	r0
    1d72:	0f 92       	push	r0
    1d74:	0f 92       	push	r0
    1d76:	4d b7       	in	r20, 0x3d	; 61
    1d78:	5e b7       	in	r21, 0x3e	; 62
    1d7a:	0f 92       	push	r0
    1d7c:	c0 d0       	rcall	.+384    	; 0x1efe <modf>
    1d7e:	e4 ee       	ldi	r30, 0xE4	; 228
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	16 d0       	rcall	.+44     	; 0x1db0 <__fp_powser>
    1d84:	4f 91       	pop	r20
    1d86:	5f 91       	pop	r21
    1d88:	ef 91       	pop	r30
    1d8a:	ff 91       	pop	r31
    1d8c:	e5 95       	asr	r30
    1d8e:	ee 1f       	adc	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <exp+0x4e>
    1d94:	fe 57       	subi	r31, 0x7E	; 126
    1d96:	e0 68       	ori	r30, 0x80	; 128
    1d98:	44 27       	eor	r20, r20
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	44 1f       	adc	r20, r20
    1d9e:	fa 95       	dec	r31
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <exp+0x42>
    1da2:	41 95       	neg	r20
    1da4:	55 0b       	sbc	r21, r21
    1da6:	32 d0       	rcall	.+100    	; 0x1e0c <ldexp>
    1da8:	0f 90       	pop	r0
    1daa:	07 fe       	sbrs	r0, 7
    1dac:	26 c0       	rjmp	.+76     	; 0x1dfa <inverse>
    1dae:	08 95       	ret

00001db0 <__fp_powser>:
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	1f 93       	push	r17
    1db6:	0f 93       	push	r16
    1db8:	ff 92       	push	r15
    1dba:	ef 92       	push	r14
    1dbc:	df 92       	push	r13
    1dbe:	7b 01       	movw	r14, r22
    1dc0:	8c 01       	movw	r16, r24
    1dc2:	68 94       	set
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <__fp_powser+0x20>
    1dc6:	da 2e       	mov	r13, r26
    1dc8:	ef 01       	movw	r28, r30
    1dca:	1e df       	rcall	.-452    	; 0x1c08 <__mulsf3x>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e8 94       	clt
    1dd0:	a5 91       	lpm	r26, Z+
    1dd2:	25 91       	lpm	r18, Z+
    1dd4:	35 91       	lpm	r19, Z+
    1dd6:	45 91       	lpm	r20, Z+
    1dd8:	55 91       	lpm	r21, Z+
    1dda:	ae f3       	brts	.-22     	; 0x1dc6 <__fp_powser+0x16>
    1ddc:	ef 01       	movw	r28, r30
    1dde:	62 dd       	rcall	.-1340   	; 0x18a4 <__addsf3x>
    1de0:	fe 01       	movw	r30, r28
    1de2:	97 01       	movw	r18, r14
    1de4:	a8 01       	movw	r20, r16
    1de6:	da 94       	dec	r13
    1de8:	79 f7       	brne	.-34     	; 0x1dc8 <__fp_powser+0x18>
    1dea:	df 90       	pop	r13
    1dec:	ef 90       	pop	r14
    1dee:	ff 90       	pop	r15
    1df0:	0f 91       	pop	r16
    1df2:	1f 91       	pop	r17
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <inverse>:
    1dfa:	9b 01       	movw	r18, r22
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	80 e8       	ldi	r24, 0x80	; 128
    1e04:	9f e3       	ldi	r25, 0x3F	; 63
    1e06:	a5 cd       	rjmp	.-1206   	; 0x1952 <__divsf3>
    1e08:	9e ce       	rjmp	.-708    	; 0x1b46 <__fp_inf>
    1e0a:	ac c0       	rjmp	.+344    	; 0x1f64 <__fp_mpack>

00001e0c <ldexp>:
    1e0c:	cc de       	rcall	.-616    	; 0x1ba6 <__fp_splitA>
    1e0e:	e8 f3       	brcs	.-6      	; 0x1e0a <inverse+0x10>
    1e10:	99 23       	and	r25, r25
    1e12:	d9 f3       	breq	.-10     	; 0x1e0a <inverse+0x10>
    1e14:	94 0f       	add	r25, r20
    1e16:	51 1d       	adc	r21, r1
    1e18:	bb f3       	brvs	.-18     	; 0x1e08 <inverse+0xe>
    1e1a:	91 50       	subi	r25, 0x01	; 1
    1e1c:	50 40       	sbci	r21, 0x00	; 0
    1e1e:	94 f0       	brlt	.+36     	; 0x1e44 <ldexp+0x38>
    1e20:	59 f0       	breq	.+22     	; 0x1e38 <ldexp+0x2c>
    1e22:	88 23       	and	r24, r24
    1e24:	32 f0       	brmi	.+12     	; 0x1e32 <ldexp+0x26>
    1e26:	66 0f       	add	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	91 50       	subi	r25, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	c1 f7       	brne	.-16     	; 0x1e22 <ldexp+0x16>
    1e32:	9e 3f       	cpi	r25, 0xFE	; 254
    1e34:	51 05       	cpc	r21, r1
    1e36:	44 f7       	brge	.-48     	; 0x1e08 <inverse+0xe>
    1e38:	88 0f       	add	r24, r24
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	96 95       	lsr	r25
    1e3e:	87 95       	ror	r24
    1e40:	97 f9       	bld	r25, 7
    1e42:	08 95       	ret
    1e44:	5f 3f       	cpi	r21, 0xFF	; 255
    1e46:	ac f0       	brlt	.+42     	; 0x1e72 <ldexp+0x66>
    1e48:	98 3e       	cpi	r25, 0xE8	; 232
    1e4a:	9c f0       	brlt	.+38     	; 0x1e72 <ldexp+0x66>
    1e4c:	bb 27       	eor	r27, r27
    1e4e:	86 95       	lsr	r24
    1e50:	77 95       	ror	r23
    1e52:	67 95       	ror	r22
    1e54:	b7 95       	ror	r27
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <ldexp+0x4e>
    1e58:	b1 60       	ori	r27, 0x01	; 1
    1e5a:	93 95       	inc	r25
    1e5c:	c1 f7       	brne	.-16     	; 0x1e4e <ldexp+0x42>
    1e5e:	bb 0f       	add	r27, r27
    1e60:	58 f7       	brcc	.-42     	; 0x1e38 <ldexp+0x2c>
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <ldexp+0x5c>
    1e64:	60 ff       	sbrs	r22, 0
    1e66:	e8 cf       	rjmp	.-48     	; 0x1e38 <ldexp+0x2c>
    1e68:	6f 5f       	subi	r22, 0xFF	; 255
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	e3 cf       	rjmp	.-58     	; 0x1e38 <ldexp+0x2c>
    1e72:	b4 ce       	rjmp	.-664    	; 0x1bdc <__fp_szero>
    1e74:	0e f0       	brts	.+2      	; 0x1e78 <ldexp+0x6c>
    1e76:	76 c0       	rjmp	.+236    	; 0x1f64 <__fp_mpack>
    1e78:	6c ce       	rjmp	.-808    	; 0x1b52 <__fp_nan>
    1e7a:	68 94       	set
    1e7c:	64 ce       	rjmp	.-824    	; 0x1b46 <__fp_inf>

00001e7e <log>:
    1e7e:	93 de       	rcall	.-730    	; 0x1ba6 <__fp_splitA>
    1e80:	c8 f3       	brcs	.-14     	; 0x1e74 <ldexp+0x68>
    1e82:	99 23       	and	r25, r25
    1e84:	d1 f3       	breq	.-12     	; 0x1e7a <ldexp+0x6e>
    1e86:	c6 f3       	brts	.-16     	; 0x1e78 <ldexp+0x6c>
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	1f 93       	push	r17
    1e8e:	0f 93       	push	r16
    1e90:	ff 92       	push	r15
    1e92:	c9 2f       	mov	r28, r25
    1e94:	dd 27       	eor	r29, r29
    1e96:	88 23       	and	r24, r24
    1e98:	2a f0       	brmi	.+10     	; 0x1ea4 <log+0x26>
    1e9a:	21 97       	sbiw	r28, 0x01	; 1
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	da f7       	brpl	.-10     	; 0x1e9a <log+0x1c>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f eb       	ldi	r21, 0xBF	; 191
    1eac:	9f e3       	ldi	r25, 0x3F	; 63
    1eae:	88 39       	cpi	r24, 0x98	; 152
    1eb0:	20 f0       	brcs	.+8      	; 0x1eba <log+0x3c>
    1eb2:	80 3e       	cpi	r24, 0xE0	; 224
    1eb4:	30 f0       	brcs	.+12     	; 0x1ec2 <log+0x44>
    1eb6:	21 96       	adiw	r28, 0x01	; 1
    1eb8:	8f 77       	andi	r24, 0x7F	; 127
    1eba:	e3 dc       	rcall	.-1594   	; 0x1882 <__addsf3>
    1ebc:	ec e0       	ldi	r30, 0x0C	; 12
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <log+0x4a>
    1ec2:	df dc       	rcall	.-1602   	; 0x1882 <__addsf3>
    1ec4:	e9 e3       	ldi	r30, 0x39	; 57
    1ec6:	f1 e0       	ldi	r31, 0x01	; 1
    1ec8:	73 df       	rcall	.-282    	; 0x1db0 <__fp_powser>
    1eca:	8b 01       	movw	r16, r22
    1ecc:	be 01       	movw	r22, r28
    1ece:	ec 01       	movw	r28, r24
    1ed0:	fb 2e       	mov	r15, r27
    1ed2:	6f 57       	subi	r22, 0x7F	; 127
    1ed4:	71 09       	sbc	r23, r1
    1ed6:	75 95       	asr	r23
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 0b       	sbc	r24, r24
    1edc:	99 0b       	sbc	r25, r25
    1ede:	d4 dd       	rcall	.-1112   	; 0x1a88 <__floatsisf>
    1ee0:	28 e1       	ldi	r18, 0x18	; 24
    1ee2:	32 e7       	ldi	r19, 0x72	; 114
    1ee4:	41 e3       	ldi	r20, 0x31	; 49
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	8f de       	rcall	.-738    	; 0x1c08 <__mulsf3x>
    1eea:	af 2d       	mov	r26, r15
    1eec:	98 01       	movw	r18, r16
    1eee:	ae 01       	movw	r20, r28
    1ef0:	ff 90       	pop	r15
    1ef2:	0f 91       	pop	r16
    1ef4:	1f 91       	pop	r17
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	d4 dc       	rcall	.-1624   	; 0x18a4 <__addsf3x>
    1efc:	3b ce       	rjmp	.-906    	; 0x1b74 <__fp_round>

00001efe <modf>:
    1efe:	fa 01       	movw	r30, r20
    1f00:	dc 01       	movw	r26, r24
    1f02:	aa 0f       	add	r26, r26
    1f04:	bb 1f       	adc	r27, r27
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	bf 57       	subi	r27, 0x7F	; 127
    1f0c:	28 f4       	brcc	.+10     	; 0x1f18 <modf+0x1a>
    1f0e:	22 27       	eor	r18, r18
    1f10:	33 27       	eor	r19, r19
    1f12:	44 27       	eor	r20, r20
    1f14:	50 78       	andi	r21, 0x80	; 128
    1f16:	1f c0       	rjmp	.+62     	; 0x1f56 <modf+0x58>
    1f18:	b7 51       	subi	r27, 0x17	; 23
    1f1a:	88 f4       	brcc	.+34     	; 0x1f3e <modf+0x40>
    1f1c:	ab 2f       	mov	r26, r27
    1f1e:	00 24       	eor	r0, r0
    1f20:	46 95       	lsr	r20
    1f22:	37 95       	ror	r19
    1f24:	27 95       	ror	r18
    1f26:	01 1c       	adc	r0, r1
    1f28:	a3 95       	inc	r26
    1f2a:	d2 f3       	brmi	.-12     	; 0x1f20 <modf+0x22>
    1f2c:	00 20       	and	r0, r0
    1f2e:	69 f0       	breq	.+26     	; 0x1f4a <modf+0x4c>
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	44 1f       	adc	r20, r20
    1f36:	b3 95       	inc	r27
    1f38:	da f3       	brmi	.-10     	; 0x1f30 <modf+0x32>
    1f3a:	0d d0       	rcall	.+26     	; 0x1f56 <modf+0x58>
    1f3c:	a1 cc       	rjmp	.-1726   	; 0x1880 <__subsf3>
    1f3e:	61 30       	cpi	r22, 0x01	; 1
    1f40:	71 05       	cpc	r23, r1
    1f42:	a0 e8       	ldi	r26, 0x80	; 128
    1f44:	8a 07       	cpc	r24, r26
    1f46:	b9 46       	sbci	r27, 0x69	; 105
    1f48:	30 f4       	brcc	.+12     	; 0x1f56 <modf+0x58>
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	66 27       	eor	r22, r22
    1f50:	77 27       	eor	r23, r23
    1f52:	88 27       	eor	r24, r24
    1f54:	90 78       	andi	r25, 0x80	; 128
    1f56:	30 96       	adiw	r30, 0x00	; 0
    1f58:	21 f0       	breq	.+8      	; 0x1f62 <modf+0x64>
    1f5a:	20 83       	st	Z, r18
    1f5c:	31 83       	std	Z+1, r19	; 0x01
    1f5e:	42 83       	std	Z+2, r20	; 0x02
    1f60:	53 83       	std	Z+3, r21	; 0x03
    1f62:	08 95       	ret

00001f64 <__fp_mpack>:
    1f64:	9f 3f       	cpi	r25, 0xFF	; 255
    1f66:	31 f0       	breq	.+12     	; 0x1f74 <__fp_mpack_finite+0xc>

00001f68 <__fp_mpack_finite>:
    1f68:	91 50       	subi	r25, 0x01	; 1
    1f6a:	20 f4       	brcc	.+8      	; 0x1f74 <__fp_mpack_finite+0xc>
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b7 95       	ror	r27
    1f74:	88 0f       	add	r24, r24
    1f76:	91 1d       	adc	r25, r1
    1f78:	96 95       	lsr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	97 f9       	bld	r25, 7
    1f7e:	08 95       	ret

00001f80 <__udivmodhi4>:
    1f80:	aa 1b       	sub	r26, r26
    1f82:	bb 1b       	sub	r27, r27
    1f84:	51 e1       	ldi	r21, 0x11	; 17
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <__udivmodhi4_ep>

00001f88 <__udivmodhi4_loop>:
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	a6 17       	cp	r26, r22
    1f8e:	b7 07       	cpc	r27, r23
    1f90:	10 f0       	brcs	.+4      	; 0x1f96 <__udivmodhi4_ep>
    1f92:	a6 1b       	sub	r26, r22
    1f94:	b7 0b       	sbc	r27, r23

00001f96 <__udivmodhi4_ep>:
    1f96:	88 1f       	adc	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	5a 95       	dec	r21
    1f9c:	a9 f7       	brne	.-22     	; 0x1f88 <__udivmodhi4_loop>
    1f9e:	80 95       	com	r24
    1fa0:	90 95       	com	r25
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	08 95       	ret

00001fa8 <_exit>:
    1fa8:	f8 94       	cli

00001faa <__stop_program>:
    1faa:	ff cf       	rjmp	.-2      	; 0x1faa <__stop_program>
